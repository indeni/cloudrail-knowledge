name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:

  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9]

    steps:
    - uses: actions/checkout@v2
    # - uses: gaurav-nelson/github-action-markdown-link-check@v1
    #   with:
    #     config-file: './.github/workflows/md-link-check.config.json'
    - name: Check binary
      if: ${{ github.event_name == 'pull_request' }}
      run: |
        brhead="${GITHUB_REF//merge/head}"
        git fetch --no-tags origin $brhead:refs/remotes/origin/$brhead
        chmod +x ./.github/workflows/check-binary.sh
        git fetch --no-tags origin $GITHUB_BASE_REF:refs/remotes/origin/$GITHUB_BASE_REF
        src='remotes/origin/'$brhead
        dst='remotes/origin/'$GITHUB_BASE_REF
        ./.github/workflows/check-binary.sh $src $dst
      shell: bash
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f dev_requirements.txt ]; then pip install -r dev_requirements.txt; fi
    # - name: Lint with pylint
    #   run: |
    #     # stop the build if there are Python syntax errors or undefined names
    #     pylint ./cloudrail

    - name: Get tests binaries
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.S3_DATA_AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.S3_DATA_AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: us-east-1
      run: |
        cd tests/knowledge
        aws s3 sync s3://cloudrail-knowledge-tests-data . --quiet
        /bin/bash -c "find . -type f | grep zip"

    - name: Test with pytest
      env:
        JENKINS_ENV: true
        AWS_DEFAULT_REGION: us-east-1
        TESTS_CACHED_PLAN_RATIO: 100
      run: |
        pytest --junit-xml pytest.xml

    - name: Upload Unit Test Results
      uses: actions/upload-artifact@v2
      if: success() || failure()
      with:
        name: Unit Test Results (Python ${{ matrix.python-version }})
        path: pytest.xml
    - name: Ensure that mkdocs build pass
      run: |
        pip install livereload mkdocs mkdocs-material mkdocstrings
        mkdocs build 2> >(tee -a mkdocs_builds_results.txt >&2)
        if grep "The following pages exist in the docs directory" mkdocs_builds_results.txt
        then
          echo "Some *.md files are not referenced in mkdocs.yml, please add them. See output above."
          exit 1
        fi
        
  publish-test-results:
    name: Publish Test Report
    runs-on: ubuntu-latest
    if: success() || failure()
    needs: build
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts
      - uses: EnricoMi/publish-unit-test-result-action@v1
        with:
          files: artifacts/**/*.xml
          fail_on: nothing
          check_name: Test Report
