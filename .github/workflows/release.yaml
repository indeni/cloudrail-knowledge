name: Create a new release

on: [workflow_dispatch]

jobs:
  release-new-version:
    strategy:
      matrix:
        python-version: [ 3.9 ]
    runs-on: ubuntu-latest
    steps:
    - name: checkout
      uses: actions/checkout@v2
      with:
        token: ${{ secrets.PAT_CLOUDRAIL_KNOWLEDGE }}
    - name: markdown check 
      uses: gaurav-nelson/github-action-markdown-link-check@v1
      with:
        config-file: './.github/workflows/md-link-check.config.json'
        continue-on-error: true
    - name: get new version
      uses: anothrNick/github-tag-action@master
      id: get_new_tag
      env:
        WITH_V: true
        DEFAULT_BUMP: patch
        DRY_RUN: true
    - name: check if new version exist
      run: |
        if [ -z "${{steps.get_new_tag.outputs.new_tag}}" ]; then
            echo "No new version"
            exit 1
        fi
    - name: Save version into env var
      run: echo "RELEASE_VERSION=${{steps.get_new_tag.outputs.new_tag}}" >> $GITHUB_ENV
    - name: Update version.py
      run: |
        version_file="cloudrail/version.py"
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        echo "latest tag: ${{ env.RELEASE_VERSION }}"
        echo "__version__ = '${{ env.RELEASE_VERSION }}'" > $version_file
        git commit --reuse-message=HEAD $version_file || echo "No changes to commit"
        git push origin
    - name: Bump version and push tag
      uses: anothrNick/github-tag-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.PAT_CLOUDRAIL_KNOWLEDGE }}
        WITH_V: true
        DEFAULT_BUMP: patch

    # create-new-release:
    - name: Create github release
      env:
        GITHUB_TOKEN: ${{ secrets.PAT_CLOUDRAIL_KNOWLEDGE }}
      run: |
        gh release create ${{ env.RELEASE_VERSION }}  -t ${{ env.RELEASE_VERSION }} --repo indeni/cloudrail-knowledge

    # release-package-to-PyPi:
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install wheel twine pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Upload pip package to PyPi
      run: |
        python setup.py sdist bdist_wheel --version ${{ env.RELEASE_VERSION }}
        twine upload dist/*  -u __token__ -p ${{ secrets.PYPI_API_TOKEN }}

  build-and-deploy-documentation:
    needs: release-new-version
    name: Build and Deploy Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install livereload==2.6.3 mkdocs==1.2.2 mkdocs-material==7.3.0 mkdocstrings==0.16.1 mkdocs-autorefs==0.3.0
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Deploy docs
        run: |
          mkdocs gh-deploy --force
      - name: Send notificationto slack if failure
        uses: act10ns/slack@v1
        env:
         SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
           status: ${{ job.status }}
           channel: '#cloudrail-dev'
           message: Release body of ${{ github.ref }} ${{ env.user }}
                    ${{ github.event.commits[0].author.name }}
                    ${{ github.event.commits[0].message }}

        if: failure()
