AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  LatestECSOptimizedAMI:
    Description: AMI ID
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id

Resources:
  TestVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "192.168.10.0/24"
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs ]
      MapPublicIpOnLaunch: true
      VpcId: !Ref TestVpc
      CidrBlock: "192.168.10.0/24"
  PublicNacl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref TestVpc
  PublicNaclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties: 
      NetworkAclId: !Ref PublicNacl
      SubnetId: !Ref PublicSubnet
  PublicNaclInboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNacl
      RuleNumber: 100
      Egress: false
      Protocol: 6
      RuleAction: "allow"
      CidrBlock: "0.0.0.0/0"      
      PortRange:
        From: 80
        To: 3306
  PublicNaclOutboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNacl
      RuleNumber: 100
      Egress: true
      Protocol: -1
      RuleAction: "allow"
      CidrBlock: "0.0.0.0/0"      
      PortRange:
        From: 0
        To: 0
  Igw:
    Type: AWS::EC2::InternetGateway
  IgwAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref TestVpc
      InternetGatewayId: !Ref Igw
  Rt:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref TestVpc
  RtDefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref Rt
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref Igw
  RtPublicAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref Rt
      SubnetId: !Ref PublicSubnet
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref TestVpc
      GroupDescription: "Test security group"
      GroupName: "sg"
      SecurityGroupEgress:
        - FromPort: 0
          ToPort: 0
          IpProtocol: "-1"
          CidrIp: "0.0.0.0/0"
      SecurityGroupIngress:
        - Description: "mysql"
          FromPort: 80
          ToPort: 3306
          IpProtocol: "tcp"
          CidrIp: "0.0.0.0/0"
  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: "ecs-cluster"
  WebServerTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: "web-server-task"
      ContainerDefinitions:
        - Name: "apache-web-server"
          #Image: "167389268608.dkr.ecr.us-east-1.amazonaws.com/apache-web-server:latest"
          Image: "nginx:latest"
          Essential: true
          PortMappings:
            - ContainerPort: 80
              HostPort: 80
              Protocol: "tcp"
      ExecutionRoleArn: !GetAtt EcsRole.Arn
      NetworkMode: "awsvpc"      
      Memory: "512"
      Cpu: "256"
      RequiresCompatibilities: ["FARGATE"]
  WebServerEt:
    Type: AWS::Events::Rule
    Properties:
      Name: "web-server-schedule-every-1d-rule"
      ScheduleExpression: "rate(24 hours)"
      Targets:
        - Id: "web-server-target-id"
          Arn: !GetAtt EcsCluster.Arn
          RoleArn: !GetAtt EventsRole.Arn          
          EcsParameters:
            TaskCount: 1
            TaskDefinitionArn: !Ref WebServerTaskDefinition
            LaunchType: "FARGATE"
            NetworkConfiguration:
              AwsVpcConfiguration:
                AssignPublicIp: "ENABLED"
                SecurityGroups: [ !Ref SecurityGroup ]
                Subnets: [ !Ref PublicSubnet ]
  EventsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: ["sts:AssumeRole"]
            Principal:
              Service: "events.amazonaws.com"
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
  EcsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: ["sts:AssumeRole"]
            Principal:
              Service: "ecs-tasks.amazonaws.com"
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
