AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  LatestECSOptimizedAMI:
    Description: AMI ID
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id

Resources:
  TestVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.0.0.0/16"
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs ]
      MapPublicIpOnLaunch: true
      VpcId: !Ref TestVpc
      CidrBlock: "10.0.101.0/24"
  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs ]
      VpcId: !Ref TestVpc
      CidrBlock: "10.0.102.0/24"
  AllocateIpToNatGw:
    Type: AWS::EC2::EIP
    DependsOn: [IgwAttachment]
    Properties:
      Domain: "vpc"
  PrivateSubnetNatGw:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt AllocateIpToNatGw.AllocationId
      SubnetId: !Ref PublicSubnet
  PrivateRt:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref TestVpc
  PrivateAssoc1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRt
      SubnetId: !Ref PrivateSubnet
  PrivateDefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRt
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref PrivateSubnetNatGw
  # PrivateRouteS3: # This is present in TF test template, but this route is added automatically.
  #   Type: AWS::EC2::Route
  #   Properties:
  #     RouteTableId: !Ref PrivateRt
  #     DestinationCidrBlock: "54.231.0.0/17"
  #     GatewayId: !Ref S3VpceGw      
  Igw:
    Type: AWS::EC2::InternetGateway
  IgwAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref TestVpc
      InternetGatewayId: !Ref Igw
  PublicRt:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref TestVpc
  PublicRtDefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRt
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref Igw
  PublicRtAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRt
      SubnetId: !Ref PublicSubnet
  PrivateNacl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref TestVpc
  PrivateNaclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties: 
      NetworkAclId: !Ref PrivateNacl
      SubnetId: !Ref PrivateSubnet
  PrivateNaclInboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNacl
      RuleNumber: 100
      Egress: false
      Protocol: 6
      RuleAction: "allow"
      CidrBlock: "192.168.100.128/25"
      PortRange:
        From: 80
        To: 80
  PrivateNaclOutboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNacl
      RuleNumber: 100
      Egress: true
      Protocol: -1
      RuleAction: "allow"
      CidrBlock: "0.0.0.0/0"      
      PortRange:
        From: 0
        To: 0
  HttpSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref TestVpc
      GroupDescription: "Test security group"
      GroupName: "sg"
      SecurityGroupEgress:
        - FromPort: 0
          ToPort: 0
          IpProtocol: "-1"
          CidrIp: "0.0.0.0/0"
      SecurityGroupIngress:
        - Description: "mysql"
          FromPort: 80
          ToPort: 80
          IpProtocol: "tcp"
          CidrIp: "192.168.100.128/25"
  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: "ecs-cluster"
  WebServerTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: "web-server-task"
      ContainerDefinitions:
        - Name: "apache-web-server"
          #Image: "167389268608.dkr.ecr.us-east-1.amazonaws.com/apache-web-server:latest"
          Image: "nginx:latest"          
          Essential: true
          PortMappings:
            - ContainerPort: 80
              HostPort: 80
              Protocol: "tcp"
      ExecutionRoleArn: !Ref ExecutionRole
      TaskRoleArn: !Ref TaskRole
      NetworkMode: "awsvpc"      
      Memory: "512"
      Cpu: "256"
      RequiresCompatibilities: ["FARGATE"]
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: ["sts:AssumeRole"]
            Principal:
              Service: "ecs-tasks.amazonaws.com"
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: ["sts:AssumeRole"]
            Principal:
              Service: "ecs-tasks.amazonaws.com"
      Policies:
        - PolicyName: "ecs-instace-role"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action: "s3:*"
                Effect: "Allow"
                Resource: "*"
  WebServerService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: "web-server-service"
      Cluster: !Ref EcsCluster
      TaskDefinition: !Ref WebServerTaskDefinition
      DesiredCount: 1
      LaunchType: "FARGATE"
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets: [!Ref PrivateSubnet]
          SecurityGroups: [!Ref HttpSG]
          AssignPublicIp: "DISABLED"
  WebServer:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestECSOptimizedAMI
      InstanceType: "t3.micro"  
      SubnetId: !Ref PrivateSubnet
      SecurityGroupIds: [!Ref HttpSG]
      Tags:
        - Key: "Name"
          Value: "HelloWorld"
