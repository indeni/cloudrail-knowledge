AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  LatestECSOptimizedAMI:
    Description: AMI ID
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id

Resources:
  TestVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "192.168.10.0/24"
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs ]
      MapPublicIpOnLaunch: true
      VpcId: !Ref TestVpc
      CidrBlock: "192.168.10.0/24"
      Tags:
        - Key: "Name"
          Value: "Cloudrail Subnet Test for Tagging"
  PublicNacl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref TestVpc
  PublicNaclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties: 
      NetworkAclId: !Ref PublicNacl
      SubnetId: !Ref PublicSubnet
  PublicNaclInboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNacl
      RuleNumber: 100
      Egress: false
      Protocol: "-1"
      RuleAction: "allow"
      CidrBlock: "0.0.0.0/0"      
      PortRange:
        From: 0    
        To: 0
  PublicNaclOutboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNacl
      RuleNumber: 100
      Egress: true
      Protocol: -1
      RuleAction: "allow"
      CidrBlock: "0.0.0.0/0"      
      PortRange:
        From: 0
        To: 0
  Igw:
    Type: AWS::EC2::InternetGateway
  IgwAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref TestVpc
      InternetGatewayId: !Ref Igw
  PublicRt:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref TestVpc
  PublicRtDefaultRoute:
    Type: AWS::EC2::Route
    DependsOn: IgwAttachment
    Properties:
      RouteTableId: !Ref PublicRt
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref Igw
  PublicRtAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRt
      SubnetId: !Ref PublicSubnet
  HttpSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref TestVpc
      GroupDescription: "Test security group"
      GroupName: "sg"
      SecurityGroupEgress:
        - FromPort: 0
          ToPort: 0
          IpProtocol: "-1"
          CidrIp: "0.0.0.0/0"
      SecurityGroupIngress:
        - Description: "mysql"
          FromPort: 0
          ToPort: 0
          IpProtocol: "-1"
          CidrIp: "10.0.0.0/16"      
  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: "ecs-cluster"
      Tags:
        - Key: "Name"
          Value: "ecs-cluster-test"
        - Key: "Env"
          Value: "Cloudrail"
  WebServerTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: "web-server-task"
      ContainerDefinitions:
        - Name: "apache-web-server"
          #Image: "167389268608.dkr.ecr.us-east-1.amazonaws.com/apache-web-server:latest"
          Image: "nginx:latest"          
          Essential: true
          PortMappings:
            - ContainerPort: 80
              HostPort: 80
              Protocol: "tcp"
      ExecutionRoleArn: !GetAtt ExecutionRole.Arn
      TaskRoleArn: !GetAtt TaskRole.Arn
      NetworkMode: "awsvpc"      
      Memory: "512"
      Cpu: "256"
      RequiresCompatibilities: ["FARGATE"]
      Tags:
        - Key: "Name"
          Value: "ecs-cluster-test"
        - Key: "Env"
          Value: "Cloudrail"
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: ["sts:AssumeRole"]
            Principal:
              Service: "ecs-tasks.amazonaws.com"
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: ["sts:AssumeRole"]
            Principal:
              Service: "ecs-tasks.amazonaws.com"
      Policies:
        - PolicyName: "ecs-instace-role"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action: "s3:*"
                Effect: "Allow"
                Resource: "*"
  PublicElb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: "public-elb"
      Scheme: "internet-facing"
      Type: "network"
      Subnets:
        - !Ref PublicSubnet
  ElbTg:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: "elb-tg"
      Port: 80
      Protocol: "TCP"
      VpcId: !Ref TestVpc
      TargetType: "ip"
      HealthCheckIntervalSeconds: 10
      HealthCheckPort: "80"
      HealthCheckEnabled: true
      HealthCheckProtocol: "TCP"
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref PublicElb
      Port: 80
      Protocol: "TCP"
      DefaultActions:
        - Type: "forward"
          TargetGroupArn: !Ref ElbTg
  WebServerService:
    Type: AWS::ECS::Service
    DependsOn: [Listener]
    Properties:
      ServiceName: "web-server-service"
      Cluster: !GetAtt EcsCluster.Arn
      TaskDefinition: !Ref WebServerTaskDefinition
      DesiredCount: 1
      LaunchType: "FARGATE"
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets: [!Ref PublicSubnet]
          AssignPublicIp: "ENABLED"
      LoadBalancers:
        - TargetGroupArn: !Ref ElbTg
          ContainerName: "apache-web-server"
          ContainerPort: 80          
      Tags:
        - Key: "Name"
          Value: "ecs-cluster-test"
        - Key: "Env"
          Value: "Cloudrail"
