AWSTemplateFormatVersion: "2010-09-09"

Resources:

  TestVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsHostnames: true
      EnableDnsSupport: true

  TestPublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref TestVpc
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: "10.0.101.0/24"
      MapPublicIpOnLaunch: true

  TestPublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref TestVpc
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: "10.0.102.0/24"
      MapPublicIpOnLaunch: true

  TestPublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref TestVpc
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: "10.0.103.0/24"
      MapPublicIpOnLaunch: true

  TestPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref TestVpc
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: "10.0.1.0/24"
      MapPublicIpOnLaunch: false

  TestPrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref TestVpc
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: "10.0.2.0/24"
      MapPublicIpOnLaunch: false

  TestPrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref TestVpc
      AvailabilityZone: !Select [ 2, !GetAZs  '' ]
      CidrBlock: "10.0.3.0/24"
      MapPublicIpOnLaunch: false

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref TestVpc

  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway3EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref TestPublicSubnet1

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref TestPublicSubnet2

  NatGateway3:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway3EIP.AllocationId
      SubnetId: !Ref TestPublicSubnet3

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref TestVpc

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref TestPublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref TestPublicSubnet2

  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref TestPublicSubnet3

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref TestVpc

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref TestPrivateSubnet1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref TestVpc

  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref TestPrivateSubnet2

  PrivateRouteTable3:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref TestVpc

  DefaultPrivateRoute3:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable3
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway3

  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable3
      SubnetId: !Ref TestPrivateSubnet3

  ClusterSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "eks-cluster-sg"
      GroupName: "eks-cluster-sg"
      SecurityGroupEgress:
        - Description: "Allow all outbound traffic"
          IpProtocol: "-1"
          FromPort: 0
          ToPort: 0
          CidrIp: "0.0.0.0/0"
      SecurityGroupIngress:
        - Description: "Allow all inbound traffic"
          IpProtocol: "-1"
          FromPort: 0
          ToPort: 0
          CidrIp: "0.0.0.0/0" # Bad practice, just for testing purposes
      VpcId: !Ref TestVpc

  ClusterRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "myekscluster-role"
      Description: "muekscluster-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "eks.amazonaws.com"
            Action:
              - "sts:AssumeRole"      
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
        - "arn:aws:iam::aws:policy/AmazonEKSServicePolicy"
        - "arn:aws:iam::aws:policy/AmazonEKSVPCResourceController"

  EksNodegroup:
    Type: AWS::EKS::Nodegroup
    DependsOn: [NatGateway1, NatGateway2, NatGateway3]
    Properties:
      ClusterName: !Ref MyCluster
      NodegroupName: "my-cluster-nodegroup"
      InstanceTypes:
        - "t2.micro"
      Subnets:
        - !Ref TestPrivateSubnet1
        - !Ref TestPrivateSubnet2
        - !Ref TestPrivateSubnet3
      ScalingConfig:
        DesiredSize: 0
        MaxSize: 5
        MinSize: 0
      NodeRole: !GetAtt NodeGroupRole.Arn

  NodeGroupRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "myekscluster-nodegroup-role"
      Description: "myekscluster-nodegroup-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
        - "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"               

  MyCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: "my-cluster"
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !Ref ClusterSG
        SubnetIds:
          - !Ref TestPrivateSubnet1
          - !Ref TestPrivateSubnet2
          - !Ref TestPrivateSubnet3
      RoleArn: !GetAtt ClusterRole.Arn
