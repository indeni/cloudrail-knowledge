AWSTemplateFormatVersion: "2010-09-09"

Resources:

  DefaultVPCInfo:
    Type: Custom::DefaultVPCInfo
    Properties:
      ServiceToken: !GetAtt DefaultVPCLambda.Arn

  DefaultVPCLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          import cfnresponse

          def handler(event, context):

            response_data = {}
            response_status = cfnresponse.FAILED

            if event['RequestType'] == 'Delete':
              response_status = cfnresponse.SUCCESS
              cfnresponse.send(event, context, response_status, response_data)

            try:
              client = boto3.client("ec2")
            except Exception as e:
              cfnresponse.send(event, context, response_status, response_data)

            try:
              default_vpc = client.describe_vpcs(
                  Filters=[
                      {
                          'Name': 'isDefault',
                          'Values': ['true']
                      }
                  ]
              )

              default_subnets = client.describe_subnets(
                  Filters=[
                      {
                          'Name': 'vpc-id',
                          'Values': [default_vpc['Vpcs'][0]['VpcId']]
                      }
                  ]
              )
            except Exception as e:
              cfnresponse.send(event, context, response_status, response_data)

            response_data['DefaultVPC'] = default_vpc['Vpcs'][0]['VpcId']

            i = 1
            for sn in default_subnets['Subnets']:
              response_data['DefaultSubnet'+str(i)] = sn['SubnetId']
              i += 1

            response_status = cfnresponse.SUCCESS
            cfnresponse.send(event, context, response_status, response_data)
      Handler: "index.handler"
      Runtime: python3.6
      Timeout: 30
      Role: !GetAtt LambdaExecutionRole.Arn

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - ec2:DescribeVpcs
            - ec2:DescribeSubnets
            Resource: "*"

  myEksCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: "test"
      RoleArn: !GetAtt eksClusterRole.Arn
      ResourcesVpcConfig:
        SubnetIds:
          - !GetAtt DefaultVPCInfo.DefaultSubnet1
          - !GetAtt DefaultVPCInfo.DefaultSubnet2

  eksClusterRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "eks-test-cluster-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "eks.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
