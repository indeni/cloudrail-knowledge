AWSTemplateFormatVersion: "2010-09-09"

Mappings:
  Region2ELBAccountId:
    us-east-1:
      AccountId: '127311923021'
    us-west-1:
      AccountId: 027434742980
    us-west-2:
      AccountId: '797873946194'
    eu-west-1:
      AccountId: '156460612806'
    ap-northeast-1:
      AccountId: '582318560864'
    ap-northeast-2:
      AccountId: '600734575887'
    ap-southeast-1:
      AccountId: '114774131450'
    ap-southeast-2:
      AccountId: '783225319266'
    ap-south-1:
      AccountId: '718504428378'
    us-east-2:
      AccountId: 033677994240
    sa-east-1:
      AccountId: '507241528517'
    cn-north-1:
      AccountId: '638102146993'
    eu-central-1:
      AccountId: 054676820928

Resources:
  LoggingBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: "Private"

  LoggingBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties: 
      Bucket: !Ref LoggingBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "Enable ELB logging"
            Effect: Allow
            Principal:
              AWS: !Join ["", ["arn:aws:iam::", !FindInMap [Region2ELBAccountId, !Ref 'AWS::Region', AccountId], ":root"]]
            Action: ["s3:PutObject"]
            Resource: !Join ["", ["arn:aws:s3:::", !Ref LoggingBucket, "/elb/*"]]

  TestLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: "test-lb-logging"
      Scheme: "internal"
      Type: "application"
      LoadBalancerAttributes:
        - Key: access_logs.s3.enabled
          Value: true
        - Key: access_logs.s3.prefix
          Value: "elb"
        - Key: access_logs.s3.bucket
          Value: !Ref LoggingBucket
      Subnets:
        - !GetAtt DefaultVPCInfo.DefaultSubnet1
        - !GetAtt DefaultVPCInfo.DefaultSubnet2

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - ec2:DescribeVpcs
            - ec2:DescribeSubnets
            Resource: "*"

  DefaultVPCLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          import cfnresponse

          def handler(event, context):

            response_data = {}
            response_status = cfnresponse.FAILED

            if event['RequestType'] == 'Delete':
              response_status = cfnresponse.SUCCESS
              cfnresponse.send(event, context, response_status, response_data)

            try:
              client = boto3.client("ec2")
            except Exception as e:
              cfnresponse.send(event, context, response_status, response_data)

            try:
              default_vpc = client.describe_vpcs(
                  Filters=[
                      {
                          'Name': 'isDefault',
                          'Values': ['true']
                      }
                  ]
              )

              default_subnets = client.describe_subnets(
                  Filters=[
                      {
                          'Name': 'vpc-id',
                          'Values': [default_vpc['Vpcs'][0]['VpcId']]
                      }
                  ]
              )
            except Exception as e:
              cfnresponse.send(event, context, response_status, response_data)

            response_data['DefaultVPC'] = default_vpc['Vpcs'][0]['VpcId']

            i = 1
            for sn in default_subnets['Subnets']:
              response_data['DefaultSubnet'+str(i)] = sn['SubnetId']
              i += 1

            response_status = cfnresponse.SUCCESS
            cfnresponse.send(event, context, response_status, response_data)
      Handler: "index.handler"
      Runtime: python3.6
      Timeout: 30
      Role: !GetAtt LambdaExecutionRole.Arn

  DefaultVPCInfo:
    Type: Custom::DefaultVPCInfo
    Properties:
      ServiceToken: !GetAtt DefaultVPCLambda.Arn

  EmptyBucketLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: "EmptyBucket"
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:*
            - s3:*
            Resource: '*'
          - Effect: Deny
            Action:
            - s3:DeleteBucket
            Resource: '*'

  EmptyBucketLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: !Sub |
          import boto3
          import cfnresponse
          
          def lambda_handler(event, context):
            response_data = {}
            s3 = boto3.resource('s3')
            try:
              if event['RequestType'] == 'Delete':
                bucket = s3.Bucket(event['ResourceProperties']['BucketName'])
                bucket.objects.all().delete()
              else:
                print("Not a 'delete' event")
              cfnresponse.send(event, context, "SUCCESS", response_data)
            except Exception as e:
              print(e)
              cfnresponse.send(event, context, "FAILED", response_data)
      Handler: index.lambda_handler
      Runtime: python3.6
      Timeout: 30
      Role : !GetAtt EmptyBucketLambdaRole.Arn

  EmptyBucket:
    Type: Custom::EmptyBucket
    Properties:
      ServiceToken: !GetAtt EmptyBucketLambda.Arn
      BucketName: !Ref LoggingBucket