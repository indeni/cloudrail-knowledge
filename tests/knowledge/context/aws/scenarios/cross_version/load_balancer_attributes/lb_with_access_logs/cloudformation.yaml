AWSTemplateFormatVersion: "2010-09-09"

Mappings:
  Region2ELBAccountId:
    us-east-1:
      AccountId: '127311923021'
    us-west-1:
      AccountId: 027434742980
    us-west-2:
      AccountId: '797873946194'
    eu-west-1:
      AccountId: '156460612806'
    ap-northeast-1:
      AccountId: '582318560864'
    ap-northeast-2:
      AccountId: '600734575887'
    ap-southeast-1:
      AccountId: '114774131450'
    ap-southeast-2:
      AccountId: '783225319266'
    ap-south-1:
      AccountId: '718504428378'
    us-east-2:
      AccountId: 033677994240
    sa-east-1:
      AccountId: '507241528517'
    cn-north-1:
      AccountId: '638102146993'
    eu-central-1:
      AccountId: 054676820928

Resources:
  LoggingBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: "Private"

  LoggingBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties: 
      Bucket: !Ref LoggingBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "Enable ELB logging"
            Effect: Allow
            Principal:
              AWS: !Join ["", ["arn:aws:iam::", !FindInMap [Region2ELBAccountId, !Ref 'AWS::Region', AccountId], ":root"]]
            Action: ["s3:PutObject"]
            Resource: !Join ["", ["arn:aws:s3:::", !Ref LoggingBucket, "/elb/*"]]

  Vpc1:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.10.0.0/16"

  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs ]
      VpcId: !Ref Vpc1
      CidrBlock: "10.10.10.0/24"
      Tags:
        - Key: "Name"
          Value: "subnet1"

  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs ]
      VpcId: !Ref Vpc1
      CidrBlock: "10.10.11.0/24"
      Tags:
        - Key: "Name"
          Value: "subnet2"

  Igw1:
    Type: AWS::EC2::InternetGateway

  Igw1Attachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc1
      InternetGatewayId: !Ref Igw1

  Rt1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc1

  Rt1DefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref Rt1
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref Igw1

  Assoc1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref Rt1
      SubnetId: !Ref Subnet1

  Assoc2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref Rt1
      SubnetId: !Ref Subnet2

  TestLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: "test-lb-logging"
      Scheme: "internal"
      Type: "application"
      LoadBalancerAttributes:
        - Key: access_logs.s3.enabled
          Value: true
        - Key: access_logs.s3.prefix
          Value: "elb"
        - Key: access_logs.s3.bucket
          Value: !Ref LoggingBucket
      Subnets:
        - !Ref Subnet1
        - !Ref Subnet2

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - ec2:DescribeVpcs
            - ec2:DescribeSubnets
            Resource: "*"

  EmptyBucketLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: "EmptyBucket"
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:*
            - s3:*
            Resource: '*'
          - Effect: Deny
            Action:
            - s3:DeleteBucket
            Resource: '*'

  EmptyBucketLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: !Sub |
          import boto3
          import cfnresponse
          
          def lambda_handler(event, context):
            response_data = {}
            s3 = boto3.resource('s3')
            try:
              if event['RequestType'] == 'Delete':
                bucket = s3.Bucket(event['ResourceProperties']['BucketName'])
                bucket.objects.all().delete()
              else:
                print("Not a 'delete' event")
              cfnresponse.send(event, context, "SUCCESS", response_data)
            except Exception as e:
              print(e)
              cfnresponse.send(event, context, "FAILED", response_data)
      Handler: index.lambda_handler
      Runtime: python3.6
      Timeout: 30
      Role : !GetAtt EmptyBucketLambdaRole.Arn

  EmptyBucket:
    Type: Custom::EmptyBucket
    Properties:
      ServiceToken: !GetAtt EmptyBucketLambda.Arn
      BucketName: !Ref LoggingBucket