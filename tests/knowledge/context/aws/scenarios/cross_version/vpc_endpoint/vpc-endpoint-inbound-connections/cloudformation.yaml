AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  UbuntuAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: "/aws/service/canonical/ubuntu/server/18.04/stable/current/amd64/hvm/ebs-gp2/ami-id"

Resources:

  TestVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "192.168.100.128/25"
      EnableDnsHostnames: true
      EnableDnsSupport: true

  LambdaVpce:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref TestVPC
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.lambda"
      VpcEndpointType: "Interface"
      SubnetIds:
        - !Ref PrivateSubnet
      SecurityGroupIds:
        - !Ref HttpsSG
      PrivateDnsEnabled: true

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref TestVPC
      CidrBlock: "192.168.100.128/25"
      AvailabilityZone: !Select [ 0, !GetAZs ]

  PrivateSubnetNaclAssoc:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref PrivateSubnetNacl
      SubnetId: !Ref PrivateSubnet

  PrivateSubnetNacl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref TestVPC

  PrivateSubnetNaclInbound:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateSubnetNacl
      RuleNumber: 100
      Egress: false
      Protocol: 6 # TCP
      RuleAction: "allow"
      CidrBlock: "192.168.100.128/25"
      PortRange:
        From: 443
        To: 443

  PrivateSubnetNaclOutbound:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateSubnetNacl
      RuleNumber: 100
      Egress: true
      Protocol: -1
      RuleAction: "allow"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: 0
        To: 65535

  HttpsSG:
   Type: AWS::EC2::SecurityGroup
   Properties:
     VpcId: !Ref TestVPC
     GroupDescription: "https-sg"
     GroupName: "https-sg"
     SecurityGroupIngress:
      - Description: "https"
        FromPort: 443
        ToPort: 443
        IpProtocol: "tcp"
        CidrIp: "192.168.100.128/25"
     SecurityGroupEgress:
      - FromPort: 0
        ToPort: 65535
        IpProtocol: "-1"
        CidrIp: "0.0.0.0/0"

  MyLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: !Sub |
          #!/usr/bin/env python
          import cfnresponse

          def lambda_handler(event, context):
            cfnresponse.send(event, context, "SUCCESS", {})
      Role: !GetAtt LambdaRole.Arn
      Handler: "lambda_function.lambda_handler"
      Runtime: "python3.8"

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "lambda-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole

  Ec2WebServer:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref UbuntuAmiId
      InstanceType: "t3.micro"
      SubnetId: !Ref PrivateSubnet
      SecurityGroupIds:
        - !Ref HttpsSG
      Tags:
        - Key: "Name"
          Value: "ec2-web-server"