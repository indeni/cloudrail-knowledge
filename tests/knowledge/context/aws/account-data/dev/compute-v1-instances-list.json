{
    "value": [
        {
            "id": "8501571883678872444",
            "creationTimestamp": "2021-11-11T04:33:24.253-08:00",
            "name": "gke-kuber-2-node-cluster-2-3a4d0670-1c7n",
            "tags": {
                "items": [
                    "gke-kuber-2-a967968c-node"
                ],
                "fingerprint": "sEowG6R7vT0="
            },
            "machineType": "https://www.googleapis.com/compute/v1/projects/dev-tomer/zones/us-central1-a/machineTypes/e2-medium",
            "status": "RUNNING",
            "zone": "https://www.googleapis.com/compute/v1/projects/dev-tomer/zones/us-central1-a",
            "networkInterfaces": [
                {
                    "network": "https://www.googleapis.com/compute/v1/projects/dev-tomer/global/networks/default",
                    "subnetwork": "https://www.googleapis.com/compute/v1/projects/dev-tomer/regions/us-central1/subnetworks/default",
                    "networkIP": "10.128.0.22",
                    "name": "nic0",
                    "accessConfigs": [
                        {
                            "type": "ONE_TO_ONE_NAT",
                            "name": "external-nat",
                            "natIP": "34.70.243.198",
                            "networkTier": "PREMIUM",
                            "kind": "compute#accessConfig"
                        }
                    ],
                    "aliasIpRanges": [
                        {
                            "ipCidrRange": "10.2.1.0/24",
                            "subnetworkRangeName": "gke-kuber-2-pods-a967968c"
                        }
                    ],
                    "fingerprint": "i6dQ0PU84jk=",
                    "stackType": "IPV4_ONLY",
                    "kind": "compute#networkInterface"
                }
            ],
            "disks": [
                {
                    "type": "PERSISTENT",
                    "mode": "READ_WRITE",
                    "source": "https://www.googleapis.com/compute/v1/projects/dev-tomer/zones/us-central1-a/disks/gke-kuber-2-node-cluster-2-3a4d0670-1c7n",
                    "deviceName": "persistent-disk-0",
                    "index": 0,
                    "boot": true,
                    "autoDelete": true,
                    "licenses": [
                        "https://www.googleapis.com/compute/v1/projects/gke-node-images/global/licenses/gke-node",
                        "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos-pcid",
                        "https://www.googleapis.com/compute/v1/projects/cos-cloud-shielded/global/licenses/shielded-cos",
                        "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos"
                    ],
                    "interface": "SCSI",
                    "guestOsFeatures": [
                        {
                            "type": "SECURE_BOOT"
                        },
                        {
                            "type": "VIRTIO_SCSI_MULTIQUEUE"
                        },
                        {
                            "type": "SEV_CAPABLE"
                        },
                        {
                            "type": "UEFI_COMPATIBLE"
                        }
                    ],
                    "diskSizeGb": "30",
                    "shieldedInstanceInitialState": {
                        "pk": {
                            "content": "MIIEGTCCAwGgAwIBAgIQYB8C9RH--O1hXkpp2FVSXjANBgkqhkiG9w0BAQsFADCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwHhcNMjAwODA2MTk0ODQ0WhcNMzAwODA0MTk0ODQ0WjCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQClSQ15LUf193eJfM6b5etGgz8auvdI72Cclo3fHvwXBzsm5T1QamwYAqrCTcS7MxauCTkmkXTS9ejM4NNpQWF6KG82nR88vRyKO_MnSNL8ZP-rtRu0p1X_mUYXwi0_nPkyPKLR2QJ9H2EOrw_RChWvwnu281WtfUPCYs2t2SjBCF_mgzZI8o3s8wOtL8y-Dmi9T0bGO1wYX2okz51PKbhgVGQA7KJRmeekIxEkiN7GOb_2VQqcdM9c846OlC-8abwgDvrL3YqKqhw8DnSM2AbNpZIgUTd1Ut3X-PWXVKBj3qdxjAyRez8dPWymXDji-CBoBzLsWEkUW87S1coggOABAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMCsGA1UdIwQkMCKAIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMA0GCSqGSIb3DQEBCwUAA4IBAQA7Pmaixb0FuDtpesNGvaBkTGWWMO7bDtx4rQom7zprEnliFJZung08FS3r73ob1urH0lzZm9022nRp8xqcSGk3wDkE9xQppWhvjhf6SOHdwM9_OxVq6no_BPz1PkRYsg4V07cgYPCtp7Ck7ZBI7m3MbLUyg8EG14_tvjKX9Xh2h0FSGuGg8_jjGYCGDtaSPkXBpAWurZ5mC2o9CzGaBJR4f_51I5C2AfHMG0H5T0Kehuyb_IzX9mAwArGmt62e4T9SxdP7LZUNPMEzOrhW1RzXvsD6Vod4uA9h2n_lbZHiBBExM2PMwuoobb-io-W0ARL4OCN5jah0a7q1ax6UYJK-",
                            "fileType": "X509"
                        },
                        "keks": [
                            {
                                "content": "MIIEIjCCAwqgAwIBAgIRAKxVeWkn5a0pF1C0o_HUM6owDQYJKoZIhvcNAQELBQAwgZUxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEfMB0GA1UECxMWQ29udGFpbmVyIE9wdGltaXplZCBPUzEiMCAGA1UEAxMZVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMDAeFw0yMDA4MDYxOTQ4NTBaFw0zMDA4MDQxOTQ4NTBaMIGVMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xHzAdBgNVBAsTFkNvbnRhaW5lciBPcHRpbWl6ZWQgT1MxIjAgBgNVBAMTGVVFRkkgS2V5IEV4Y2hhbmdlIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC6ZCJ4Oldm1z3gwwAjWqiHRMFrXPwq0XmVmLWoaGUBzeL41VwHK76iQTxl11HYhqaAr_0nmVQAM3M6so6cmydd7l1RPYJpZ3Shy3qO4xxgy30kp4zW00m9EVEdkmh9-9zi_G89uutz7wOb34M2Wrybwa7D5U102DmSoJAoq5z2YrvpjZoGLRGqBBP6A1l-_gRGMAgUMqKbhD1HF1VKXZnIGq9UJcpHhRvQxOG3nlVWk6z8dH-Rnp_9YfEPRORAUF5PUnUL5-I3wr5derIIoeYxc7G2ZuTyRWsF9WVyZ7OquYwxAY4l4xkDJpAvSomHkbfNgtCZyTm2pMIkRou0up5lAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMCsGA1UdIwQkMCKAINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMA0GCSqGSIb3DQEBCwUAA4IBAQCOTmuK7QQ4sP_8qYI2-bkvbQg1Vpq0W_aWtm0AQDw2iEVgfIq8JxNHu61ZhkmBiEhsdaaj7bYt_8owpvxfRnmzMPhQ6iB51vkExjWipD9spgSb8tfp0te6MqTT3omyYI9x4L13wn9ufZtlhZXlVgbjUN1QyevHwNt7Kms8Nd9Jbk9JCV9JoOIjkBpUjpCWCDfdGDD-iGIPzGdS-KjrNiA4udnzkdkO83dFMMvu69a1snCRUshNvHBNPbPRwbRYV9lS_QTwfft7EgbNF0455gblZbejvGJgR1Vhyen0jIPouVWxXe0X7AnGK8Mc3DUQBPVGT4ZR0WChbcwiOavh2t2X",
                                "fileType": "X509"
                            }
                        ],
                        "dbs": [
                            {
                                "content": "MIIEDTCCAvWgAwIBAgIQRtEbux4j2WDjYimBMkIBYjANBgkqhkiG9w0BAQsFADCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwHhcNMjAwODA2MTk0ODU1WhcNMzAwODA0MTk0ODU1WjCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDQzJHu5A61uBNU6UUUZ5MiXjXwy8Du44BHhisNBpi6cTVHZddJ85iNldE5cPL7hZFJP9n77KyFRCCLxT2CVDNkwMyE2jvJkTz2x2qWvJ-uIuL25Asfgbrv7t1h2Jn790ZLwb9U3qQvqMLvIh_cTtNLat0DaZJsdnJo1MTnFAWrYZZ19KB4j6JJpG_QBnQ-s8XibeSSoa_bMEQTn2OEQFeEcume3CeuZKzXyytMLKkV_z4z-CYddyRwkOFivWUHWq2nVecQQgdyDNWYxGnY4MNsTMYFfv-mhyRzMwhxBFMwMAaEwhTFWsIP6VNwrwIgQaDw3o1fUEuzavTfdNhULaJLAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMCsGA1UdIwQkMCKAIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMA0GCSqGSIb3DQEBCwUAA4IBAQCOd9V3WYv589dVov5ZOYo4zSs5PXpts1_8sYvMwvzLBr46LaejfG7KjjIY665Cnik__Zy9N3ZS9-fEeGKrBPE8ClwC06QhLbWDSFIqj2y9qq5FyBW0k1no2UQBnvx4CnLw_BgU3eae0wjv1lpDIbMwxe3E_aucVmzaIX3O83cw2JL9lLm1Psum0L2VHDZSCTP24vzrWoXXo4USHO_tBt_NkYrdkQH5CqGJYtxzKRwHHKEar3vzsiW4DPzlW8kUjRual1eBOKT5YKGbrOA_PJXV9x_7v1f2uAIrqh3HyppDTaGJ7Lux1MDf_hKuwAFI5QJTy9NEojbuUk1tzB4ys_W8",
                                "fileType": "X509"
                            }
                        ],
                        "dbxs": [
                            {
                                "content": "MIIEaDCCA1CgAwIBAgIJAKqfsrCdjyCoMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxMB4XDTE4MTIwODAxMTk0MVoXDTI4MTIwNTAxMTk0MVowfzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEXMBUGA1UEAxMOVUVGSSBEQiBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCtZ9U4P5aWlBwiTocmkUjOn2XpvHUlUOnsnhvsm994hAb0MNk2d3fXa8Nz14v9JiBTSf70KU2Zhxb_bSN3KAIv-f7F2AuXte7U9SnzZ02UDmK4TU1bFQW67Y3Gc2hWprCHYEjiRQD4J3WPWhuZnAXqzXQk3uDWVPETi-G9KAM1R-yNxZfoEjfIKhLabDsWqDtnMSovObLoVfwTdnm0WCuYTFtY_CKNxuxeKuzDsC5Su9N3dSFbpGhXJjwUaXPLWY5MFIqIQNBfhmWzDd4PItXaXV3V44IqWTXclE2aSUqkwNrEZ1cRpHG4PYM1aHVmjcO_dWlvthcepTIMIEMAXg2LAgMBAAGjgeYwgeMwHQYDVR0OBBYEFNXbmmdkM0aIsPMyEIv25JRaOPA-MIGzBgNVHSMEgaswgaiAFNXbmmdkM0aIsPMyEIv25JRaOPA-oYGEpIGBMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxggkAqp-ysJ2PIKgwDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAJ2vbNymAKTUbRvxnAohHozVUByrKHCq1o8b-bKrgv7Ch0X4itfG8Uwvt0xG7CTpl_Dno92MtpOpFv4ydqox-pP1kTsRcnFNggndXdjpGILIB94KmFiYJvB6RzocJsXsXBa0tULOR24qiB9f93kfITS7Ec60WjFfpgYKEnuEgcV0yBuZzAZbxo1uF4n1hhmVUnKtEI9pX-8geYIIqIYiwwT2jnhFogWw4PeSyg-HMR1CLwwJeH2XDa924LpgHFuR-AbikipAE2vIE0yqJzo0o4tn9-sRuMaQcZ4VQqIzMiniW5H7nGeoQY3ktHX5eq6x-4jFvdLnzzq_D4sS-UWHzOA==",
                                "fileType": "X509"
                            },
                            {
                                "content": "MIIEiTCCA3GgAwIBAgIJAOzm3xz71Vu6MA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xFDASBgNVBAsTC0Nocm9taXVtIE9TMSEwHwYDVQQDExhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwHhcNMTgxMjA4MDExOTQwWhcNMjgxMjA1MDExOTQwWjCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwg5hvVH6fJSBNji7ynBl1SQzWceL5P3ul6RcB-1s5wXqzXlIHiyRqBdj4hj2pLzpKJGmXWnerIwJOkdsFg7IwZpA4xHE1F-M8XlpuuUn_Xdfccef36ddZEUH6QLwNm96T89F4ujt0omJ-0GV37vBsxEY-hwR3O8XBgyx8TvvYxNnVyTgi19qQdb2ES8-yWJkebdzgugcmNf9K-55fnEiyxWtrvEQb2sowWIS3-b1I_BP85pW2pldh9yQWfb3OY2NJhGSbQSnLi3J0IhRXROEtAXCU4MLTq2cHOpGX0DtJP_g_jD1pnC1O6CCZgVycK4DgZXeDzOG_2Uimhr0y1rcewIDAQABo4HxMIHuMB0GA1UdDgQWBBQEqlpkrYWCzJe69eMUdF1byztBmzCBvgYDVR0jBIG2MIGzgBQEqlpkrYWCzJe69eMUdF1byztBm6GBj6SBjDCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxggkA7ObfHPvVW7owDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAWsd3mq0dADTD7Tx2uYcDeJcJHO0x91hO26p2cqUSox4wPgc4_xk5yiteMgDB5CWLwgcuneDAYYMO1PmktpEvLu9a82gCGxGiww-w78OJTOrs68VM1zB0jqA3X5EyVSwVJqi8idgrnnGsJAcSBosnUI8pNi9SDC3MRPE1q1EUjuDNjsE7t_ItBe-MSMWCH2hpG8unZ7uwWCRfAV3Fkdnq_S5HzDy6-kKyGdj-rprhVeDz2xSyMOlNIJig4uuqU166DTfoQA2TxnMG_TuHt69Z4uZcVwx_HwPs2-vUCCYqZDwuuHKNIEm8kIK8sSPSsp22sC8h-7Klb8wj_d0lzShgkg==",
                                "fileType": "X509"
                            },
                            {
                                "content": "MIID0zCCArugAwIBAgIJANuXsNG_1HHxMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRYwFAYDVQQHDA1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKDAtHb29nbGUgTExDLjEUMBIGA1UECwwLQ2hyb21pdW0gT1MxFzAVBgNVBAMMDlVFRkkgREIgS2V5IHYxMCAXDTE4MDQyNzE1MDYzN1oYDzIyMTgwMzEwMTUwNjM3WjB_MQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMRcwFQYDVQQDDA5VRUZJIERCIEtleSB2MTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALWzFg8obysKXCjnbBTpAM8dMFC2pHX7GpwESNG-FYQI218Y1Ao1p5BttGqPoU5lGNeYUXxgxIqfN18ALHH10gRCRfqbC54faPU1lMr0e0jvi67GgGztyLl4ltAgK7HHTHmtZwghYNS45pKz_LFGm-TlKg-HPZBFT9GtbjRZe5IS2xdKkWM_sPA8qXwzvqmLN3OQckf0KchSUQmB3-wh4vYFV2TEjz10oR0FZO8LFFOOeooukcRDYy219XrdM21APnfszHmfKhzAFddOcYdwKwOL-w9TKVUwCIM70GL_YOtywA17mQkEm0ON79oyQ0daDlZ0ngDxC8xUIASYsRRPOkkCAwEAAaNQME4wHQYDVR0OBBYEFFO6MYgG9CvYp6qAqn_Jm-MANGpvMB8GA1UdIwQYMBaAFFO6MYgG9CvYp6qAqn_Jm-MANGpvMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAIGyOB_3oFo6f3WoFrdBzimb_weH8hejtCggpcL-8Wdex9VRl5MKi_1GlGbietMDsr1alwdaagam9RafuIQplohTSBnQrU-u-LbtRlCF9C25GDQ70S0QlxAQmt41Sc7kSFTPm6BHauF3b_Raf9AX30MamptoXoAhgMnHAitCn6yCOsRJ_d1t04lqsiqefhf26xItvRnkuxG7-IQnbyGFCGPcjFNAE1thLpL_6y_dprVwTLsvZnsWYj-1Gg1yUkOnCN8Kl3Q3RDVqo98mORUc0bKB-B8_FQsbtmzbb-29nXQJW1FJx0ejqJyDGGBPHAGpwEJTVB3mwWXzBU6Ny7T3dlk=",
                                "fileType": "X509"
                            },
                            {
                                "content": "MIID6TCCAtGgAwIBAgIJAKgdcZ45rGMDMA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwIBcNMTgwNDI3MTUwNjM3WhgPMjIxODAzMTAxNTA2MzdaMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCbIdHPMQZZU68jI5kz5rmwvo-DQZZJ5amRnAUnBpNllhNQB6TaLUS_D9TIo_0X1e8T21Xk4Pf3D5ckbuQxsJzQ5OVEOb59sJ9AhjVUoxQxuVW-iBzD0mWbxKf2cASy2YRIEcaAAI5QT2SwO8gZy_G8LwAk-vO0vIbynN0WuFLl1Dp2cMQ3CxLSPH-QPSZyGd6o6ewUU9JzboppujXpk43EQH5ZJE_wJb_ujUFWcFzKHb_EkV1hI1TmBJ1-vR2kao4_1hQO6k1zLUR-MyBHY0SRU2OQxBpSez-qt7oItMBc1EanXvq9tqx0ndCTmXQYQplT5wtkPbE9sd5zwbDt8btHAgMBAAGjUDBOMB0GA1UdDgQWBBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAfBgNVHSMEGDAWgBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAMBgNVHRMEBTADAQH_MA0GCSqGSIb3DQEBCwUAA4IBAQB9BRTP37ik4jF2BmJJspMA6NHS7mxIckFCYKl-TO8zGFd3mlA6dnEw5WY-tUcBNJpAaHNJV_rzagGPpWMIoy-nAaLSSpnyhEXYTnQvzejYRijN3N0V9tmM0qgViHNBqTxdfcwlst5OUesGHPqgBOt5RRu5OGJ0rkuymWwxHOKIw43hz5FW7vhumbtJ3iy8HSFQIjSYMkr0sOzJhmvnHlpZ4pOoPNyNA9DM6smriH-2-MnJFM9w8bg6zsV5X-6KL464_FuXL_X_IWmAsAbi8Ge8ZMJjEaDrF1qkD4aLvu0MshzEdvrvQO-3Gn3Lmi_RYKR0HKZp7jXTySj76sxt9QK4",
                                "fileType": "X509"
                            }
                        ]
                    },
                    "kind": "compute#attachedDisk"
                }
            ],
            "metadata": {
                "fingerprint": "loiIWWbgY0A=",
                "items": [
                    {
                        "key": "instance-template",
                        "value": "projects/556062258574/global/instanceTemplates/gke-kuber-2-node-cluster-2-3a4d0670"
                    },
                    {
                        "key": "created-by",
                        "value": "projects/556062258574/zones/us-central1-a/instanceGroupManagers/gke-kuber-2-node-cluster-2-3a4d0670-grp"
                    },
                    {
                        "key": "serial-port-logging-enable",
                        "value": "true"
                    },
                    {
                        "key": "kube-labels",
                        "value": "cloud.google.com/gke-boot-disk=pd-standard,cloud.google.com/gke-container-runtime=containerd,cloud.google.com/gke-nodepool=node-cluster-2,cloud.google.com/gke-os-distribution=cos,cloud.google.com/gke-preemptible=true,cloud.google.com/machine-family=e2"
                    },
                    {
                        "key": "google-compute-enable-pcid",
                        "value": "true"
                    },
                    {
                        "key": "enable-oslogin",
                        "value": "false"
                    },
                    {
                        "key": "kubelet-config",
                        "value": "apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    enabled: true\n  x509:\n    clientCAFile: /etc/srv/kubernetes/pki/ca-certificates.crt\nauthorization:\n  mode: Webhook\ncgroupRoot: /\nclusterDNS:\n- 10.89.32.10\nclusterDomain: cluster.local\nenableDebuggingHandlers: true\nevictionHard:\n  memory.available: 100Mi\n  nodefs.available: 10%\n  nodefs.inodesFree: 5%\n  pid.available: 10%\nfeatureGates:\n  DynamicKubeletConfig: false\n  ExecProbeTimeout: false\n  GracefulNodeShutdown: true\n  RotateKubeletServerCertificate: true\nkernelMemcgNotification: true\nkind: KubeletConfiguration\nkubeReserved:\n  cpu: 1060m\n  ephemeral-storage: 15Gi\n  memory: 1019Mi\nreadOnlyPort: 10255\nserverTLSBootstrap: true\nshutdownGracePeriod: 30s\nshutdownGracePeriodCriticalPods: 5s\nstaticPodPath: /etc/kubernetes/manifests\n"
                    },
                    {
                        "key": "cluster-name",
                        "value": "kuber-2"
                    },
                    {
                        "key": "kubeconfig",
                        "value": "apiVersion: v1\nkind: Config\nclusters:\n- cluster:\n    server: https://35.224.39.25\n    certificate-authority: '/etc/srv/kubernetes/pki/ca-certificates.crt'\n  name: default-cluster\ncontexts:\n- context:\n    cluster: default-cluster\n    namespace: default\n    user: exec-plugin-auth\n  name: default-context\ncurrent-context: default-context\nusers:\n- name: exec-plugin-auth\n  user:\n    exec:\n      apiVersion: \"client.authentication.k8s.io/v1alpha1\"\n      command: '/home/kubernetes/bin/gke-exec-auth-plugin'\n      args: [\"--cache-dir\", '/var/lib/kubelet/pki/']\n"
                    },
                    {
                        "key": "gci-update-strategy",
                        "value": "update_disabled"
                    },
                    {
                        "key": "gci-metrics-enabled",
                        "value": "true"
                    },
                    {
                        "key": "configure-sh",
                        "value": "#!/usr/bin/env bash\n\n# Copyright 2016 The Kubernetes Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Due to the GCE custom metadata size limit, we split the entire script into two\n# files configure.sh and configure-helper.sh. The functionality of downloading\n# kubernetes configuration, manifests, docker images, and binary files are\n# put in configure.sh, which is uploaded via GCE custom metadata.\n\nset -o errexit\nset -o nounset\nset -o pipefail\n\n### Hardcoded constants\nDEFAULT_CNI_VERSION=\"v0.8.7\"\nDEFAULT_CNI_HASH=\"8f2cbee3b5f94d59f919054dccfe99a8e3db5473b553d91da8af4763e811138533e05df4dbeab16b3f774852b4184a7994968f5e036a3f531ad1ac4620d10ede\"\n# when NPD version has a conflicts with OSS one, use GoB version\nDEFAULT_NPD_VERSION=\"v0.8.7\"\nDEFAULT_NPD_HASH=\"853576423077bf72e7bd8e96cd782cf272f7391379f8121650c1448531c0d3a0991dfbd0784a1157423976026806ceb14ca8fb35bac1249127dbf00af45b7eea\"\nDEFAULT_CRICTL_VERSION=\"v1.19.0\"\nDEFAULT_CRICTL_HASH=\"fbbb34a1667bcf94df911a92ab6b70a9d2b34da967244a222f288bf0135c587cbfdcc89deedc5afd1823e109921df9caaa4e9ff9cc39e55a9b8cdea8eb6ebe72\"\nDEFAULT_MOUNTER_TAR_SHA=\"7956fd42523de6b3107ddc3ce0e75233d2fcb78436ff07a1389b6eaac91fb2b1b72a08f7a219eaf96ba1ca4da8d45271002e0d60e0644e796c665f99bb356516\"\n###\n\n### Hardcoded ENABLE_LATEST_NPD, remove it when in OSS DEFAULT_NPD_VERSION is greater then v0.8.7\nENABLE_LATEST_NPD=\"true\"\n\n# Standard curl flags.\nCURL_FLAGS='--fail --silent --show-error --retry 5 --retry-delay 3 --connect-timeout 10 --retry-connrefused'\n\nfunction set-broken-motd {\n  cat > /etc/motd <<EOF\nBroken (or in progress) Kubernetes node setup! Check the cluster initialization status\nusing the following commands.\n\nMaster instance:\n  - sudo systemctl status kube-master-installation\n  - sudo systemctl status kube-master-configuration\n\nNode instance:\n  - sudo systemctl status kube-node-installation\n  - sudo systemctl status kube-node-configuration\nEOF\n}\n\n# A function that fetches a GCE metadata value and echoes it out.\n# Args:\n#   $1 : URL path after /computeMetadata/v1/ (without heading slash).\n#   $2 : An optional default value to echo out if the fetch fails.\n#\n# NOTE: this function is duplicated in configure-helper.sh, any changes here\n# should be duplicated there as well.\nfunction get-metadata-value {\n  local default=\"${2:-}\"\n\n  local status\n  curl ${CURL_FLAGS} \\\n    -H 'Metadata-Flavor: Google' \\\n    \"http://metadata/computeMetadata/v1/${1}\" \\\n  || status=\"$?\"\n  status=\"${status:-0}\"\n\n  if [[ \"${status}\" -eq 0 || -z \"${default}\" ]]; then\n    return \"${status}\"\n  else\n    echo \"${default}\"\n  fi\n}\n\n# A function to fetch kube-env from GCE metadata server\n# or using hurl on the master if available\nfunction download-kube-env {\n  (\n    umask 077\n\n    local kube_env_path=\"/tmp/kube-env.yaml\"\n    if [[ \"$(is-master)\" == \"true\" && $(use-hurl) = \"true\" ]]; then\n      local kube_env_path=\"${KUBE_HOME}/kube-env.yaml\"\n      download-kube-env-hurl \"${kube_env_path}\"\n    else\n      local meta_path=\"http://metadata.google.internal/computeMetadata/v1/instance/attributes/kube-env\"\n      echo \"Downloading kube-env via GCE metadata from ${meta_path} to ${kube_env_path}\"\n      retry-forever 10 curl ${CURL_FLAGS} \\\n        -H \"X-Google-Metadata-Request: True\" \\\n        -o \"${kube_env_path}\" \\\n        \"${meta_path}\"\n    fi\n\n    # Convert the yaml format file into a shell-style file.\n    eval $(${PYTHON} -c '''\nimport pipes,sys,yaml\n# check version of python and call methods appropriate for that version\nif sys.version_info[0] < 3:\n    items = yaml.load(sys.stdin).iteritems()\nelse:\n    items = yaml.load(sys.stdin, Loader=yaml.BaseLoader).items()\nfor k, v in items:\n    print(\"readonly {var}={value}\".format(var=k, value=pipes.quote(str(v))))\n''' < \"${kube_env_path}\" > \"${KUBE_HOME}/kube-env\")\n\n    # Leave kube-env if we are a master\n    if [[ \"$(is-master)\" != \"true\" ]]; then\n      rm -f \"${kube_env_path}\"\n    fi\n  )\n}\n\n# A function to pull kube-env from HMS using hurl\nfunction download-kube-env-hurl {\n  local -r kube_env_path=\"$1\"\n  local -r endpoint=$(get-metadata-value \"instance/attributes/gke-api-endpoint\")\n  local -r kube_env_hms_path=$(get-metadata-value \"instance/attributes/kube-env-path\")\n\n  echo \"Downloading kube-env via hurl from ${kube_env_hms_path} to ${kube_env_path}\"\n  retry-forever 30 ${KUBE_HOME}/bin/hurl --hms_address $endpoint \\\n    --dst \"${kube_env_path}\" \\\n    \"${kube_env_hms_path}\"\n  chmod 600 \"${kube_env_path}\"\n}\n\nfunction download-kubelet-config {\n  local -r dest=\"$1\"\n  echo \"Downloading Kubelet config file, if it exists\"\n  # Fetch kubelet config file from GCE metadata server.\n  (\n    umask 077\n    local -r tmp_kubelet_config=\"/tmp/kubelet-config.yaml\"\n    retry-forever 10 curl ${CURL_FLAGS} \\\n      -H \"X-Google-Metadata-Request: True\" \\\n      -o \"${tmp_kubelet_config}\" \\\n      http://metadata.google.internal/computeMetadata/v1/instance/attributes/kubelet-config\n    # only write to the final location if curl succeeds\n    mv \"${tmp_kubelet_config}\" \"${dest}\"\n  )\n}\n\nfunction download-kube-master-certs {\n  # Fetch kube-master-certs from GCE metadata server.\n  (\n    umask 077\n    local -r tmp_kube_master_certs=\"/tmp/kube-master-certs.yaml\"\n    retry-forever 10 curl ${CURL_FLAGS} \\\n      -H \"X-Google-Metadata-Request: True\" \\\n      -o \"${tmp_kube_master_certs}\" \\\n      http://metadata.google.internal/computeMetadata/v1/instance/attributes/kube-master-certs\n    # Convert the yaml format file into a shell-style file.\n    eval $(${PYTHON} -c '''\nimport pipes,sys,yaml\n# check version of python and call methods appropriate for that version\nif sys.version_info[0] < 3:\n    items = yaml.load(sys.stdin).iteritems()\nelse:\n    items = yaml.load(sys.stdin, Loader=yaml.BaseLoader).items()\nfor k, v in items:\n    print(\"readonly {var}={value}\".format(var=k, value=pipes.quote(str(v))))\n''' < \"${tmp_kube_master_certs}\" > \"${KUBE_HOME}/kube-master-certs\")\n    rm -f \"${tmp_kube_master_certs}\"\n  )\n}\n\nfunction validate-hash {\n  local -r file=\"$1\"\n  local -r expected=\"$2\"\n\n  actual_sha1=$(sha1sum \"${file}\" | awk '{ print $1 }') || true\n  actual_sha512=$(sha512sum \"${file}\" | awk '{ print $1 }') || true\n  if [[ \"${actual_sha1}\" != \"${expected}\" ]] && [[ \"${actual_sha512}\" != \"${expected}\" ]]; then\n    echo \"== ${file} corrupted, sha1 ${actual_sha1}/sha512 ${actual_sha512} doesn't match expected ${expected} ==\"\n    return 1\n  fi\n}\n\n# Get default service account credentials of the VM.\nGCE_METADATA_INTERNAL=\"http://metadata.google.internal/computeMetadata/v1/instance\"\nfunction get-credentials {\n  curl ${CURL_FLAGS} \\\n    -H \"Metadata-Flavor: Google\" \\\n    \"${GCE_METADATA_INTERNAL}/service-accounts/default/token\" \\\n  | ${PYTHON} -c 'import sys; import json; print(json.loads(sys.stdin.read())[\"access_token\"])'\n}\n\nfunction valid-storage-scope {\n  curl ${CURL_FLAGS} \\\n    -H \"Metadata-Flavor: Google\" \\\n    \"${GCE_METADATA_INTERNAL}/service-accounts/default/scopes\" \\\n  | grep -E \"auth/devstorage|auth/cloud-platform\"\n}\n\n# Determine if this node is a master using metadata\nfunction is-master {\n  local -r is_master_val=$(get-metadata-value \"instance/attributes/is-master-node\")\n\n  local result=\"false\"\n  if [[ ${is_master_val:-} == \"true\" ]]; then\n    result=\"true\"\n  fi\n  echo $result\n}\n\n# A function that returns \"true\" if hurl should be used, \"false\" otherwise.\nfunction use-hurl {\n  local -r enable_hms_read=$(get-metadata-value \"instance/attributes/enable_hms_read\")\n  local result=\"false\"\n\n  if [[ -f \"${KUBE_HOME}/bin/hurl\" && \"${enable_hms_read}\" == \"true\" ]]; then\n    result=\"true\"\n  fi\n  echo $result\n}\n\n# Retry a download until we get it. Takes a hash and a set of URLs.\n#\n# $1 is the sha512/sha1 hash of the URL. Can be \"\" if the sha512/sha1 hash is unknown.\n# $2+ are the URLs to download.\nfunction download-or-bust {\n  local -r hash=\"$1\"\n  shift 1\n\n  local -r urls=( $* )\n  while true; do\n    for url in \"${urls[@]}\"; do\n      local file=\"${url##*/}\"\n      rm -f \"${file}\"\n      # if the url belongs to GCS API we should use oauth2_token in the headers\n      local curl_headers=\"\"\n      if [[ \"$url\" =~ ^https://storage.googleapis.com.* ]] && valid-storage-scope ; then\n        curl_headers=\"Authorization: Bearer $(get-credentials)\"\n      fi\n      if ! curl ${curl_headers:+-H \"${curl_headers}\"} -f --ipv4 -Lo \"${file}\" --connect-timeout 20 --max-time 300 --retry 6 --retry-delay 10 --retry-connrefused \"${url}\"; then\n        echo \"== Failed to download ${url}. Retrying. ==\"\n      elif [[ -n \"${hash}\" ]] && ! validate-hash \"${file}\" \"${hash}\"; then\n        # TODO(b/153659289): Evaluate re-enabling retry.\n        echo \"== Downloaded ${url} but hash validation failed (ignoring). ==\"\n        return\n      else\n        if [[ -n \"${hash}\" ]]; then\n          echo \"== Downloaded ${url} (HASH = ${hash}) ==\"\n        else\n          echo \"== Downloaded ${url} ==\"\n        fi\n        return\n      fi\n    done\n  done\n}\n\nfunction is-preloaded {\n  local -r key=$1\n  local -r value=$2\n  grep -qs \"${key},${value}\" \"${KUBE_HOME}/preload_info\"\n}\n\nfunction split-commas {\n  echo $1 | tr \",\" \"\\n\"\n}\n\nfunction remount-flexvolume-directory {\n  local -r flexvolume_plugin_dir=$1\n  mkdir -p $flexvolume_plugin_dir\n  mount --bind $flexvolume_plugin_dir $flexvolume_plugin_dir\n  mount -o remount,exec $flexvolume_plugin_dir\n}\n\nfunction install-gci-mounter-tools {\n  CONTAINERIZED_MOUNTER_HOME=\"${KUBE_HOME}/containerized_mounter\"\n  local -r mounter_tar_sha=\"${DEFAULT_MOUNTER_TAR_SHA}\"\n  if is-preloaded \"mounter\" \"${mounter_tar_sha}\"; then\n    echo \"mounter is preloaded.\"\n    return\n  fi\n\n  echo \"Downloading gci mounter tools.\"\n  mkdir -p \"${CONTAINERIZED_MOUNTER_HOME}\"\n  chmod a+x \"${CONTAINERIZED_MOUNTER_HOME}\"\n  mkdir -p \"${CONTAINERIZED_MOUNTER_HOME}/rootfs\"\n  download-or-bust \"${mounter_tar_sha}\" \"https://storage.googleapis.com/kubernetes-release/gci-mounter/mounter.tar\"\n  cp \"${KUBE_HOME}/kubernetes/server/bin/mounter\" \"${CONTAINERIZED_MOUNTER_HOME}/mounter\"\n  chmod a+x \"${CONTAINERIZED_MOUNTER_HOME}/mounter\"\n  mv \"${KUBE_HOME}/mounter.tar\" /tmp/mounter.tar\n  tar xf /tmp/mounter.tar -C \"${CONTAINERIZED_MOUNTER_HOME}/rootfs\"\n  rm /tmp/mounter.tar\n  mkdir -p \"${CONTAINERIZED_MOUNTER_HOME}/rootfs/var/lib/kubelet\"\n}\n\n# Install node problem detector binary.\nfunction install-node-problem-detector {\n\n  local -r npd_version=\"${DEFAULT_NPD_VERSION}\"\n  local -r npd_hash=\"${DEFAULT_NPD_HASH}\"\n\n  local -r npd_tar=\"node-problem-detector-${npd_version}.tar.gz\"\n\n  if is-preloaded \"${npd_tar}\" \"${npd_hash}\"; then\n    echo \"${npd_tar} is preloaded.\"\n    return\n  fi\n\n  echo \"Downloading ${npd_tar}.\"\n  local -r npd_release_path=\"https://storage.googleapis.com/kubernetes-release\"\n  download-or-bust \"${npd_hash}\" \"${npd_release_path}/node-problem-detector/${npd_tar}\"\n  local -r npd_dir=\"${KUBE_HOME}/node-problem-detector\"\n  mkdir -p \"${npd_dir}\"\n  tar xzf \"${KUBE_HOME}/${npd_tar}\" -C \"${npd_dir}\" --overwrite\n  mv \"${npd_dir}/bin\"/* \"${KUBE_BIN}\"\n  chmod a+x \"${KUBE_BIN}/node-problem-detector\"\n  rmdir \"${npd_dir}/bin\"\n  rm -f \"${KUBE_HOME}/${npd_tar}\"\n}\n\nfunction install-cni-binaries {\n  if [[ -n \"${CNI_VERSION:-}\" ]]; then\n      local -r cni_version=\"${CNI_VERSION}\"\n      local -r cni_hash=\"${CNI_HASH}\"\n  else\n      local -r cni_version=\"${DEFAULT_CNI_VERSION}\"\n      local -r cni_hash=\"${DEFAULT_CNI_HASH}\"\n  fi\n\n  local -r cni_tar=\"${CNI_TAR_PREFIX}${cni_version}.tgz\"\n  local -r cni_url=\"${CNI_STORAGE_URL_BASE:-https://storage.googleapis.com/gke-release/cni-plugins}/${cni_version}/${cni_tar}\"\n\n  if is-preloaded \"${cni_tar}\" \"${cni_hash}\"; then\n    echo \"${cni_tar} is preloaded.\"\n    return\n  fi\n\n  echo \"Downloading cni binaries\"\n  download-or-bust \"${cni_hash}\" \"${cni_url}\"\n  local -r cni_dir=\"${KUBE_HOME}/cni\"\n  mkdir -p \"${cni_dir}/bin\"\n  tar xzf \"${KUBE_HOME}/${cni_tar}\" -C \"${cni_dir}/bin\" --overwrite\n  mv \"${cni_dir}/bin\"/* \"${KUBE_BIN}\"\n  rmdir \"${cni_dir}/bin\"\n  rm -f \"${KUBE_HOME}/${cni_tar}\"\n}\n\n# Install crictl binary.\nfunction install-crictl {\n  if [[ -n \"${CRICTL_VERSION:-}\" ]]; then\n    local -r crictl_version=\"${CRICTL_VERSION}\"\n    local -r crictl_hash=\"${CRICTL_TAR_HASH}\"\n  else\n    local -r crictl_version=\"${DEFAULT_CRICTL_VERSION}\"\n    local -r crictl_hash=\"${DEFAULT_CRICTL_HASH}\"\n  fi\n  local -r crictl=\"crictl-${crictl_version}-linux-amd64.tar.gz\"\n\n  # Create crictl config file.\n  cat > /etc/crictl.yaml <<EOF\nruntime-endpoint: ${CONTAINER_RUNTIME_ENDPOINT:-unix:///var/run/dockershim.sock}\nEOF\n\n  if is-preloaded \"${crictl}\" \"${crictl_hash}\"; then\n    echo \"crictl is preloaded\"\n    return\n  fi\n\n  echo \"Downloading crictl\"\n  local -r crictl_path=\"https://storage.googleapis.com/k8s-artifacts-cri-tools/release/${crictl_version}\"\n  download-or-bust \"${crictl_hash}\" \"${crictl_path}/${crictl}\"\n  tar xf \"${crictl}\"\n  mv crictl \"${KUBE_BIN}/crictl\"\n}\n\nfunction install-exec-auth-plugin {\n  if [[ ! \"${EXEC_AUTH_PLUGIN_URL:-}\" ]]; then\n      return\n  fi\n  local -r plugin_url=\"${EXEC_AUTH_PLUGIN_URL}\"\n  local -r plugin_hash=\"${EXEC_AUTH_PLUGIN_HASH}\"\n\n  if is-preloaded \"gke-exec-auth-plugin\" \"${plugin_hash}\"; then\n    echo \"gke-exec-auth-plugin is preloaded\"\n    return\n  fi\n\n  echo \"Downloading gke-exec-auth-plugin binary\"\n  download-or-bust \"${plugin_hash}\" \"${plugin_url}\"\n  mv \"${KUBE_HOME}/gke-exec-auth-plugin\" \"${KUBE_BIN}/gke-exec-auth-plugin\"\n  chmod a+x \"${KUBE_BIN}/gke-exec-auth-plugin\"\n\n  if [[ ! \"${EXEC_AUTH_PLUGIN_LICENSE_URL:-}\" ]]; then\n      return\n  fi\n  local -r license_url=\"${EXEC_AUTH_PLUGIN_LICENSE_URL}\"\n  echo \"Downloading gke-exec-auth-plugin license\"\n  download-or-bust \"\" \"${license_url}\"\n  mv \"${KUBE_HOME}/LICENSES/LICENSE\" \"${KUBE_BIN}/gke-exec-auth-plugin-license\"\n}\n\nfunction install-kube-manifests {\n  # Put kube-system pods manifests in ${KUBE_HOME}/kube-manifests/.\n  local dst_dir=\"${KUBE_HOME}/kube-manifests\"\n  mkdir -p \"${dst_dir}\"\n  local -r manifests_tar_urls=( $(split-commas \"${KUBE_MANIFESTS_TAR_URL}\") )\n  local -r manifests_tar=\"${manifests_tar_urls[0]##*/}\"\n  if [ -n \"${KUBE_MANIFESTS_TAR_HASH:-}\" ]; then\n    local -r manifests_tar_hash=\"${KUBE_MANIFESTS_TAR_HASH}\"\n  else\n    echo \"Downloading k8s manifests hash (not found in env)\"\n    download-or-bust \"\" \"${manifests_tar_urls[@]/.tar.gz/.tar.gz.sha512}\"\n    local -r manifests_tar_hash=$(cat \"${manifests_tar}.sha512\")\n  fi\n\n  if is-preloaded \"${manifests_tar}\" \"${manifests_tar_hash}\"; then\n    echo \"${manifests_tar} is preloaded.\"\n    return\n  fi\n\n  echo \"Downloading k8s manifests tar\"\n  download-or-bust \"${manifests_tar_hash}\" \"${manifests_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${manifests_tar}\" -C \"${dst_dir}\" --overwrite\n  local -r kube_addon_registry=\"${KUBE_ADDON_REGISTRY:-k8s.gcr.io}\"\n  if [[ \"${kube_addon_registry}\" != \"k8s.gcr.io\" ]]; then\n    find \"${dst_dir}\" -name \\*.yaml -or -name \\*.yaml.in | \\\n      xargs sed -ri \"s@(image:\\s.*)k8s.gcr.io@\\1${kube_addon_registry}@\"\n    find \"${dst_dir}\" -name \\*.manifest -or -name \\*.json | \\\n      xargs sed -ri \"s@(image\\\":\\s+\\\")k8s.gcr.io@\\1${kube_addon_registry}@\"\n  fi\n  cp \"${dst_dir}/kubernetes/gci-trusty/gci-configure-helper.sh\" \"${KUBE_BIN}/configure-helper.sh\"\n  cp \"${dst_dir}/kubernetes/gci-trusty/configure-kubeapiserver.sh\" \"${KUBE_BIN}/configure-kubeapiserver.sh\"\n  if [[ -e \"${dst_dir}/kubernetes/gci-trusty/gke-internal-configure.sh\" ]]; then\n    cp \"${dst_dir}/kubernetes/gci-trusty/gke-internal-configure.sh\" \"${KUBE_BIN}/\"\n  fi\n  if [[ -e \"${dst_dir}/kubernetes/gci-trusty/gke-internal-configure-helper.sh\" ]]; then\n    cp \"${dst_dir}/kubernetes/gci-trusty/gke-internal-configure-helper.sh\" \"${KUBE_BIN}/\"\n  fi\n  if [[ -e \"${dst_dir}/kubernetes/gci-trusty/node-registration-checker.sh\" ]]; then\n    cp \"${dst_dir}/kubernetes/gci-trusty/node-registration-checker.sh\" \"${KUBE_BIN}/\"\n  fi\n\n  cp \"${dst_dir}/kubernetes/gci-trusty/health-monitor.sh\" \"${KUBE_BIN}/health-monitor.sh\"\n\n  rm -f \"${KUBE_HOME}/${manifests_tar}\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}.sha512\"\n}\n\n# Installs hurl to ${KUBE_HOME}/bin/hurl if not already installed.\nfunction install-hurl {\n  cd \"${KUBE_HOME}\"\n  if [[ -f \"${KUBE_HOME}/bin/hurl\" ]]; then\n    echo \"install-hurl: hurl already installed\"\n    return\n  fi\n\n  local -r hurl_gcs_att=\"instance/attributes/hurl-gcs-url\"\n  local -r hurl_gcs_url=$(get-metadata-value \"${hurl_gcs_att}\")\n\n  if [[ -z \"${hurl_gcs_url}\" ]]; then\n    # URL not present in GCE Instance Metadata\n    echo \"install-hurl: Unable to find GCE metadata ${hurl_gcs_att}\"\n    return\n  fi\n\n  # Download hurl binary from a GCS bucket.\n  local -r hurl_bin=\"hurl\"\n  echo \"install-hurl: Installing hurl from ${hurl_gcs_url} ... \"\n  download-or-bust \"\" \"${hurl_gcs_url}\"\n  if [[ -f \"${KUBE_HOME}/${hurl_bin}\" ]]; then\n    chmod a+x ${KUBE_HOME}/${hurl_bin}\n    mv \"${KUBE_HOME}/${hurl_bin}\" \"${KUBE_BIN}/${hurl_bin}\"\n    echo \"install-hurl: hurl installed to ${KUBE_BIN}/${hurl_bin}\"\n    return\n  fi\n}\n\n# Installs inplace to ${KUBE_HOME}/bin/inplace if not already installed.\nfunction install-inplace {\n  cd \"${KUBE_HOME}\"\n  if [[ -f \"${KUBE_HOME}/bin/inplace\" ]]; then\n    echo \"install-inplace: inplace already installed\"\n    return\n  fi\n  local -r inplace_gcs_att=\"instance/attributes/inplace-gcs-url\"\n  local -r inplace_gcs_url=$(get-metadata-value \"${inplace_gcs_att}\")\n  if [[ -z \"${inplace_gcs_url}\" ]]; then\n    # URL not present in GCE Instance Metadata\n    echo \"install-inplace: Unable to find GCE metadata ${inplace_gcs_att}\"\n    return\n  fi\n  echo \"install-inplace: Installing inplace from ${inplace_gcs_url} ...\"\n  download-or-bust \"\" \"${inplace_gcs_url}\"\n  local -r inplace_bin=\"inplace\"\n  if [[ -f \"${KUBE_HOME}/${inplace_bin}\" ]]; then\n    mv \"${KUBE_HOME}/${inplace_bin}\" \"${KUBE_BIN}/${inplace_bin}\"\n    if [[ ! -d \"${KUBE_HOME}/${inplace_bin}\" ]]; then\n      mkdir -p \"${KUBE_HOME}/${inplace_bin}\"\n    fi\n    cat > \"${KUBE_HOME}/${inplace_bin}/inplace.hash\" <<EOF\n${inplace_gcs_url}\nEOF\n    echo \"install-inplace: inplace installed to ${KUBE_BIN}/${inplace_bin}\"\n    return\n  fi\n}\n\n# A function to download in-place component manifests if in-place agent is\n# present.\nfunction inplace-run-once {\n  if [[ -f \"${KUBE_HOME}/bin/inplace\" ]]; then\n    echo \"inplace-run-once: using inplace to download inplace component manifests\"\n    local dst_dir=\"${KUBE_HOME}/kube-manifests/kubernetes/gci-trusty\"\n    mkdir -p \"${dst_dir}/in-place\"\n    mkdir -p \"${dst_dir}/gce-extras/in-place\"\n    retry-forever 30 ${KUBE_HOME}/bin/inplace --mode=run-once --in_place_addon_path=\"${dst_dir}/gce-extras/in-place\" --master_pod_path=\"${dst_dir}/in-place\"\n  fi\n}\n\n# A helper function for loading a docker image. It keeps trying up to 5 times.\n#\n# $1: Full path of the docker image\nfunction try-load-docker-image {\n  local -r img=$1\n  echo \"Try to load docker image file ${img}\"\n  # Temporarily turn off errexit, because we don't want to exit on first failure.\n  set +e\n  local -r max_attempts=5\n  local -i attempt_num=1\n\n  if [[ \"${CONTAINER_RUNTIME_NAME:-}\" == \"docker\" ]]; then\n    load_image_command=${LOAD_IMAGE_COMMAND:-docker load -i}\n  elif [[ \"${CONTAINER_RUNTIME_NAME:-}\" == \"containerd\" || \"${CONTAINERD_TEST:-}\"  == \"containerd\" ]]; then\n    load_image_command=${LOAD_IMAGE_COMMAND:-ctr -n=k8s.io images import}\n  else\n    load_image_command=\"${LOAD_IMAGE_COMMAND:-}\"\n  fi\n\n  until timeout 30 ${load_image_command} \"${img}\"; do\n    if [[ \"${attempt_num}\" == \"${max_attempts}\" ]]; then\n      echo \"Fail to load docker image file ${img} using ${load_image_command} after ${max_attempts} retries. Exit!!\"\n      exit 1\n    else\n      attempt_num=$((attempt_num+1))\n      sleep 5\n    fi\n  done\n  # Re-enable errexit.\n  set -e\n}\n\n# Loads kube-system docker images. It is better to do it before starting kubelet,\n# as kubelet will restart docker daemon, which may interfere with loading images.\nfunction load-docker-images {\n  echo \"Start loading kube-system docker images\"\n  local -r img_dir=\"${KUBE_HOME}/kube-docker-files\"\n  if [[ \"${KUBERNETES_MASTER:-}\" == \"true\" ]]; then\n    try-load-docker-image \"${img_dir}/kube-apiserver.tar\"\n    try-load-docker-image \"${img_dir}/kube-controller-manager.tar\"\n    try-load-docker-image \"${img_dir}/kube-scheduler.tar\"\n  else\n    try-load-docker-image \"${img_dir}/kube-proxy.tar\"\n  fi\n}\n\n# If we are on ubuntu we can try to install docker\nfunction install-docker {\n  # bailout if we are not on ubuntu\n  if ! command -v apt-get >/dev/null 2>&1; then\n    echo \"Unable to automatically install docker. Bailing out...\"\n    return\n  fi\n  # Install Docker deps, some of these are already installed in the image but\n  # that's fine since they won't re-install and we can reuse the code below\n  # for another image someday.\n  apt-get update\n  apt-get install -y --no-install-recommends \\\n    apt-transport-https \\\n    ca-certificates \\\n    socat \\\n    curl \\\n    gnupg2 \\\n    software-properties-common \\\n    lsb-release\n\n  release=$(lsb_release -cs)\n\n  # Add the Docker apt-repository\n  curl ${CURL_FLAGS} \\\n    --location \\\n    \"https://download.docker.com/linux/$(. /etc/os-release; echo \"$ID\")/gpg\" \\\n  | apt-key add -\n  add-apt-repository \\\n    \"deb [arch=amd64] https://download.docker.com/linux/$(. /etc/os-release; echo \"$ID\") \\\n    $release stable\"\n\n  # Install Docker\n  apt-get update && \\\n    apt-get install -y --no-install-recommends ${GCI_DOCKER_VERSION:-\"docker-ce=5:19.03.*\"}\n  rm -rf /var/lib/apt/lists/*\n}\n\n# If we are on ubuntu we can try to install containerd\nfunction install-containerd-ubuntu {\n  # bailout if we are not on ubuntu\n  if [[ -z \"$(command -v lsb_release)\" || $(lsb_release -si) != \"Ubuntu\" ]]; then\n    echo \"Unable to automatically install containerd in non-ubuntu image. Bailing out...\"\n    exit 2\n  fi\n\n  if [[ $(dpkg --print-architecture) != \"amd64\" ]]; then\n    echo \"Unable to automatically install containerd in non-amd64 image. Bailing out...\"\n    exit 2\n  fi\n\n  # Install dependencies, some of these are already installed in the image but\n  # that's fine since they won't re-install and we can reuse the code below\n  # for another image someday.\n  apt-get update\n  apt-get install -y --no-install-recommends \\\n    apt-transport-https \\\n    ca-certificates \\\n    socat \\\n    curl \\\n    gnupg2 \\\n    software-properties-common \\\n    lsb-release\n\n  release=$(lsb_release -cs)\n\n  # Add the Docker apt-repository (as we install containerd from there)\n  curl ${CURL_FLAGS} \\\n    --location \\\n    \"https://download.docker.com/linux/$(. /etc/os-release; echo \"$ID\")/gpg\" \\\n  | apt-key add -\n  add-apt-repository \\\n    \"deb [arch=amd64] https://download.docker.com/linux/$(. /etc/os-release; echo \"$ID\") \\\n    $release stable\"\n\n  # Install containerd from Docker repo\n  apt-get update && \\\n    apt-get install -y --no-install-recommends containerd\n  rm -rf /var/lib/apt/lists/*\n\n  # Override to latest versions of containerd and runc\n  systemctl stop containerd\n  if [[ ! -z \"${UBUNTU_INSTALL_CONTAINERD_VERSION:-}\" ]]; then\n    # containerd versions have slightly different url(s), so try both\n    ( curl ${CURL_FLAGS} \\\n        --location \\\n        \"https://github.com/containerd/containerd/releases/download/${UBUNTU_INSTALL_CONTAINERD_VERSION}/containerd-${UBUNTU_INSTALL_CONTAINERD_VERSION:1}-linux-amd64.tar.gz\" \\\n      || curl ${CURL_FLAGS} \\\n        --location \\\n        \"https://github.com/containerd/containerd/releases/download/${UBUNTU_INSTALL_CONTAINERD_VERSION}/containerd-${UBUNTU_INSTALL_CONTAINERD_VERSION:1}.linux-amd64.tar.gz\" ) \\\n    | tar --overwrite -xzv -C /usr/\n  fi\n  if [[ -n \"${UBUNTU_INSTALL_RUNC_VERSION:-}\" ]]; then\n    curl ${CURL_FLAGS} \\\n      --location \\\n      \"https://github.com/opencontainers/runc/releases/download/${UBUNTU_INSTALL_RUNC_VERSION}/runc.amd64\" --output /usr/sbin/runc \\\n    && chmod 755 /usr/sbin/runc\n  fi\n  sudo systemctl start containerd\n}\n\nfunction ensure-container-runtime {\n  container_runtime=\"${CONTAINER_RUNTIME:-docker}\"\n  if [[ \"${container_runtime}\" == \"docker\" ]]; then\n    if ! command -v docker >/dev/null 2>&1; then\n      install-docker\n      if ! command -v docker >/dev/null 2>&1; then\n        echo \"ERROR docker not found. Aborting.\"\n        exit 2\n      fi\n    fi\n    docker version\n  elif [[ \"${container_runtime}\" == \"containerd\" ]]; then\n    # Install containerd/runc if requested\n    if [[ ! -z \"${UBUNTU_INSTALL_CONTAINERD_VERSION:-}\" || ! -z \"${UBUNTU_INSTALL_RUNC_VERSION:-}\" ]]; then\n      install-containerd-ubuntu\n    fi\n    # Verify presence and print versions of ctr, containerd, runc\n    if ! command -v ctr >/dev/null 2>&1; then\n      echo \"ERROR ctr not found. Aborting.\"\n      exit 2\n    fi\n    ctr --version\n\n    if ! command -v containerd >/dev/null 2>&1; then\n      echo \"ERROR containerd not found. Aborting.\"\n      exit 2\n    fi\n    containerd --version\n\n    if ! command -v runc >/dev/null 2>&1; then\n      echo \"ERROR runc not found. Aborting.\"\n      exit 2\n    fi\n    runc --version\n  fi\n}\n\n# Downloads kubernetes binaries and kube-system manifest tarball, unpacks them,\n# and places them into suitable directories. Files are placed in /home/kubernetes.\nfunction install-kube-binary-config {\n  cd \"${KUBE_HOME}\"\n  local -r server_binary_tar_urls=( $(split-commas \"${SERVER_BINARY_TAR_URL}\") )\n  local -r server_binary_tar=\"${server_binary_tar_urls[0]##*/}\"\n  if [[ -n \"${SERVER_BINARY_TAR_HASH:-}\" ]]; then\n    local -r server_binary_tar_hash=\"${SERVER_BINARY_TAR_HASH}\"\n  else\n    echo \"Downloading binary release sha512 (not found in env)\"\n    download-or-bust \"\" \"${server_binary_tar_urls[@]/.tar.gz/.tar.gz.sha512}\"\n    local -r server_binary_tar_hash=$(cat \"${server_binary_tar}.sha512\")\n  fi\n\n  if is-preloaded \"${server_binary_tar}\" \"${server_binary_tar_hash}\"; then\n    echo \"${server_binary_tar} is preloaded.\"\n  else\n    echo \"Downloading binary release tar\"\n    download-or-bust \"${server_binary_tar_hash}\" \"${server_binary_tar_urls[@]}\"\n    tar xzf \"${KUBE_HOME}/${server_binary_tar}\" -C \"${KUBE_HOME}\" --overwrite\n    # Copy docker_tag and image files to ${KUBE_HOME}/kube-docker-files.\n    local -r src_dir=\"${KUBE_HOME}/kubernetes/server/bin\"\n    local dst_dir=\"${KUBE_HOME}/kube-docker-files\"\n    mkdir -p \"${dst_dir}\"\n    cp \"${src_dir}/\"*.docker_tag \"${dst_dir}\"\n    if [[ \"${KUBERNETES_MASTER:-}\" == \"false\" ]]; then\n      cp \"${src_dir}/kube-proxy.tar\" \"${dst_dir}\"\n    else\n      cp \"${src_dir}/kube-apiserver.tar\" \"${dst_dir}\"\n      cp \"${src_dir}/kube-controller-manager.tar\" \"${dst_dir}\"\n      cp \"${src_dir}/kube-scheduler.tar\" \"${dst_dir}\"\n      cp -r \"${KUBE_HOME}/kubernetes/addons\" \"${dst_dir}\"\n    fi\n    load-docker-images\n    mv \"${src_dir}/kubelet\" \"${KUBE_BIN}\"\n    mv \"${src_dir}/kubectl\" \"${KUBE_BIN}\"\n\n    # Some older images have LICENSES baked-in as a file. Presumably they will\n    # have the directory baked-in eventually.\n    rm -rf \"${KUBE_HOME}\"/LICENSES\n    mv \"${KUBE_HOME}/kubernetes/LICENSES\" \"${KUBE_HOME}\"\n    mv \"${KUBE_HOME}/kubernetes/kubernetes-src.tar.gz\" \"${KUBE_HOME}\"\n  fi\n\n  if [[ \"${NETWORK_PROVIDER:-}\" == \"kubenet\" ]] || \\\n     [[ \"${NETWORK_PROVIDER:-}\" == \"cni\" ]]; then\n    install-cni-binaries\n  fi\n\n  # Put kube-system pods manifests in ${KUBE_HOME}/kube-manifests/.\n  install-kube-manifests\n  chmod -R 755 \"${KUBE_BIN}\"\n\n  # Install gci mounter related artifacts to allow mounting storage volumes in GCI\n  install-gci-mounter-tools\n\n  # Remount the Flexvolume directory with the \"exec\" option, if needed.\n  if [[ \"${REMOUNT_VOLUME_PLUGIN_DIR:-}\" == \"true\" && -n \"${VOLUME_PLUGIN_DIR:-}\" ]]; then\n    remount-flexvolume-directory \"${VOLUME_PLUGIN_DIR}\"\n  fi\n\n  # Install crictl on each node.\n  install-crictl\n\n  # TODO(awly): include the binary and license in the OS image.\n  install-exec-auth-plugin\n\n  # Source GKE specific scripts.\n  #\n  # This must be done after install-kube-manifests where the\n  # gke-internal-configure.sh is downloaded.\n  if [[ -e \"${KUBE_HOME}/bin/gke-internal-configure.sh\" ]]; then\n    echo \"Running GKE internal configuration script gke-internal-configure.sh\"\n    . \"${KUBE_HOME}/bin/gke-internal-configure.sh\"\n  fi\n\n  if [[ \"${KUBERNETES_MASTER:-}\" == \"false\" ]] && \\\n     [[ \"${ENABLE_NODE_PROBLEM_DETECTOR:-}\" == \"standalone\" ]]; then\n    install-node-problem-detector\n    if [[ -e \"${KUBE_HOME}/bin/gke-internal-configure.sh\" ]]; then\n      install-npd-custom-plugins\n    fi\n  fi\n\n  # Clean up.\n  rm -rf \"${KUBE_HOME}/kubernetes\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}.sha512\"\n}\n\n# Retries a command forever with a delay between retries.\n# Args:\n#   $1    : delay between retries, in seconds.\n#   $2... : the command to run.\nfunction retry-forever {\n  local -r delay=\"$1\"\n  shift 1\n\n  until \"$@\"; do\n    echo \"== $* failed, retrying after ${delay}s\"\n    sleep \"${delay}\"\n  done\n}\n\n# Initializes variables used by the log-* functions.\n#\n# get-metadata-value must be defined before calling this function.\n#\n# NOTE: this function is duplicated in configure-helper.sh, any changes here\n# should be duplicated there as well.\nfunction log-init {\n  # Used by log-* functions.\n  LOG_CLUSTER_ID=$(get-metadata-value 'instance/attributes/cluster-uid' 'get-metadata-value-error')\n  LOG_INSTANCE_NAME=$(hostname)\n  LOG_BOOT_ID=$(journalctl --list-boots | grep -E '^ *0' | awk '{print $2}')\n  declare -Ag LOG_START_TIMES\n  declare -ag LOG_TRAP_STACK\n\n  LOG_STATUS_STARTED='STARTED'\n  LOG_STATUS_COMPLETED='COMPLETED'\n  LOG_STATUS_ERROR='ERROR'\n}\n\n# Sets an EXIT trap.\n# Args:\n#   $1:... : the trap command.\n#\n# NOTE: this function is duplicated in configure-helper.sh, any changes here\n# should be duplicated there as well.\nfunction log-trap-push {\n  local t=\"${*:1}\"\n  LOG_TRAP_STACK+=(\"${t}\")\n  # shellcheck disable=2064\n  trap \"${t}\" EXIT\n}\n\n# Removes and restores an EXIT trap.\n#\n# NOTE: this function is duplicated in configure-helper.sh, any changes here\n# should be duplicated there as well.\nfunction log-trap-pop {\n  # Remove current trap.\n  unset 'LOG_TRAP_STACK[-1]'\n\n  # Restore previous trap.\n  if [ ${#LOG_TRAP_STACK[@]} -ne 0 ]; then\n    local t=\"${LOG_TRAP_STACK[-1]}\"\n    # shellcheck disable=2064\n    trap \"${t}\" EXIT\n  else\n    # If no traps in stack, clear.\n    trap EXIT\n  fi\n}\n\n# Logs the end of a bootstrap step that errored.\n# Args:\n#  $1 : bootstrap step name.\n#\n# NOTE: this function is duplicated in configure-helper.sh, any changes here\n# should be duplicated there as well.\nfunction log-error {\n  local bootstep=\"$1\"\n\n  log-proto \"${bootstep}\" \"${LOG_STATUS_ERROR}\" \"encountered non-zero exit code\"\n}\n\n# Wraps a command with bootstrap logging.\n# Args:\n#   $1    : bootstrap step name.\n#   $2... : the command to run.\n#\n# NOTE: this function is duplicated in configure-helper.sh, any changes here\n# should be duplicated there as well.\nfunction log-wrap {\n  local bootstep=\"$1\"\n  local command=\"${*:2}\"\n\n  log-trap-push \"log-error ${bootstep}\"\n  log-proto \"${bootstep}\" \"${LOG_STATUS_STARTED}\"\n  $command\n  log-proto \"${bootstep}\" \"${LOG_STATUS_COMPLETED}\"\n  log-trap-pop\n}\n\n# Logs a bootstrap step start. Prefer log-wrap.\n# Args:\n#   $1 : bootstrap step name.\n#\n# NOTE: this function is duplicated in configure-helper.sh, any changes here\n# should be duplicated there as well.\nfunction log-start {\n  local bootstep=\"$1\"\n\n  log-trap-push \"log-error ${bootstep}\"\n  log-proto \"${bootstep}\" \"${LOG_STATUS_STARTED}\"\n}\n\n# Logs a bootstrap step end. Prefer log-wrap.\n# Args:\n#   $1 : bootstrap step name.\n#\n# NOTE: this function is duplicated in configure-helper.sh, any changes here\n# should be duplicated there as well.\nfunction log-end {\n  local bootstep=\"$1\"\n\n  log-proto \"${bootstep}\" \"${LOG_STATUS_COMPLETED}\"\n  log-trap-pop\n}\n\n# Writes a log proto to stdout.\n# Args:\n#   $1: bootstrap step name.\n#   $2: status. Either 'STARTED', 'COMPLETED', or 'ERROR'.\n#   $3: optional status reason.\n#\n# NOTE: this function is duplicated in configure-helper.sh, any changes here\n# should be duplicated there as well.\nfunction log-proto {\n  local bootstep=\"$1\"\n  local status=\"$2\"\n  local status_reason=\"${3:-}\"\n\n  # Get current time.\n  local current_time\n  current_time=\"$(date --utc '+%s.%N')\"\n  # ...formatted as UTC RFC 3339.\n  local timestamp\n  timestamp=\"$(date --utc --date=\"@${current_time}\" '+%FT%T.%NZ')\"\n\n  # Calculate latency.\n  local latency='null'\n  if [ \"${status}\" == \"${LOG_STATUS_STARTED}\" ]; then\n    LOG_START_TIMES[\"${bootstep}\"]=\"${current_time}\"\n  else\n    local start_time=\"${LOG_START_TIMES[\"${bootstep}\"]}\"\n    unset 'LOG_START_TIMES['\"${bootstep}\"']'\n\n    # Bash cannot do non-integer math, shell out to awk.\n    latency=\"$(echo \"${current_time} ${start_time}\" | awk '{print $1 - $2}')s\"\n\n    # The default latency is null which cannot be wrapped as a string so we must\n    # do it here instead of the printf.\n    latency=\"\\\"${latency}\\\"\"\n  fi\n\n  printf '[cloud.kubernetes.monitoring.proto.SerialportLog] {\"cluster_hash\":\"%s\",\"vm_instance_name\":\"%s\",\"boot_id\":\"%s\",\"timestamp\":\"%s\",\"bootstrap_status\":{\"step_name\":\"%s\",\"status\":\"%s\",\"status_reason\":\"%s\",\"latency\":%s}}\\n' \\\n  \"${LOG_CLUSTER_ID}\" \"${LOG_INSTANCE_NAME}\" \"${LOG_BOOT_ID}\" \"${timestamp}\" \"${bootstep}\" \"${status}\" \"${status_reason}\" \"${latency}\"\n}\n\n######### Main Function ##########\nlog-init\nlog-start 'ConfigureMain'\necho \"Start to install kubernetes files\"\n\n# if install fails, message-of-the-day (motd) will warn at login shell\nlog-wrap 'SetBrokenMotd' set-broken-motd\n\nKUBE_HOME=\"/home/kubernetes\"\nKUBE_BIN=\"${KUBE_HOME}/bin\"\nPYTHON=\"python\"\n\nlog-start 'SetPythonVersion'\nif [[ \"$(python -V 2>&1)\" =~ \"Python 2\" ]]; then\n  # found python2, just use that\n  PYTHON=\"python\"\nelif [[ -f \"/usr/bin/python2.7\" ]]; then\n  # System python not defaulted to python 2 but using 2.7 during migration\n  PYTHON=\"/usr/bin/python2.7\"\nelse\n  # No python2 either by default, let's see if we can find python3\n  PYTHON=\"python3\"\n  if ! command -v ${PYTHON} >/dev/null 2>&1; then\n    echo \"ERROR Python not found. Aborting.\"\n    exit 2\n  fi\nfi\necho \"Version : \" $(${PYTHON} -V 2>&1)\nlog-end 'SetPythonVersion'\n\nif [[ \"$(is-master)\" == \"true\" ]]; then\n  log-wrap 'InstallHurl' install-hurl\n  log-wrap 'InstallInplace' install-inplace\nfi\n\n# download and source kube-env\nlog-wrap 'DownloadKubeEnv' download-kube-env\nlog-wrap 'SourceKubeEnv' source \"${KUBE_HOME}/kube-env\"\n\nlog-wrap 'DownloadKubeletConfig' download-kubelet-config \"${KUBE_HOME}/kubelet-config.yaml\"\n\n# master certs\nif [[ \"${KUBERNETES_MASTER:-}\" == \"true\" ]]; then\n  log-wrap 'DownloadKubeMasterCerts' download-kube-master-certs\nfi\n\n# ensure chosen container runtime is present\nlog-wrap 'EnsureContainerRuntime' ensure-container-runtime\n\n# binaries and kube-system manifests\nlog-wrap 'InstallKubeBinaryConfig' install-kube-binary-config\n\n# download inplace component manifests\nif [[ \"${KUBERNETES_MASTER:-}\" == \"true\" ]]; then\n  log-wrap 'InplaceRunOnce' inplace-run-once\nfi\n\necho \"Done for installing kubernetes files\"\nlog-end 'ConfigureMain'\n"
                    },
                    {
                        "key": "gci-ensure-gke-docker",
                        "value": "true"
                    },
                    {
                        "key": "disable-legacy-endpoints",
                        "value": "true"
                    },
                    {
                        "key": "user-data",
                        "value": "#cloud-config\n\nwrite_files:\n  - path: /etc/systemd/system/kube-node-installation.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Download and install k8s binaries and configurations\n      After=network-online.target\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/mkdir -p /home/kubernetes/bin\n      ExecStartPre=/bin/mount --bind /home/kubernetes/bin /home/kubernetes/bin\n      ExecStartPre=/bin/mount -o remount,exec /home/kubernetes/bin\n      ExecStartPre=/usr/bin/curl --fail --retry 5 --retry-delay 3 --silent --show-error -H \"X-Google-Metadata-Request: True\" -o /home/kubernetes/bin/configure.sh http://metadata.google.internal/computeMetadata/v1/instance/attributes/configure-sh\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure.sh\n      ExecStart=/home/kubernetes/bin/configure.sh\n      StandardOutput=journal+console\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-node-configuration.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Configure kubernetes node\n      After=kube-node-installation.service\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure-helper.sh\n      ExecStart=/home/kubernetes/bin/configure-helper.sh\n      StandardOutput=journal+console\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-container-runtime-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for container runtime\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh container-runtime\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubelet-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for kubelet\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh kubelet\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.timer\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Hourly kube-logrotate invocation\n\n      [Timer]\n      OnCalendar=hourly\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes log rotation\n      After=kube-node-configuration.service\n\n      [Service]\n      Type=oneshot\n      ExecStart=-/usr/sbin/logrotate /etc/logrotate.conf\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubernetes.target\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes\n\n      [Install]\n      WantedBy=multi-user.target\n\nruncmd:\n - systemctl daemon-reload\n - systemctl enable kube-node-installation.service\n - systemctl enable kube-node-configuration.service\n - systemctl enable kube-container-runtime-monitor.service\n - systemctl enable kubelet-monitor.service\n - systemctl enable kube-logrotate.timer\n - systemctl enable kube-logrotate.service\n - systemctl enable kubernetes.target\n - systemctl start kubernetes.target\n"
                    },
                    {
                        "key": "kube-env",
                        "value": "ALLOCATE_NODE_CIDRS: \"true\"\nAPI_SERVER_TEST_LOG_LEVEL: --v=3\nAUTOSCALER_ENV_VARS: kube_reserved=cpu=1060m,memory=1019Mi,ephemeral-storage=15Gi;node_labels=cloud.google.com/gke-boot-disk=pd-standard,cloud.google.com/gke-container-runtime=containerd,cloud.google.com/gke-nodepool=node-cluster-2,cloud.google.com/gke-os-distribution=cos,cloud.google.com/gke-preemptible=true,cloud.google.com/machine-family=e2;os=linux;os_distribution=cos;evictionHard=memory.available=100Mi,nodefs.available=10%,nodefs.inodesFree=5%,pid.available=10%\nCA_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVMRENDQXBTZ0F3SUJBZ0lRVEg0ay9oWlUwK3NzNWhQWUJZNXFCVEFOQmdrcWhraUc5dzBCQVFzRkFEQXYKTVMwd0t3WURWUVFERXlRNU5EaG1OakUwTWkweE9XWXlMVFEwTXpjdFltUTFOeTAyT1RNME9UUmlaakpsTnpNdwpJQmNOTWpFeE1URXhNVEV5TmpVd1doZ1BNakExTVRFeE1EUXhNakkyTlRCYU1DOHhMVEFyQmdOVkJBTVRKRGswCk9HWTJNVFF5TFRFNVpqSXRORFF6TnkxaVpEVTNMVFk1TXpRNU5HSm1NbVUzTXpDQ0FhSXdEUVlKS29aSWh2Y04KQVFFQkJRQURnZ0dQQURDQ0FZb0NnZ0dCQUxtZUtORGUvTTVzanFZaStuL1FJSlpPbndXOHJUbXZzU1U0RzR6VApURXBENkx5cGhSZitucjRTVnlxNE9KYkw1UksreUFaaWVMSS9lV1VUZElVYUc2S2tGSTlyL3g1SkxCRnoxZFkzCnpYNVFrRlp4RStFWTJMRDg5Rkg3QS9DSGRuTzhsWXNZZXgwTDZBWE1xY1lTazhSN2xGN1ZJZGJqdlowbkIvVkYKUDFod2xRbmMvMTd2WThoU1dhYnZvbDFZNXNNOWZoUDRFNzZpRisrNmRkWkJFcmwrZW9Xb2NSMjBGd2F4Z2VmOQpsM3RYT0p3L0JGbW02eVhpYzV2NHdoTGV0K2NHNUwxc0drQUVQQm5DSnFCWE41VWE5VjNCQTRaTEl3SVhHUzN5CnlBdWF0aGp4NjEvZEdlUmQycFd2cTBQdG1wZlNTSWd5WE9vQ3cyTkJmOGNWMk9UbzZoSyszQ08wSUtQOWp1T2YKVDVHSEt0Zy9oR3dIN0JSdTR5TTEvbkhDV1k3K0VtK1FSS3BzZEg2WWZrRGQwZTErY0Rkb0RQMGo1YnNINDBCSgo1dHMzais5Mk4za1RYblNhZTNBbTlaV3VaZllQQnVqWWJUbGVWQVJJcVFwdUkvQkxsZm15S2dTUnJIZ3Vnd2xzCmJQZkJWNXNsOGtHUllyQlU1OXZ1RGRkTlJRSURBUUFCbzBJd1FEQU9CZ05WSFE4QkFmOEVCQU1DQWdRd0R3WUQKVlIwVEFRSC9CQVV3QXdFQi96QWRCZ05WSFE0RUZnUVUrSXRIcXNzcDAyS0VOUjZrN0czVVJHcjFjUFF3RFFZSgpLb1pJaHZjTkFRRUxCUUFEZ2dHQkFDYUpwRC9ManpHSUFuQ05UcVJrbzI4R1pUQlZIWk9pTTdMU1pYeTlNaERkCkhON295MUJwMFk5YS9EbElWV0dYM3g4Y2tVeVViRmRvUVJLVzVEdWxhWVhLa1Qvb1NmbmlLQ0s5NUluSTJTSXQKaUxtZGV6M0Y4aGF2aWhIY3haOHNJamZ2c2hNZW0yVDhqYjlwMWJ5TEx5eG0wNGwrYW5lOHdtQ1RoM0hMTHhTSgpUb211eFNlVm5nZ3pzY21KSmR2b0ozbGNNK05LVytUSTc4cDZNdzJNbnY3bDhQVElCcTRDSkNheHBuSnA3VTBsCmRyK3dTeFRlZXladkJsczlSanpyZ1grY0tKV1JSaFc0Qnh1c2FNT2FHZ0xoQ29BNlYyMm1sZDR4RkdFMGhLZzAKdUhrYzBwOThreHM3YnhmbjI2U1k3dFJMRzBiOVZ0bnhmQ0cvQVEwckZDQUg0elNCUCsyLzh2dVI5QUp5TTN2dgp6WW12OXhkc0F3eFJLK2JpUjdNNkdpZTEyeWIzVlk4WGtTeWszdVZvaVcza0gwUWg1MXNhdmZDeVdoQitYQit2CnhyRi95eGNZT0F6dnl5aHNxZjN3OWlJaUJkQTNrNjJiRTJjK1lWSWowb3NkZjZsWUVyQm41TzZUUUZleXJuMCsKV3N4aWpaZUVjekZlcDZYOGIyYURGQT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\nCLUSTER_IP_RANGE: 10.2.0.0/20\nCLUSTER_NAME: kuber-2\nCNI_HASH: 60bec898cffa83ee33023df0ea6001940f222e38d360e6829d05b821cff9921842418441abe8cbb9eada606edf50f0fe5730209311b8be5e035db022db4e3a5f\nCNI_SHA1: dcbeba8d6be7a49e399bda6b8b638d312eace876\nCNI_STORAGE_PATH: https://storage.googleapis.com/gke-release/cni-plugins/v0.8.5-gke.1\nCNI_STORAGE_URL_BASE: https://storage.googleapis.com/gke-release/cni-plugins\nCNI_TAR_PREFIX: cni-plugins-linux-amd64-\nCNI_VERSION: v0.8.5-gke.1\nCONTAINER_RUNTIME: containerd\nCONTAINER_RUNTIME_ENDPOINT: unix:///run/containerd/containerd.sock\nCONTAINER_RUNTIME_NAME: containerd\nCONTAINERD_MAX_CONTAINER_LOG_LINE: \"262144\"\nCREATE_BOOTSTRAP_KUBECONFIG: \"false\"\nDETECT_LOCAL_MODE: NodeCIDR\nDNS_DOMAIN: cluster.local\nDNS_SERVER_IP: 10.89.32.10\nDOCKER_REGISTRY_MIRROR_URL: https://mirror.gcr.io\nELASTICSEARCH_LOGGING_REPLICAS: \"1\"\nENABLE_CLUSTER_DNS: \"true\"\nENABLE_CLUSTER_LOGGING: \"false\"\nENABLE_CLUSTER_MONITORING: none\nENABLE_CLUSTER_REGISTRY: \"false\"\nENABLE_CLUSTER_UI: \"true\"\nENABLE_L7_LOADBALANCING: glbc\nENABLE_LATEST_NPD: \"true\"\nENABLE_METADATA_AGENT: \"\"\nENABLE_METRICS_SERVER: \"true\"\nENABLE_NODE_LOGGING: \"false\"\nENABLE_NODE_PROBLEM_DETECTOR: standalone\nENABLE_NODELOCAL_DNS: \"false\"\nENABLE_SYSCTL_TUNING: \"true\"\nENV_TIMESTAMP: \"2021-11-11T12:26:47+00:00\"\nEXEC_AUTH_PLUGIN_HASH: beb06bc613ac0446b296c20e21d518523ab495efc5a529926474979494bd35be0dbfe7d8d9c3299a120570a7101769710063cb4acac5eda4ee23afaab55dbf1a\nEXEC_AUTH_PLUGIN_LICENSE_URL: https://storage.googleapis.com/gke-prod-binaries/gke-exec-auth-plugin/ca1e685df450fd5d32b57a659eb363b870b03937/LICENSE\nEXEC_AUTH_PLUGIN_SHA1: b42adb3966c4295f17bf3c3f8a2058f4bda684b9\nEXEC_AUTH_PLUGIN_URL: https://storage.googleapis.com/gke-prod-binaries/gke-exec-auth-plugin/ca1e685df450fd5d32b57a659eb363b870b03937/gke-exec-auth-plugin\nEXTRA_DOCKER_OPTS: --insecure-registry 10.0.0.0/8\nEXTRA_POD_SYSCTLS: net.ipv6.conf.all.disable_ipv6=1,net.ipv6.conf.default.disable_ipv6=1\nFEATURE_GATES: DynamicKubeletConfig=false,RotateKubeletServerCertificate=true,GracefulNodeShutdown=true,ExecProbeTimeout=false\nFLUENTD_CONTAINER_RUNTIME_SERVICE: containerd\nHEAPSTER_USE_NEW_STACKDRIVER_RESOURCES: \"true\"\nHEAPSTER_USE_OLD_STACKDRIVER_RESOURCES: \"false\"\nHPA_USE_REST_CLIENTS: \"true\"\nINSTANCE_PREFIX: gke-kuber-2-a967968c\nKUBE_ADDON_REGISTRY: k8s.gcr.io\nKUBE_CLUSTER_DNS: 10.89.32.10\nKUBE_DOCKER_REGISTRY: gke.gcr.io\nKUBE_MANIFESTS_TAR_HASH: e7e83c805218139a62ace115e64c6a6a7638e4b3dddf3bcd9a687e60c7f159e35aba1c6151e6e154653d157c5720a1f5f544333654de535aa5ac3f887b42a330\nKUBE_MANIFESTS_TAR_URL: https://storage.googleapis.com/gke-release/kubernetes/release/v1.20.10-gke.1600/kubernetes-manifests.tar.gz,https://storage.googleapis.com/gke-release-eu/kubernetes/release/v1.20.10-gke.1600/kubernetes-manifests.tar.gz,https://storage.googleapis.com/gke-release-asia/kubernetes/release/v1.20.10-gke.1600/kubernetes-manifests.tar.gz\nKUBE_PROXY_TOKEN: ZvkEQt4W6EXV3HBnS2pbbN6hrty9CAoxS-zK1dxnKd4=\nKUBELET_ARGS: --v=2 --experimental-check-node-capabilities-before-mount=true --cloud-provider=gce\n  --experimental-mounter-path=/home/kubernetes/containerized_mounter/mounter --cert-dir=/var/lib/kubelet/pki/\n  --cni-bin-dir=/home/kubernetes/bin --kubeconfig=/var/lib/kubelet/kubeconfig --image-pull-progress-deadline=5m\n  --max-pods=110 --non-masquerade-cidr=0.0.0.0/0 --network-plugin=kubenet --volume-plugin-dir=/home/kubernetes/flexvolume\n  --node-status-max-images=25 --container-runtime=remote --container-runtime-endpoint=unix:///run/containerd/containerd.sock\n  --runtime-cgroups=/system.slice/containerd.service --registry-qps=10 --registry-burst=20\nKUBERNETES_MASTER: \"false\"\nKUBERNETES_MASTER_NAME: 35.224.39.25\nLOAD_IMAGE_COMMAND: ctr -n=k8s.io images import\nLOGGING_DESTINATION: \"\"\nLOGGING_STACKDRIVER_RESOURCE_TYPES: \"\"\nMONITORING_FLAG_SET: \"true\"\nNETWORK_PROVIDER: kubenet\nNODE_LOCAL_SSDS_EXT: \"\"\nNON_MASQUERADE_CIDR: 0.0.0.0/0\nREMOUNT_VOLUME_PLUGIN_DIR: \"true\"\nREQUIRE_METADATA_KUBELET_CONFIG_FILE: \"true\"\nSALT_TAR_HASH: \"\"\nSALT_TAR_URL: https://storage.googleapis.com/gke-release/kubernetes/release/v1.20.10-gke.1600/kubernetes-salt.tar.gz,https://storage.googleapis.com/gke-release-eu/kubernetes/release/v1.20.10-gke.1600/kubernetes-salt.tar.gz,https://storage.googleapis.com/gke-release-asia/kubernetes/release/v1.20.10-gke.1600/kubernetes-salt.tar.gz\nSERVER_BINARY_TAR_HASH: ada8bea81ad9223de32aa8497bdbdf4db6fabd4f463e68f66d8ff47f22709c29d2c797b8bb930bfb28f13cf9c03861b463149d1350d6dbda2b565eb2956cd28b\nSERVER_BINARY_TAR_URL: https://storage.googleapis.com/gke-release/kubernetes/release/v1.20.10-gke.1600/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/gke-release-eu/kubernetes/release/v1.20.10-gke.1600/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/gke-release-asia/kubernetes/release/v1.20.10-gke.1600/kubernetes-server-linux-amd64.tar.gz\nSERVICE_CLUSTER_IP_RANGE: 10.89.32.0/20\nSTACKDRIVER_ENDPOINT: https://logging.googleapis.com\nSYSCTL_OVERRIDES: \"\"\nTPM_BOOTSTRAP_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURyRENDQWhTZ0F3SUJBZ0lSQUo4VDAzSENMQ3ROOS84QVJXb2JEYjh3RFFZSktvWklodmNOQVFFTEJRQXcKTHpFdE1Dc0dBMVVFQXhNa09UUTRaall4TkRJdE1UbG1NaTAwTkRNM0xXSmtOVGN0Tmprek5EazBZbVl5WlRjegpNQjRYRFRJeE1URXhNVEV5TWpZMU1Wb1hEVEkyTVRFeE1ERXlNalkxTVZvd0hERWFNQmdHQTFVRUF4TVJhM1ZpClpXeGxkQzFpYjI5MGMzUnlZWEF3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRQzgKV2RFVVE4RDlYaTBDaTRaNGMyNFh3QUl2Z1B1ZUhELzNHdWJtQ1h1NjdnbmsreUt1eHBOeWtZVktCTU5vcEVkbwpoYWxTNEhwc1l0V2NmNHRqMWtHL1Y4TE5NQnY0VmhkVVBUYzJ3Mm5DLzJuV1RmSCtGZ2Y3bU52TmNDU0tOam5RCk84Ni9DOGcvQVBTUjJvZWhrQmNyNzAyVC8reHNsb0svUTdHZlE0VjQ1WHUrUHFqd0l5RmI4RldiUWFpK2FBb1IKK1BTdlZLb1pPU2FpaWtzd0k0SnE3ZmpUNlFlV0xDZXFtUk53ZUR0cXd5K2U5TWpzSjNlY1RiNGV0SWpIcmNpQQpyM0dybktrdWZLTHlyaWZyYVFQVEJZMjUrV0FLendHLzR6V1Rka0k2S1VFNGptcUt6Qmp6eTJkNkJMSlE5N094ClBFL3NHVDcrakNZVWNxM1phOENmQWdNQkFBR2pWakJVTUE0R0ExVWREd0VCL3dRRUF3SUZvREFUQmdOVkhTVUUKRERBS0JnZ3JCZ0VGQlFjREFqQU1CZ05WSFJNQkFmOEVBakFBTUI4R0ExVWRJd1FZTUJhQUZQaUxSNnJMS2ROaQpoRFVlcE94dDFFUnE5WEQwTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCZ1FBU2hadUQyTWcrSHh6Z25YMnhPTTkwCkQ1SGNDamh1NHVYWUdqc2ZhbG1Ma3htZHBOVDJFcHZTSVZlZFhmYXFHMU0rNEY4cmlRbXZIT21RZ2FYZzhiV1QKQTNGaVRUMkJxeCtBa3ZXRndJTlV6VDlIUTJSWGtreHJEVVUwL1JFNzFFdzFsZ2YyRmVmbXY3WHVtcXg3WlNZegptdE1mRzRMWmxESHNyN2EyQlNKc0o3RndVZWpJb0J5RXRUQzRyUjZwYzdJcDBaYThLelJweGhaNVIyc1ErYXM3CmtUd0dQMU85MTZ6dVBPZlRtWHFNaDZKdWY0SkU4VkxNd1hrODZ3VUdYZXluWDZoYzRRTEVmTE9BT2FVM2hyYnkKSlJzZVVBZDVucjRaN3hXU2dYT3BpbVNHQ2tLOWI2L25ESGJHbWFaNDZwRHI2emx1TlpwYnhuSzlacWNNWU9PKwpnUHE0bENrVmgxd3JFVmdWZTMvQ1VnMThKUzc4UXc3TWdsT3duOGx0VWVNU1JsTWthYnlQT0N2UGU0U2FTMXMyClFiOEdLbHBtMWMvUmkyYk8yejZBWXlZOWhzMXBrTzR1dHA5OTcwS3MveTNUNlVRVkNreEIvczh3bGJpa3hvSVcKVlM0TVNTTjQxaXNFZjY4ejFuOXhJcXlDQWdQaDJRZ1JLaHRock1SMlh2Yz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=\nTPM_BOOTSTRAP_KEY: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBdkZuUkZFUEEvVjR0QW91R2VITnVGOEFDTDREN25ody85eHJtNWdsN3V1NEo1UHNpCnJzYVRjcEdGU2dURGFLUkhhSVdwVXVCNmJHTFZuSCtMWTlaQnYxZkN6VEFiK0ZZWFZEMDNOc05wd3Y5cDFrM3gKL2hZSCs1amJ6WEFraWpZNTBEdk92d3ZJUHdEMGtkcUhvWkFYSys5TmsvL3NiSmFDdjBPeG4wT0ZlT1Y3dmo2bwo4Q01oVy9CVm0wR292bWdLRWZqMHIxU3FHVGttb29wTE1DT0NhdTM0MCtrSGxpd25xcGtUY0hnN2FzTXZudlRJCjdDZDNuRTIrSHJTSXg2M0lnSzl4cTV5cExueWk4cTRuNjJrRDB3V051ZmxnQ3M4QnYrTTFrM1pDT2lsQk9JNXEKaXN3WTg4dG5lZ1N5VVBlenNUeFA3QmsrL293bUZIS3QyV3ZBbndJREFRQUJBb0lCQUIzcVlYQWRDaVdUL3RwNgpkbVlNNWhobFJGT1pqUjFzbk9lWmE4RnZaeW9SRGNidDhSdkpGQ1BzZUxzQmJRSU5UdjdnZFR6aHhPcTdKZlRMCk9KbjlCQWlwU1VVQUs2a2RaTURaK2pvN1U4SGMxeDYvMXVid1JvaWxHNHJuNXIzWEVBYXRhOUNNbXJFUWJKMVAKNlhQMVVyWXY0T2F0WXVGUHVlamtEbTJ6M1VWa0NRZ01yeGR0eXZjZlBTS1lGZXdSeXhXWVNxdUVQbTFuWGdnNwpwY01Oc2dnYm9zWUNZZEZKU3pObEJpUVpvaFh4ejhQNm1BR21tRGh1ellXcHgvTTZCcml5OUhrZ29sSzM1bkxECnczM1g4dEVWYkNPajN5Unhycjl6d29GbndQdUR5ckF2SWJnaVhuWFJTbVlQaFBaMjgxWGcrMytGR0MrcTZpNzIKSmd3SUpzVUNnWUVBNmIzVG5YTTNlcG1IUXpqUkN3Rys2R2VsYzBxZnBGVGw1ZFRUbzROMUx3S2d2d0ExUGszcwp1Zmx0SnhldlVaaGxZMkFudXRZY2twMTRVNVh0RXhDUXdLMUQrM1BxV1RkdjVxaWtiTW1OaFJOSWZ2TEcyclIvCm5WeXhvSnI0N2Q1UEsvOWwyaUVWS0djNFUvSENDSzNZTCtQai9IVWVPdWMrN2xWeDlUbEtUNk1DZ1lFQXprbHoKdWlJZ294V3lNL3pjeW9yNTRJY052U2NSdDdQdEh3TnhOZTZRZis5ZzVEZC83anJwUUtDdkpXdngzSVhZZVdvdAo5NFlJR0JCSVJpTHQzREJhVHB2MDVUZ2YwU3JvaFhIK1ZHQ0tQLzA0a3Zya254eWVHb3FqUUQvZHppSE14ZENjClpoU2tqc0J5NHRIa1VoTm5XWXZQdGdVWHpsanFSK3RrL1ZIS2F0VUNnWUI4UlFNcjg2U3NWdEcyS0kvalZUTkYKWmsxdFpXQkl3eVpUTWZxdk5XWG83M0c4K29SVU1xUElJRmNxOElteVRONmluZTJoaE5JK0ZPQnpPQU9LSGtXSApXdGNJNmhEUERBMC9TYXZaZHJMNTdFMmZ5TDEyYTM1cGtHMlRvTEQxN2pxVGZyNk00UWZacWo4bFNpUko3dnRBClF0M2tTL1FkaHZKTFRqdy9EdzEyRndLQmdHRlJtYjBvT0lsM3hOaHQ1S1BSS00xYUtZc2hFV1MvQjVEb0NOTE8KdDNFRHQ0d3krckdqTFVPR0N0cjJyK1cvWno3d2Jyc2xpay8vN25qWUphc0pUTEZsTmdXbGtxMFZOeGt0akRTMgpUc0tkYmNFNWgvM2dmRjQ5SllNOEhpSVBKQkgydHJJWjd3QkJubkdQWDgyd3hjTWpDRnp3emloVkhrSEx0WnNrCnFQLzVBb0dBRUJnMUR1cENBWXRMSEtqK0ZTMHgzcTI1RWhpWVdyTDZaMTVYN0czb3FZaCsvb0phbWJBN0VqK1YKOWJzc081Rm5IWS9RVVNCTXU2UDdwNVZQL2U2NXdPTjk2OXd2dFNSVHZnaHR3djh4dXVSQW4vN09OQXFKSmpFSwp2bUNnT3RwS2hmM3RMRDhxRXJpU2hWVUpEd0NHYVVUOThLNHJrcjVHd2ZHZEZiLy9SQUk9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==\nVOLUME_PLUGIN_DIR: /home/kubernetes/flexvolume\nZONE: us-central1-a\n"
                    },
                    {
                        "key": "cluster-uid",
                        "value": "a967968cd6cb4f769e5ff1c5062c813a7bc1992a128e4547ba374101edd9f39d"
                    },
                    {
                        "key": "cluster-location",
                        "value": "us-central1-a"
                    }
                ],
                "kind": "compute#metadata"
            },
            "serviceAccounts": [
                {
                    "email": "556062258574-compute@developer.gserviceaccount.com",
                    "scopes": [
                        "https://www.googleapis.com/auth/logging.write",
                        "https://www.googleapis.com/auth/monitoring"
                    ]
                }
            ],
            "selfLink": "https://www.googleapis.com/compute/v1/projects/dev-tomer/zones/us-central1-a/instances/gke-kuber-2-node-cluster-2-3a4d0670-1c7n",
            "scheduling": {
                "onHostMaintenance": "TERMINATE",
                "automaticRestart": false,
                "preemptible": true
            },
            "cpuPlatform": "Intel Broadwell",
            "labels": {
                "goog-gke-node": ""
            },
            "labelFingerprint": "2ixRno2sGuM=",
            "startRestricted": false,
            "deletionProtection": false,
            "shieldedInstanceConfig": {
                "enableSecureBoot": false,
                "enableVtpm": true,
                "enableIntegrityMonitoring": true
            },
            "shieldedInstanceIntegrityPolicy": {
                "updateAutoLearnPolicy": true
            },
            "fingerprint": "bEBsZMOGF-8=",
            "lastStartTimestamp": "2021-11-11T04:33:32.750-08:00",
            "kind": "compute#instance"
        },
        {
            "id": "4434541160662348668",
            "creationTimestamp": "2021-11-11T04:33:24.303-08:00",
            "name": "gke-kuber-2-node-cluster-2-3a4d0670-1tcd",
            "tags": {
                "items": [
                    "gke-kuber-2-a967968c-node"
                ],
                "fingerprint": "sEowG6R7vT0="
            },
            "machineType": "https://www.googleapis.com/compute/v1/projects/dev-tomer/zones/us-central1-a/machineTypes/e2-medium",
            "status": "RUNNING",
            "zone": "https://www.googleapis.com/compute/v1/projects/dev-tomer/zones/us-central1-a",
            "networkInterfaces": [
                {
                    "network": "https://www.googleapis.com/compute/v1/projects/dev-tomer/global/networks/default",
                    "subnetwork": "https://www.googleapis.com/compute/v1/projects/dev-tomer/regions/us-central1/subnetworks/default",
                    "networkIP": "10.128.0.21",
                    "name": "nic0",
                    "accessConfigs": [
                        {
                            "type": "ONE_TO_ONE_NAT",
                            "name": "external-nat",
                            "natIP": "34.132.240.243",
                            "networkTier": "PREMIUM",
                            "kind": "compute#accessConfig"
                        }
                    ],
                    "aliasIpRanges": [
                        {
                            "ipCidrRange": "10.2.0.0/24",
                            "subnetworkRangeName": "gke-kuber-2-pods-a967968c"
                        }
                    ],
                    "fingerprint": "zE7eAAdMkqM=",
                    "stackType": "IPV4_ONLY",
                    "kind": "compute#networkInterface"
                }
            ],
            "disks": [
                {
                    "type": "PERSISTENT",
                    "mode": "READ_WRITE",
                    "source": "https://www.googleapis.com/compute/v1/projects/dev-tomer/zones/us-central1-a/disks/gke-kuber-2-node-cluster-2-3a4d0670-1tcd",
                    "deviceName": "persistent-disk-0",
                    "index": 0,
                    "boot": true,
                    "autoDelete": true,
                    "licenses": [
                        "https://www.googleapis.com/compute/v1/projects/gke-node-images/global/licenses/gke-node",
                        "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos-pcid",
                        "https://www.googleapis.com/compute/v1/projects/cos-cloud-shielded/global/licenses/shielded-cos",
                        "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/licenses/cos"
                    ],
                    "interface": "SCSI",
                    "guestOsFeatures": [
                        {
                            "type": "SECURE_BOOT"
                        },
                        {
                            "type": "VIRTIO_SCSI_MULTIQUEUE"
                        },
                        {
                            "type": "SEV_CAPABLE"
                        },
                        {
                            "type": "UEFI_COMPATIBLE"
                        }
                    ],
                    "diskSizeGb": "30",
                    "shieldedInstanceInitialState": {
                        "pk": {
                            "content": "MIIEGTCCAwGgAwIBAgIQYB8C9RH--O1hXkpp2FVSXjANBgkqhkiG9w0BAQsFADCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwHhcNMjAwODA2MTk0ODQ0WhcNMzAwODA0MTk0ODQ0WjCBkTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMR4wHAYDVQQDExVVRUZJIFBsYXRmb3JtIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQClSQ15LUf193eJfM6b5etGgz8auvdI72Cclo3fHvwXBzsm5T1QamwYAqrCTcS7MxauCTkmkXTS9ejM4NNpQWF6KG82nR88vRyKO_MnSNL8ZP-rtRu0p1X_mUYXwi0_nPkyPKLR2QJ9H2EOrw_RChWvwnu281WtfUPCYs2t2SjBCF_mgzZI8o3s8wOtL8y-Dmi9T0bGO1wYX2okz51PKbhgVGQA7KJRmeekIxEkiN7GOb_2VQqcdM9c846OlC-8abwgDvrL3YqKqhw8DnSM2AbNpZIgUTd1Ut3X-PWXVKBj3qdxjAyRez8dPWymXDji-CBoBzLsWEkUW87S1coggOABAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMCsGA1UdIwQkMCKAIMk0-K2sxOjtSpl-2pXmBWwwvSMGEIThmdDsSxQk2XZQMA0GCSqGSIb3DQEBCwUAA4IBAQA7Pmaixb0FuDtpesNGvaBkTGWWMO7bDtx4rQom7zprEnliFJZung08FS3r73ob1urH0lzZm9022nRp8xqcSGk3wDkE9xQppWhvjhf6SOHdwM9_OxVq6no_BPz1PkRYsg4V07cgYPCtp7Ck7ZBI7m3MbLUyg8EG14_tvjKX9Xh2h0FSGuGg8_jjGYCGDtaSPkXBpAWurZ5mC2o9CzGaBJR4f_51I5C2AfHMG0H5T0Kehuyb_IzX9mAwArGmt62e4T9SxdP7LZUNPMEzOrhW1RzXvsD6Vod4uA9h2n_lbZHiBBExM2PMwuoobb-io-W0ARL4OCN5jah0a7q1ax6UYJK-",
                            "fileType": "X509"
                        },
                        "keks": [
                            {
                                "content": "MIIEIjCCAwqgAwIBAgIRAKxVeWkn5a0pF1C0o_HUM6owDQYJKoZIhvcNAQELBQAwgZUxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEfMB0GA1UECxMWQ29udGFpbmVyIE9wdGltaXplZCBPUzEiMCAGA1UEAxMZVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMDAeFw0yMDA4MDYxOTQ4NTBaFw0zMDA4MDQxOTQ4NTBaMIGVMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xHzAdBgNVBAsTFkNvbnRhaW5lciBPcHRpbWl6ZWQgT1MxIjAgBgNVBAMTGVVFRkkgS2V5IEV4Y2hhbmdlIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC6ZCJ4Oldm1z3gwwAjWqiHRMFrXPwq0XmVmLWoaGUBzeL41VwHK76iQTxl11HYhqaAr_0nmVQAM3M6so6cmydd7l1RPYJpZ3Shy3qO4xxgy30kp4zW00m9EVEdkmh9-9zi_G89uutz7wOb34M2Wrybwa7D5U102DmSoJAoq5z2YrvpjZoGLRGqBBP6A1l-_gRGMAgUMqKbhD1HF1VKXZnIGq9UJcpHhRvQxOG3nlVWk6z8dH-Rnp_9YfEPRORAUF5PUnUL5-I3wr5derIIoeYxc7G2ZuTyRWsF9WVyZ7OquYwxAY4l4xkDJpAvSomHkbfNgtCZyTm2pMIkRou0up5lAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMCsGA1UdIwQkMCKAINDkWV5HwgIi6aogGQUbZwWC5Es_Vx9SX5kG8i1xiXxKMA0GCSqGSIb3DQEBCwUAA4IBAQCOTmuK7QQ4sP_8qYI2-bkvbQg1Vpq0W_aWtm0AQDw2iEVgfIq8JxNHu61ZhkmBiEhsdaaj7bYt_8owpvxfRnmzMPhQ6iB51vkExjWipD9spgSb8tfp0te6MqTT3omyYI9x4L13wn9ufZtlhZXlVgbjUN1QyevHwNt7Kms8Nd9Jbk9JCV9JoOIjkBpUjpCWCDfdGDD-iGIPzGdS-KjrNiA4udnzkdkO83dFMMvu69a1snCRUshNvHBNPbPRwbRYV9lS_QTwfft7EgbNF0455gblZbejvGJgR1Vhyen0jIPouVWxXe0X7AnGK8Mc3DUQBPVGT4ZR0WChbcwiOavh2t2X",
                                "fileType": "X509"
                            }
                        ],
                        "dbs": [
                            {
                                "content": "MIIEDTCCAvWgAwIBAgIQRtEbux4j2WDjYimBMkIBYjANBgkqhkiG9w0BAQsFADCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwHhcNMjAwODA2MTk0ODU1WhcNMzAwODA0MTk0ODU1WjCBizELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMR8wHQYDVQQLExZDb250YWluZXIgT3B0aW1pemVkIE9TMRgwFgYDVQQDEw9VRUZJIERCIEtleSB2MTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDQzJHu5A61uBNU6UUUZ5MiXjXwy8Du44BHhisNBpi6cTVHZddJ85iNldE5cPL7hZFJP9n77KyFRCCLxT2CVDNkwMyE2jvJkTz2x2qWvJ-uIuL25Asfgbrv7t1h2Jn790ZLwb9U3qQvqMLvIh_cTtNLat0DaZJsdnJo1MTnFAWrYZZ19KB4j6JJpG_QBnQ-s8XibeSSoa_bMEQTn2OEQFeEcume3CeuZKzXyytMLKkV_z4z-CYddyRwkOFivWUHWq2nVecQQgdyDNWYxGnY4MNsTMYFfv-mhyRzMwhxBFMwMAaEwhTFWsIP6VNwrwIgQaDw3o1fUEuzavTfdNhULaJLAgMBAAGjazBpMA8GA1UdEwEB_wQFMAMBAf8wKQYDVR0OBCIEIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMCsGA1UdIwQkMCKAIEtOsnFY2N1KW7dg9Wd_GEcIwV_a-U2DCn5ZyUsGWickMA0GCSqGSIb3DQEBCwUAA4IBAQCOd9V3WYv589dVov5ZOYo4zSs5PXpts1_8sYvMwvzLBr46LaejfG7KjjIY665Cnik__Zy9N3ZS9-fEeGKrBPE8ClwC06QhLbWDSFIqj2y9qq5FyBW0k1no2UQBnvx4CnLw_BgU3eae0wjv1lpDIbMwxe3E_aucVmzaIX3O83cw2JL9lLm1Psum0L2VHDZSCTP24vzrWoXXo4USHO_tBt_NkYrdkQH5CqGJYtxzKRwHHKEar3vzsiW4DPzlW8kUjRual1eBOKT5YKGbrOA_PJXV9x_7v1f2uAIrqh3HyppDTaGJ7Lux1MDf_hKuwAFI5QJTy9NEojbuUk1tzB4ys_W8",
                                "fileType": "X509"
                            }
                        ],
                        "dbxs": [
                            {
                                "content": "MIIEaDCCA1CgAwIBAgIJAKqfsrCdjyCoMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxMB4XDTE4MTIwODAxMTk0MVoXDTI4MTIwNTAxMTk0MVowfzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEXMBUGA1UEAxMOVUVGSSBEQiBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCtZ9U4P5aWlBwiTocmkUjOn2XpvHUlUOnsnhvsm994hAb0MNk2d3fXa8Nz14v9JiBTSf70KU2Zhxb_bSN3KAIv-f7F2AuXte7U9SnzZ02UDmK4TU1bFQW67Y3Gc2hWprCHYEjiRQD4J3WPWhuZnAXqzXQk3uDWVPETi-G9KAM1R-yNxZfoEjfIKhLabDsWqDtnMSovObLoVfwTdnm0WCuYTFtY_CKNxuxeKuzDsC5Su9N3dSFbpGhXJjwUaXPLWY5MFIqIQNBfhmWzDd4PItXaXV3V44IqWTXclE2aSUqkwNrEZ1cRpHG4PYM1aHVmjcO_dWlvthcepTIMIEMAXg2LAgMBAAGjgeYwgeMwHQYDVR0OBBYEFNXbmmdkM0aIsPMyEIv25JRaOPA-MIGzBgNVHSMEgaswgaiAFNXbmmdkM0aIsPMyEIv25JRaOPA-oYGEpIGBMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgTExDLjEUMBIGA1UECxMLQ2hyb21pdW0gT1MxFzAVBgNVBAMTDlVFRkkgREIgS2V5IHYxggkAqp-ysJ2PIKgwDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAJ2vbNymAKTUbRvxnAohHozVUByrKHCq1o8b-bKrgv7Ch0X4itfG8Uwvt0xG7CTpl_Dno92MtpOpFv4ydqox-pP1kTsRcnFNggndXdjpGILIB94KmFiYJvB6RzocJsXsXBa0tULOR24qiB9f93kfITS7Ec60WjFfpgYKEnuEgcV0yBuZzAZbxo1uF4n1hhmVUnKtEI9pX-8geYIIqIYiwwT2jnhFogWw4PeSyg-HMR1CLwwJeH2XDa924LpgHFuR-AbikipAE2vIE0yqJzo0o4tn9-sRuMaQcZ4VQqIzMiniW5H7nGeoQY3ktHX5eq6x-4jFvdLnzzq_D4sS-UWHzOA==",
                                "fileType": "X509"
                            },
                            {
                                "content": "MIIEiTCCA3GgAwIBAgIJAOzm3xz71Vu6MA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIExMQy4xFDASBgNVBAsTC0Nocm9taXVtIE9TMSEwHwYDVQQDExhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwHhcNMTgxMjA4MDExOTQwWhcNMjgxMjA1MDExOTQwWjCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwg5hvVH6fJSBNji7ynBl1SQzWceL5P3ul6RcB-1s5wXqzXlIHiyRqBdj4hj2pLzpKJGmXWnerIwJOkdsFg7IwZpA4xHE1F-M8XlpuuUn_Xdfccef36ddZEUH6QLwNm96T89F4ujt0omJ-0GV37vBsxEY-hwR3O8XBgyx8TvvYxNnVyTgi19qQdb2ES8-yWJkebdzgugcmNf9K-55fnEiyxWtrvEQb2sowWIS3-b1I_BP85pW2pldh9yQWfb3OY2NJhGSbQSnLi3J0IhRXROEtAXCU4MLTq2cHOpGX0DtJP_g_jD1pnC1O6CCZgVycK4DgZXeDzOG_2Uimhr0y1rcewIDAQABo4HxMIHuMB0GA1UdDgQWBBQEqlpkrYWCzJe69eMUdF1byztBmzCBvgYDVR0jBIG2MIGzgBQEqlpkrYWCzJe69eMUdF1byztBm6GBj6SBjDCBiTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC0dvb2dsZSBMTEMuMRQwEgYDVQQLEwtDaHJvbWl1bSBPUzEhMB8GA1UEAxMYVUVGSSBLZXkgRXhjaGFuZ2UgS2V5IHYxggkA7ObfHPvVW7owDAYDVR0TBAUwAwEB_zANBgkqhkiG9w0BAQsFAAOCAQEAWsd3mq0dADTD7Tx2uYcDeJcJHO0x91hO26p2cqUSox4wPgc4_xk5yiteMgDB5CWLwgcuneDAYYMO1PmktpEvLu9a82gCGxGiww-w78OJTOrs68VM1zB0jqA3X5EyVSwVJqi8idgrnnGsJAcSBosnUI8pNi9SDC3MRPE1q1EUjuDNjsE7t_ItBe-MSMWCH2hpG8unZ7uwWCRfAV3Fkdnq_S5HzDy6-kKyGdj-rprhVeDz2xSyMOlNIJig4uuqU166DTfoQA2TxnMG_TuHt69Z4uZcVwx_HwPs2-vUCCYqZDwuuHKNIEm8kIK8sSPSsp22sC8h-7Klb8wj_d0lzShgkg==",
                                "fileType": "X509"
                            },
                            {
                                "content": "MIID0zCCArugAwIBAgIJANuXsNG_1HHxMA0GCSqGSIb3DQEBCwUAMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRYwFAYDVQQHDA1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKDAtHb29nbGUgTExDLjEUMBIGA1UECwwLQ2hyb21pdW0gT1MxFzAVBgNVBAMMDlVFRkkgREIgS2V5IHYxMCAXDTE4MDQyNzE1MDYzN1oYDzIyMTgwMzEwMTUwNjM3WjB_MQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMRcwFQYDVQQDDA5VRUZJIERCIEtleSB2MTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALWzFg8obysKXCjnbBTpAM8dMFC2pHX7GpwESNG-FYQI218Y1Ao1p5BttGqPoU5lGNeYUXxgxIqfN18ALHH10gRCRfqbC54faPU1lMr0e0jvi67GgGztyLl4ltAgK7HHTHmtZwghYNS45pKz_LFGm-TlKg-HPZBFT9GtbjRZe5IS2xdKkWM_sPA8qXwzvqmLN3OQckf0KchSUQmB3-wh4vYFV2TEjz10oR0FZO8LFFOOeooukcRDYy219XrdM21APnfszHmfKhzAFddOcYdwKwOL-w9TKVUwCIM70GL_YOtywA17mQkEm0ON79oyQ0daDlZ0ngDxC8xUIASYsRRPOkkCAwEAAaNQME4wHQYDVR0OBBYEFFO6MYgG9CvYp6qAqn_Jm-MANGpvMB8GA1UdIwQYMBaAFFO6MYgG9CvYp6qAqn_Jm-MANGpvMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAIGyOB_3oFo6f3WoFrdBzimb_weH8hejtCggpcL-8Wdex9VRl5MKi_1GlGbietMDsr1alwdaagam9RafuIQplohTSBnQrU-u-LbtRlCF9C25GDQ70S0QlxAQmt41Sc7kSFTPm6BHauF3b_Raf9AX30MamptoXoAhgMnHAitCn6yCOsRJ_d1t04lqsiqefhf26xItvRnkuxG7-IQnbyGFCGPcjFNAE1thLpL_6y_dprVwTLsvZnsWYj-1Gg1yUkOnCN8Kl3Q3RDVqo98mORUc0bKB-B8_FQsbtmzbb-29nXQJW1FJx0ejqJyDGGBPHAGpwEJTVB3mwWXzBU6Ny7T3dlk=",
                                "fileType": "X509"
                            },
                            {
                                "content": "MIID6TCCAtGgAwIBAgIJAKgdcZ45rGMDMA0GCSqGSIb3DQEBCwUAMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwIBcNMTgwNDI3MTUwNjM3WhgPMjIxODAzMTAxNTA2MzdaMIGJMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzEUMBIGA1UECgwLR29vZ2xlIExMQy4xFDASBgNVBAsMC0Nocm9taXVtIE9TMSEwHwYDVQQDDBhVRUZJIEtleSBFeGNoYW5nZSBLZXkgdjEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCbIdHPMQZZU68jI5kz5rmwvo-DQZZJ5amRnAUnBpNllhNQB6TaLUS_D9TIo_0X1e8T21Xk4Pf3D5ckbuQxsJzQ5OVEOb59sJ9AhjVUoxQxuVW-iBzD0mWbxKf2cASy2YRIEcaAAI5QT2SwO8gZy_G8LwAk-vO0vIbynN0WuFLl1Dp2cMQ3CxLSPH-QPSZyGd6o6ewUU9JzboppujXpk43EQH5ZJE_wJb_ujUFWcFzKHb_EkV1hI1TmBJ1-vR2kao4_1hQO6k1zLUR-MyBHY0SRU2OQxBpSez-qt7oItMBc1EanXvq9tqx0ndCTmXQYQplT5wtkPbE9sd5zwbDt8btHAgMBAAGjUDBOMB0GA1UdDgQWBBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAfBgNVHSMEGDAWgBS5Tmmv3JM8w1mfP9V5xAIdjBhb7TAMBgNVHRMEBTADAQH_MA0GCSqGSIb3DQEBCwUAA4IBAQB9BRTP37ik4jF2BmJJspMA6NHS7mxIckFCYKl-TO8zGFd3mlA6dnEw5WY-tUcBNJpAaHNJV_rzagGPpWMIoy-nAaLSSpnyhEXYTnQvzejYRijN3N0V9tmM0qgViHNBqTxdfcwlst5OUesGHPqgBOt5RRu5OGJ0rkuymWwxHOKIw43hz5FW7vhumbtJ3iy8HSFQIjSYMkr0sOzJhmvnHlpZ4pOoPNyNA9DM6smriH-2-MnJFM9w8bg6zsV5X-6KL464_FuXL_X_IWmAsAbi8Ge8ZMJjEaDrF1qkD4aLvu0MshzEdvrvQO-3Gn3Lmi_RYKR0HKZp7jXTySj76sxt9QK4",
                                "fileType": "X509"
                            }
                        ]
                    },
                    "kind": "compute#attachedDisk"
                }
            ],
            "metadata": {
                "fingerprint": "loiIWWbgY0A=",
                "items": [
                    {
                        "key": "instance-template",
                        "value": "projects/556062258574/global/instanceTemplates/gke-kuber-2-node-cluster-2-3a4d0670"
                    },
                    {
                        "key": "created-by",
                        "value": "projects/556062258574/zones/us-central1-a/instanceGroupManagers/gke-kuber-2-node-cluster-2-3a4d0670-grp"
                    },
                    {
                        "key": "serial-port-logging-enable",
                        "value": "true"
                    },
                    {
                        "key": "kube-labels",
                        "value": "cloud.google.com/gke-boot-disk=pd-standard,cloud.google.com/gke-container-runtime=containerd,cloud.google.com/gke-nodepool=node-cluster-2,cloud.google.com/gke-os-distribution=cos,cloud.google.com/gke-preemptible=true,cloud.google.com/machine-family=e2"
                    },
                    {
                        "key": "google-compute-enable-pcid",
                        "value": "true"
                    },
                    {
                        "key": "enable-oslogin",
                        "value": "false"
                    },
                    {
                        "key": "kubelet-config",
                        "value": "apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    enabled: true\n  x509:\n    clientCAFile: /etc/srv/kubernetes/pki/ca-certificates.crt\nauthorization:\n  mode: Webhook\ncgroupRoot: /\nclusterDNS:\n- 10.89.32.10\nclusterDomain: cluster.local\nenableDebuggingHandlers: true\nevictionHard:\n  memory.available: 100Mi\n  nodefs.available: 10%\n  nodefs.inodesFree: 5%\n  pid.available: 10%\nfeatureGates:\n  DynamicKubeletConfig: false\n  ExecProbeTimeout: false\n  GracefulNodeShutdown: true\n  RotateKubeletServerCertificate: true\nkernelMemcgNotification: true\nkind: KubeletConfiguration\nkubeReserved:\n  cpu: 1060m\n  ephemeral-storage: 15Gi\n  memory: 1019Mi\nreadOnlyPort: 10255\nserverTLSBootstrap: true\nshutdownGracePeriod: 30s\nshutdownGracePeriodCriticalPods: 5s\nstaticPodPath: /etc/kubernetes/manifests\n"
                    },
                    {
                        "key": "cluster-name",
                        "value": "kuber-2"
                    },
                    {
                        "key": "kubeconfig",
                        "value": "apiVersion: v1\nkind: Config\nclusters:\n- cluster:\n    server: https://35.224.39.25\n    certificate-authority: '/etc/srv/kubernetes/pki/ca-certificates.crt'\n  name: default-cluster\ncontexts:\n- context:\n    cluster: default-cluster\n    namespace: default\n    user: exec-plugin-auth\n  name: default-context\ncurrent-context: default-context\nusers:\n- name: exec-plugin-auth\n  user:\n    exec:\n      apiVersion: \"client.authentication.k8s.io/v1alpha1\"\n      command: '/home/kubernetes/bin/gke-exec-auth-plugin'\n      args: [\"--cache-dir\", '/var/lib/kubelet/pki/']\n"
                    },
                    {
                        "key": "gci-update-strategy",
                        "value": "update_disabled"
                    },
                    {
                        "key": "gci-metrics-enabled",
                        "value": "true"
                    },
                    {
                        "key": "configure-sh",
                        "value": "#!/usr/bin/env bash\n\n# Copyright 2016 The Kubernetes Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Due to the GCE custom metadata size limit, we split the entire script into two\n# files configure.sh and configure-helper.sh. The functionality of downloading\n# kubernetes configuration, manifests, docker images, and binary files are\n# put in configure.sh, which is uploaded via GCE custom metadata.\n\nset -o errexit\nset -o nounset\nset -o pipefail\n\n### Hardcoded constants\nDEFAULT_CNI_VERSION=\"v0.8.7\"\nDEFAULT_CNI_HASH=\"8f2cbee3b5f94d59f919054dccfe99a8e3db5473b553d91da8af4763e811138533e05df4dbeab16b3f774852b4184a7994968f5e036a3f531ad1ac4620d10ede\"\n# when NPD version has a conflicts with OSS one, use GoB version\nDEFAULT_NPD_VERSION=\"v0.8.7\"\nDEFAULT_NPD_HASH=\"853576423077bf72e7bd8e96cd782cf272f7391379f8121650c1448531c0d3a0991dfbd0784a1157423976026806ceb14ca8fb35bac1249127dbf00af45b7eea\"\nDEFAULT_CRICTL_VERSION=\"v1.19.0\"\nDEFAULT_CRICTL_HASH=\"fbbb34a1667bcf94df911a92ab6b70a9d2b34da967244a222f288bf0135c587cbfdcc89deedc5afd1823e109921df9caaa4e9ff9cc39e55a9b8cdea8eb6ebe72\"\nDEFAULT_MOUNTER_TAR_SHA=\"7956fd42523de6b3107ddc3ce0e75233d2fcb78436ff07a1389b6eaac91fb2b1b72a08f7a219eaf96ba1ca4da8d45271002e0d60e0644e796c665f99bb356516\"\n###\n\n### Hardcoded ENABLE_LATEST_NPD, remove it when in OSS DEFAULT_NPD_VERSION is greater then v0.8.7\nENABLE_LATEST_NPD=\"true\"\n\n# Standard curl flags.\nCURL_FLAGS='--fail --silent --show-error --retry 5 --retry-delay 3 --connect-timeout 10 --retry-connrefused'\n\nfunction set-broken-motd {\n  cat > /etc/motd <<EOF\nBroken (or in progress) Kubernetes node setup! Check the cluster initialization status\nusing the following commands.\n\nMaster instance:\n  - sudo systemctl status kube-master-installation\n  - sudo systemctl status kube-master-configuration\n\nNode instance:\n  - sudo systemctl status kube-node-installation\n  - sudo systemctl status kube-node-configuration\nEOF\n}\n\n# A function that fetches a GCE metadata value and echoes it out.\n# Args:\n#   $1 : URL path after /computeMetadata/v1/ (without heading slash).\n#   $2 : An optional default value to echo out if the fetch fails.\n#\n# NOTE: this function is duplicated in configure-helper.sh, any changes here\n# should be duplicated there as well.\nfunction get-metadata-value {\n  local default=\"${2:-}\"\n\n  local status\n  curl ${CURL_FLAGS} \\\n    -H 'Metadata-Flavor: Google' \\\n    \"http://metadata/computeMetadata/v1/${1}\" \\\n  || status=\"$?\"\n  status=\"${status:-0}\"\n\n  if [[ \"${status}\" -eq 0 || -z \"${default}\" ]]; then\n    return \"${status}\"\n  else\n    echo \"${default}\"\n  fi\n}\n\n# A function to fetch kube-env from GCE metadata server\n# or using hurl on the master if available\nfunction download-kube-env {\n  (\n    umask 077\n\n    local kube_env_path=\"/tmp/kube-env.yaml\"\n    if [[ \"$(is-master)\" == \"true\" && $(use-hurl) = \"true\" ]]; then\n      local kube_env_path=\"${KUBE_HOME}/kube-env.yaml\"\n      download-kube-env-hurl \"${kube_env_path}\"\n    else\n      local meta_path=\"http://metadata.google.internal/computeMetadata/v1/instance/attributes/kube-env\"\n      echo \"Downloading kube-env via GCE metadata from ${meta_path} to ${kube_env_path}\"\n      retry-forever 10 curl ${CURL_FLAGS} \\\n        -H \"X-Google-Metadata-Request: True\" \\\n        -o \"${kube_env_path}\" \\\n        \"${meta_path}\"\n    fi\n\n    # Convert the yaml format file into a shell-style file.\n    eval $(${PYTHON} -c '''\nimport pipes,sys,yaml\n# check version of python and call methods appropriate for that version\nif sys.version_info[0] < 3:\n    items = yaml.load(sys.stdin).iteritems()\nelse:\n    items = yaml.load(sys.stdin, Loader=yaml.BaseLoader).items()\nfor k, v in items:\n    print(\"readonly {var}={value}\".format(var=k, value=pipes.quote(str(v))))\n''' < \"${kube_env_path}\" > \"${KUBE_HOME}/kube-env\")\n\n    # Leave kube-env if we are a master\n    if [[ \"$(is-master)\" != \"true\" ]]; then\n      rm -f \"${kube_env_path}\"\n    fi\n  )\n}\n\n# A function to pull kube-env from HMS using hurl\nfunction download-kube-env-hurl {\n  local -r kube_env_path=\"$1\"\n  local -r endpoint=$(get-metadata-value \"instance/attributes/gke-api-endpoint\")\n  local -r kube_env_hms_path=$(get-metadata-value \"instance/attributes/kube-env-path\")\n\n  echo \"Downloading kube-env via hurl from ${kube_env_hms_path} to ${kube_env_path}\"\n  retry-forever 30 ${KUBE_HOME}/bin/hurl --hms_address $endpoint \\\n    --dst \"${kube_env_path}\" \\\n    \"${kube_env_hms_path}\"\n  chmod 600 \"${kube_env_path}\"\n}\n\nfunction download-kubelet-config {\n  local -r dest=\"$1\"\n  echo \"Downloading Kubelet config file, if it exists\"\n  # Fetch kubelet config file from GCE metadata server.\n  (\n    umask 077\n    local -r tmp_kubelet_config=\"/tmp/kubelet-config.yaml\"\n    retry-forever 10 curl ${CURL_FLAGS} \\\n      -H \"X-Google-Metadata-Request: True\" \\\n      -o \"${tmp_kubelet_config}\" \\\n      http://metadata.google.internal/computeMetadata/v1/instance/attributes/kubelet-config\n    # only write to the final location if curl succeeds\n    mv \"${tmp_kubelet_config}\" \"${dest}\"\n  )\n}\n\nfunction download-kube-master-certs {\n  # Fetch kube-master-certs from GCE metadata server.\n  (\n    umask 077\n    local -r tmp_kube_master_certs=\"/tmp/kube-master-certs.yaml\"\n    retry-forever 10 curl ${CURL_FLAGS} \\\n      -H \"X-Google-Metadata-Request: True\" \\\n      -o \"${tmp_kube_master_certs}\" \\\n      http://metadata.google.internal/computeMetadata/v1/instance/attributes/kube-master-certs\n    # Convert the yaml format file into a shell-style file.\n    eval $(${PYTHON} -c '''\nimport pipes,sys,yaml\n# check version of python and call methods appropriate for that version\nif sys.version_info[0] < 3:\n    items = yaml.load(sys.stdin).iteritems()\nelse:\n    items = yaml.load(sys.stdin, Loader=yaml.BaseLoader).items()\nfor k, v in items:\n    print(\"readonly {var}={value}\".format(var=k, value=pipes.quote(str(v))))\n''' < \"${tmp_kube_master_certs}\" > \"${KUBE_HOME}/kube-master-certs\")\n    rm -f \"${tmp_kube_master_certs}\"\n  )\n}\n\nfunction validate-hash {\n  local -r file=\"$1\"\n  local -r expected=\"$2\"\n\n  actual_sha1=$(sha1sum \"${file}\" | awk '{ print $1 }') || true\n  actual_sha512=$(sha512sum \"${file}\" | awk '{ print $1 }') || true\n  if [[ \"${actual_sha1}\" != \"${expected}\" ]] && [[ \"${actual_sha512}\" != \"${expected}\" ]]; then\n    echo \"== ${file} corrupted, sha1 ${actual_sha1}/sha512 ${actual_sha512} doesn't match expected ${expected} ==\"\n    return 1\n  fi\n}\n\n# Get default service account credentials of the VM.\nGCE_METADATA_INTERNAL=\"http://metadata.google.internal/computeMetadata/v1/instance\"\nfunction get-credentials {\n  curl ${CURL_FLAGS} \\\n    -H \"Metadata-Flavor: Google\" \\\n    \"${GCE_METADATA_INTERNAL}/service-accounts/default/token\" \\\n  | ${PYTHON} -c 'import sys; import json; print(json.loads(sys.stdin.read())[\"access_token\"])'\n}\n\nfunction valid-storage-scope {\n  curl ${CURL_FLAGS} \\\n    -H \"Metadata-Flavor: Google\" \\\n    \"${GCE_METADATA_INTERNAL}/service-accounts/default/scopes\" \\\n  | grep -E \"auth/devstorage|auth/cloud-platform\"\n}\n\n# Determine if this node is a master using metadata\nfunction is-master {\n  local -r is_master_val=$(get-metadata-value \"instance/attributes/is-master-node\")\n\n  local result=\"false\"\n  if [[ ${is_master_val:-} == \"true\" ]]; then\n    result=\"true\"\n  fi\n  echo $result\n}\n\n# A function that returns \"true\" if hurl should be used, \"false\" otherwise.\nfunction use-hurl {\n  local -r enable_hms_read=$(get-metadata-value \"instance/attributes/enable_hms_read\")\n  local result=\"false\"\n\n  if [[ -f \"${KUBE_HOME}/bin/hurl\" && \"${enable_hms_read}\" == \"true\" ]]; then\n    result=\"true\"\n  fi\n  echo $result\n}\n\n# Retry a download until we get it. Takes a hash and a set of URLs.\n#\n# $1 is the sha512/sha1 hash of the URL. Can be \"\" if the sha512/sha1 hash is unknown.\n# $2+ are the URLs to download.\nfunction download-or-bust {\n  local -r hash=\"$1\"\n  shift 1\n\n  local -r urls=( $* )\n  while true; do\n    for url in \"${urls[@]}\"; do\n      local file=\"${url##*/}\"\n      rm -f \"${file}\"\n      # if the url belongs to GCS API we should use oauth2_token in the headers\n      local curl_headers=\"\"\n      if [[ \"$url\" =~ ^https://storage.googleapis.com.* ]] && valid-storage-scope ; then\n        curl_headers=\"Authorization: Bearer $(get-credentials)\"\n      fi\n      if ! curl ${curl_headers:+-H \"${curl_headers}\"} -f --ipv4 -Lo \"${file}\" --connect-timeout 20 --max-time 300 --retry 6 --retry-delay 10 --retry-connrefused \"${url}\"; then\n        echo \"== Failed to download ${url}. Retrying. ==\"\n      elif [[ -n \"${hash}\" ]] && ! validate-hash \"${file}\" \"${hash}\"; then\n        # TODO(b/153659289): Evaluate re-enabling retry.\n        echo \"== Downloaded ${url} but hash validation failed (ignoring). ==\"\n        return\n      else\n        if [[ -n \"${hash}\" ]]; then\n          echo \"== Downloaded ${url} (HASH = ${hash}) ==\"\n        else\n          echo \"== Downloaded ${url} ==\"\n        fi\n        return\n      fi\n    done\n  done\n}\n\nfunction is-preloaded {\n  local -r key=$1\n  local -r value=$2\n  grep -qs \"${key},${value}\" \"${KUBE_HOME}/preload_info\"\n}\n\nfunction split-commas {\n  echo $1 | tr \",\" \"\\n\"\n}\n\nfunction remount-flexvolume-directory {\n  local -r flexvolume_plugin_dir=$1\n  mkdir -p $flexvolume_plugin_dir\n  mount --bind $flexvolume_plugin_dir $flexvolume_plugin_dir\n  mount -o remount,exec $flexvolume_plugin_dir\n}\n\nfunction install-gci-mounter-tools {\n  CONTAINERIZED_MOUNTER_HOME=\"${KUBE_HOME}/containerized_mounter\"\n  local -r mounter_tar_sha=\"${DEFAULT_MOUNTER_TAR_SHA}\"\n  if is-preloaded \"mounter\" \"${mounter_tar_sha}\"; then\n    echo \"mounter is preloaded.\"\n    return\n  fi\n\n  echo \"Downloading gci mounter tools.\"\n  mkdir -p \"${CONTAINERIZED_MOUNTER_HOME}\"\n  chmod a+x \"${CONTAINERIZED_MOUNTER_HOME}\"\n  mkdir -p \"${CONTAINERIZED_MOUNTER_HOME}/rootfs\"\n  download-or-bust \"${mounter_tar_sha}\" \"https://storage.googleapis.com/kubernetes-release/gci-mounter/mounter.tar\"\n  cp \"${KUBE_HOME}/kubernetes/server/bin/mounter\" \"${CONTAINERIZED_MOUNTER_HOME}/mounter\"\n  chmod a+x \"${CONTAINERIZED_MOUNTER_HOME}/mounter\"\n  mv \"${KUBE_HOME}/mounter.tar\" /tmp/mounter.tar\n  tar xf /tmp/mounter.tar -C \"${CONTAINERIZED_MOUNTER_HOME}/rootfs\"\n  rm /tmp/mounter.tar\n  mkdir -p \"${CONTAINERIZED_MOUNTER_HOME}/rootfs/var/lib/kubelet\"\n}\n\n# Install node problem detector binary.\nfunction install-node-problem-detector {\n\n  local -r npd_version=\"${DEFAULT_NPD_VERSION}\"\n  local -r npd_hash=\"${DEFAULT_NPD_HASH}\"\n\n  local -r npd_tar=\"node-problem-detector-${npd_version}.tar.gz\"\n\n  if is-preloaded \"${npd_tar}\" \"${npd_hash}\"; then\n    echo \"${npd_tar} is preloaded.\"\n    return\n  fi\n\n  echo \"Downloading ${npd_tar}.\"\n  local -r npd_release_path=\"https://storage.googleapis.com/kubernetes-release\"\n  download-or-bust \"${npd_hash}\" \"${npd_release_path}/node-problem-detector/${npd_tar}\"\n  local -r npd_dir=\"${KUBE_HOME}/node-problem-detector\"\n  mkdir -p \"${npd_dir}\"\n  tar xzf \"${KUBE_HOME}/${npd_tar}\" -C \"${npd_dir}\" --overwrite\n  mv \"${npd_dir}/bin\"/* \"${KUBE_BIN}\"\n  chmod a+x \"${KUBE_BIN}/node-problem-detector\"\n  rmdir \"${npd_dir}/bin\"\n  rm -f \"${KUBE_HOME}/${npd_tar}\"\n}\n\nfunction install-cni-binaries {\n  if [[ -n \"${CNI_VERSION:-}\" ]]; then\n      local -r cni_version=\"${CNI_VERSION}\"\n      local -r cni_hash=\"${CNI_HASH}\"\n  else\n      local -r cni_version=\"${DEFAULT_CNI_VERSION}\"\n      local -r cni_hash=\"${DEFAULT_CNI_HASH}\"\n  fi\n\n  local -r cni_tar=\"${CNI_TAR_PREFIX}${cni_version}.tgz\"\n  local -r cni_url=\"${CNI_STORAGE_URL_BASE:-https://storage.googleapis.com/gke-release/cni-plugins}/${cni_version}/${cni_tar}\"\n\n  if is-preloaded \"${cni_tar}\" \"${cni_hash}\"; then\n    echo \"${cni_tar} is preloaded.\"\n    return\n  fi\n\n  echo \"Downloading cni binaries\"\n  download-or-bust \"${cni_hash}\" \"${cni_url}\"\n  local -r cni_dir=\"${KUBE_HOME}/cni\"\n  mkdir -p \"${cni_dir}/bin\"\n  tar xzf \"${KUBE_HOME}/${cni_tar}\" -C \"${cni_dir}/bin\" --overwrite\n  mv \"${cni_dir}/bin\"/* \"${KUBE_BIN}\"\n  rmdir \"${cni_dir}/bin\"\n  rm -f \"${KUBE_HOME}/${cni_tar}\"\n}\n\n# Install crictl binary.\nfunction install-crictl {\n  if [[ -n \"${CRICTL_VERSION:-}\" ]]; then\n    local -r crictl_version=\"${CRICTL_VERSION}\"\n    local -r crictl_hash=\"${CRICTL_TAR_HASH}\"\n  else\n    local -r crictl_version=\"${DEFAULT_CRICTL_VERSION}\"\n    local -r crictl_hash=\"${DEFAULT_CRICTL_HASH}\"\n  fi\n  local -r crictl=\"crictl-${crictl_version}-linux-amd64.tar.gz\"\n\n  # Create crictl config file.\n  cat > /etc/crictl.yaml <<EOF\nruntime-endpoint: ${CONTAINER_RUNTIME_ENDPOINT:-unix:///var/run/dockershim.sock}\nEOF\n\n  if is-preloaded \"${crictl}\" \"${crictl_hash}\"; then\n    echo \"crictl is preloaded\"\n    return\n  fi\n\n  echo \"Downloading crictl\"\n  local -r crictl_path=\"https://storage.googleapis.com/k8s-artifacts-cri-tools/release/${crictl_version}\"\n  download-or-bust \"${crictl_hash}\" \"${crictl_path}/${crictl}\"\n  tar xf \"${crictl}\"\n  mv crictl \"${KUBE_BIN}/crictl\"\n}\n\nfunction install-exec-auth-plugin {\n  if [[ ! \"${EXEC_AUTH_PLUGIN_URL:-}\" ]]; then\n      return\n  fi\n  local -r plugin_url=\"${EXEC_AUTH_PLUGIN_URL}\"\n  local -r plugin_hash=\"${EXEC_AUTH_PLUGIN_HASH}\"\n\n  if is-preloaded \"gke-exec-auth-plugin\" \"${plugin_hash}\"; then\n    echo \"gke-exec-auth-plugin is preloaded\"\n    return\n  fi\n\n  echo \"Downloading gke-exec-auth-plugin binary\"\n  download-or-bust \"${plugin_hash}\" \"${plugin_url}\"\n  mv \"${KUBE_HOME}/gke-exec-auth-plugin\" \"${KUBE_BIN}/gke-exec-auth-plugin\"\n  chmod a+x \"${KUBE_BIN}/gke-exec-auth-plugin\"\n\n  if [[ ! \"${EXEC_AUTH_PLUGIN_LICENSE_URL:-}\" ]]; then\n      return\n  fi\n  local -r license_url=\"${EXEC_AUTH_PLUGIN_LICENSE_URL}\"\n  echo \"Downloading gke-exec-auth-plugin license\"\n  download-or-bust \"\" \"${license_url}\"\n  mv \"${KUBE_HOME}/LICENSES/LICENSE\" \"${KUBE_BIN}/gke-exec-auth-plugin-license\"\n}\n\nfunction install-kube-manifests {\n  # Put kube-system pods manifests in ${KUBE_HOME}/kube-manifests/.\n  local dst_dir=\"${KUBE_HOME}/kube-manifests\"\n  mkdir -p \"${dst_dir}\"\n  local -r manifests_tar_urls=( $(split-commas \"${KUBE_MANIFESTS_TAR_URL}\") )\n  local -r manifests_tar=\"${manifests_tar_urls[0]##*/}\"\n  if [ -n \"${KUBE_MANIFESTS_TAR_HASH:-}\" ]; then\n    local -r manifests_tar_hash=\"${KUBE_MANIFESTS_TAR_HASH}\"\n  else\n    echo \"Downloading k8s manifests hash (not found in env)\"\n    download-or-bust \"\" \"${manifests_tar_urls[@]/.tar.gz/.tar.gz.sha512}\"\n    local -r manifests_tar_hash=$(cat \"${manifests_tar}.sha512\")\n  fi\n\n  if is-preloaded \"${manifests_tar}\" \"${manifests_tar_hash}\"; then\n    echo \"${manifests_tar} is preloaded.\"\n    return\n  fi\n\n  echo \"Downloading k8s manifests tar\"\n  download-or-bust \"${manifests_tar_hash}\" \"${manifests_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${manifests_tar}\" -C \"${dst_dir}\" --overwrite\n  local -r kube_addon_registry=\"${KUBE_ADDON_REGISTRY:-k8s.gcr.io}\"\n  if [[ \"${kube_addon_registry}\" != \"k8s.gcr.io\" ]]; then\n    find \"${dst_dir}\" -name \\*.yaml -or -name \\*.yaml.in | \\\n      xargs sed -ri \"s@(image:\\s.*)k8s.gcr.io@\\1${kube_addon_registry}@\"\n    find \"${dst_dir}\" -name \\*.manifest -or -name \\*.json | \\\n      xargs sed -ri \"s@(image\\\":\\s+\\\")k8s.gcr.io@\\1${kube_addon_registry}@\"\n  fi\n  cp \"${dst_dir}/kubernetes/gci-trusty/gci-configure-helper.sh\" \"${KUBE_BIN}/configure-helper.sh\"\n  cp \"${dst_dir}/kubernetes/gci-trusty/configure-kubeapiserver.sh\" \"${KUBE_BIN}/configure-kubeapiserver.sh\"\n  if [[ -e \"${dst_dir}/kubernetes/gci-trusty/gke-internal-configure.sh\" ]]; then\n    cp \"${dst_dir}/kubernetes/gci-trusty/gke-internal-configure.sh\" \"${KUBE_BIN}/\"\n  fi\n  if [[ -e \"${dst_dir}/kubernetes/gci-trusty/gke-internal-configure-helper.sh\" ]]; then\n    cp \"${dst_dir}/kubernetes/gci-trusty/gke-internal-configure-helper.sh\" \"${KUBE_BIN}/\"\n  fi\n  if [[ -e \"${dst_dir}/kubernetes/gci-trusty/node-registration-checker.sh\" ]]; then\n    cp \"${dst_dir}/kubernetes/gci-trusty/node-registration-checker.sh\" \"${KUBE_BIN}/\"\n  fi\n\n  cp \"${dst_dir}/kubernetes/gci-trusty/health-monitor.sh\" \"${KUBE_BIN}/health-monitor.sh\"\n\n  rm -f \"${KUBE_HOME}/${manifests_tar}\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}.sha512\"\n}\n\n# Installs hurl to ${KUBE_HOME}/bin/hurl if not already installed.\nfunction install-hurl {\n  cd \"${KUBE_HOME}\"\n  if [[ -f \"${KUBE_HOME}/bin/hurl\" ]]; then\n    echo \"install-hurl: hurl already installed\"\n    return\n  fi\n\n  local -r hurl_gcs_att=\"instance/attributes/hurl-gcs-url\"\n  local -r hurl_gcs_url=$(get-metadata-value \"${hurl_gcs_att}\")\n\n  if [[ -z \"${hurl_gcs_url}\" ]]; then\n    # URL not present in GCE Instance Metadata\n    echo \"install-hurl: Unable to find GCE metadata ${hurl_gcs_att}\"\n    return\n  fi\n\n  # Download hurl binary from a GCS bucket.\n  local -r hurl_bin=\"hurl\"\n  echo \"install-hurl: Installing hurl from ${hurl_gcs_url} ... \"\n  download-or-bust \"\" \"${hurl_gcs_url}\"\n  if [[ -f \"${KUBE_HOME}/${hurl_bin}\" ]]; then\n    chmod a+x ${KUBE_HOME}/${hurl_bin}\n    mv \"${KUBE_HOME}/${hurl_bin}\" \"${KUBE_BIN}/${hurl_bin}\"\n    echo \"install-hurl: hurl installed to ${KUBE_BIN}/${hurl_bin}\"\n    return\n  fi\n}\n\n# Installs inplace to ${KUBE_HOME}/bin/inplace if not already installed.\nfunction install-inplace {\n  cd \"${KUBE_HOME}\"\n  if [[ -f \"${KUBE_HOME}/bin/inplace\" ]]; then\n    echo \"install-inplace: inplace already installed\"\n    return\n  fi\n  local -r inplace_gcs_att=\"instance/attributes/inplace-gcs-url\"\n  local -r inplace_gcs_url=$(get-metadata-value \"${inplace_gcs_att}\")\n  if [[ -z \"${inplace_gcs_url}\" ]]; then\n    # URL not present in GCE Instance Metadata\n    echo \"install-inplace: Unable to find GCE metadata ${inplace_gcs_att}\"\n    return\n  fi\n  echo \"install-inplace: Installing inplace from ${inplace_gcs_url} ...\"\n  download-or-bust \"\" \"${inplace_gcs_url}\"\n  local -r inplace_bin=\"inplace\"\n  if [[ -f \"${KUBE_HOME}/${inplace_bin}\" ]]; then\n    mv \"${KUBE_HOME}/${inplace_bin}\" \"${KUBE_BIN}/${inplace_bin}\"\n    if [[ ! -d \"${KUBE_HOME}/${inplace_bin}\" ]]; then\n      mkdir -p \"${KUBE_HOME}/${inplace_bin}\"\n    fi\n    cat > \"${KUBE_HOME}/${inplace_bin}/inplace.hash\" <<EOF\n${inplace_gcs_url}\nEOF\n    echo \"install-inplace: inplace installed to ${KUBE_BIN}/${inplace_bin}\"\n    return\n  fi\n}\n\n# A function to download in-place component manifests if in-place agent is\n# present.\nfunction inplace-run-once {\n  if [[ -f \"${KUBE_HOME}/bin/inplace\" ]]; then\n    echo \"inplace-run-once: using inplace to download inplace component manifests\"\n    local dst_dir=\"${KUBE_HOME}/kube-manifests/kubernetes/gci-trusty\"\n    mkdir -p \"${dst_dir}/in-place\"\n    mkdir -p \"${dst_dir}/gce-extras/in-place\"\n    retry-forever 30 ${KUBE_HOME}/bin/inplace --mode=run-once --in_place_addon_path=\"${dst_dir}/gce-extras/in-place\" --master_pod_path=\"${dst_dir}/in-place\"\n  fi\n}\n\n# A helper function for loading a docker image. It keeps trying up to 5 times.\n#\n# $1: Full path of the docker image\nfunction try-load-docker-image {\n  local -r img=$1\n  echo \"Try to load docker image file ${img}\"\n  # Temporarily turn off errexit, because we don't want to exit on first failure.\n  set +e\n  local -r max_attempts=5\n  local -i attempt_num=1\n\n  if [[ \"${CONTAINER_RUNTIME_NAME:-}\" == \"docker\" ]]; then\n    load_image_command=${LOAD_IMAGE_COMMAND:-docker load -i}\n  elif [[ \"${CONTAINER_RUNTIME_NAME:-}\" == \"containerd\" || \"${CONTAINERD_TEST:-}\"  == \"containerd\" ]]; then\n    load_image_command=${LOAD_IMAGE_COMMAND:-ctr -n=k8s.io images import}\n  else\n    load_image_command=\"${LOAD_IMAGE_COMMAND:-}\"\n  fi\n\n  until timeout 30 ${load_image_command} \"${img}\"; do\n    if [[ \"${attempt_num}\" == \"${max_attempts}\" ]]; then\n      echo \"Fail to load docker image file ${img} using ${load_image_command} after ${max_attempts} retries. Exit!!\"\n      exit 1\n    else\n      attempt_num=$((attempt_num+1))\n      sleep 5\n    fi\n  done\n  # Re-enable errexit.\n  set -e\n}\n\n# Loads kube-system docker images. It is better to do it before starting kubelet,\n# as kubelet will restart docker daemon, which may interfere with loading images.\nfunction load-docker-images {\n  echo \"Start loading kube-system docker images\"\n  local -r img_dir=\"${KUBE_HOME}/kube-docker-files\"\n  if [[ \"${KUBERNETES_MASTER:-}\" == \"true\" ]]; then\n    try-load-docker-image \"${img_dir}/kube-apiserver.tar\"\n    try-load-docker-image \"${img_dir}/kube-controller-manager.tar\"\n    try-load-docker-image \"${img_dir}/kube-scheduler.tar\"\n  else\n    try-load-docker-image \"${img_dir}/kube-proxy.tar\"\n  fi\n}\n\n# If we are on ubuntu we can try to install docker\nfunction install-docker {\n  # bailout if we are not on ubuntu\n  if ! command -v apt-get >/dev/null 2>&1; then\n    echo \"Unable to automatically install docker. Bailing out...\"\n    return\n  fi\n  # Install Docker deps, some of these are already installed in the image but\n  # that's fine since they won't re-install and we can reuse the code below\n  # for another image someday.\n  apt-get update\n  apt-get install -y --no-install-recommends \\\n    apt-transport-https \\\n    ca-certificates \\\n    socat \\\n    curl \\\n    gnupg2 \\\n    software-properties-common \\\n    lsb-release\n\n  release=$(lsb_release -cs)\n\n  # Add the Docker apt-repository\n  curl ${CURL_FLAGS} \\\n    --location \\\n    \"https://download.docker.com/linux/$(. /etc/os-release; echo \"$ID\")/gpg\" \\\n  | apt-key add -\n  add-apt-repository \\\n    \"deb [arch=amd64] https://download.docker.com/linux/$(. /etc/os-release; echo \"$ID\") \\\n    $release stable\"\n\n  # Install Docker\n  apt-get update && \\\n    apt-get install -y --no-install-recommends ${GCI_DOCKER_VERSION:-\"docker-ce=5:19.03.*\"}\n  rm -rf /var/lib/apt/lists/*\n}\n\n# If we are on ubuntu we can try to install containerd\nfunction install-containerd-ubuntu {\n  # bailout if we are not on ubuntu\n  if [[ -z \"$(command -v lsb_release)\" || $(lsb_release -si) != \"Ubuntu\" ]]; then\n    echo \"Unable to automatically install containerd in non-ubuntu image. Bailing out...\"\n    exit 2\n  fi\n\n  if [[ $(dpkg --print-architecture) != \"amd64\" ]]; then\n    echo \"Unable to automatically install containerd in non-amd64 image. Bailing out...\"\n    exit 2\n  fi\n\n  # Install dependencies, some of these are already installed in the image but\n  # that's fine since they won't re-install and we can reuse the code below\n  # for another image someday.\n  apt-get update\n  apt-get install -y --no-install-recommends \\\n    apt-transport-https \\\n    ca-certificates \\\n    socat \\\n    curl \\\n    gnupg2 \\\n    software-properties-common \\\n    lsb-release\n\n  release=$(lsb_release -cs)\n\n  # Add the Docker apt-repository (as we install containerd from there)\n  curl ${CURL_FLAGS} \\\n    --location \\\n    \"https://download.docker.com/linux/$(. /etc/os-release; echo \"$ID\")/gpg\" \\\n  | apt-key add -\n  add-apt-repository \\\n    \"deb [arch=amd64] https://download.docker.com/linux/$(. /etc/os-release; echo \"$ID\") \\\n    $release stable\"\n\n  # Install containerd from Docker repo\n  apt-get update && \\\n    apt-get install -y --no-install-recommends containerd\n  rm -rf /var/lib/apt/lists/*\n\n  # Override to latest versions of containerd and runc\n  systemctl stop containerd\n  if [[ ! -z \"${UBUNTU_INSTALL_CONTAINERD_VERSION:-}\" ]]; then\n    # containerd versions have slightly different url(s), so try both\n    ( curl ${CURL_FLAGS} \\\n        --location \\\n        \"https://github.com/containerd/containerd/releases/download/${UBUNTU_INSTALL_CONTAINERD_VERSION}/containerd-${UBUNTU_INSTALL_CONTAINERD_VERSION:1}-linux-amd64.tar.gz\" \\\n      || curl ${CURL_FLAGS} \\\n        --location \\\n        \"https://github.com/containerd/containerd/releases/download/${UBUNTU_INSTALL_CONTAINERD_VERSION}/containerd-${UBUNTU_INSTALL_CONTAINERD_VERSION:1}.linux-amd64.tar.gz\" ) \\\n    | tar --overwrite -xzv -C /usr/\n  fi\n  if [[ -n \"${UBUNTU_INSTALL_RUNC_VERSION:-}\" ]]; then\n    curl ${CURL_FLAGS} \\\n      --location \\\n      \"https://github.com/opencontainers/runc/releases/download/${UBUNTU_INSTALL_RUNC_VERSION}/runc.amd64\" --output /usr/sbin/runc \\\n    && chmod 755 /usr/sbin/runc\n  fi\n  sudo systemctl start containerd\n}\n\nfunction ensure-container-runtime {\n  container_runtime=\"${CONTAINER_RUNTIME:-docker}\"\n  if [[ \"${container_runtime}\" == \"docker\" ]]; then\n    if ! command -v docker >/dev/null 2>&1; then\n      install-docker\n      if ! command -v docker >/dev/null 2>&1; then\n        echo \"ERROR docker not found. Aborting.\"\n        exit 2\n      fi\n    fi\n    docker version\n  elif [[ \"${container_runtime}\" == \"containerd\" ]]; then\n    # Install containerd/runc if requested\n    if [[ ! -z \"${UBUNTU_INSTALL_CONTAINERD_VERSION:-}\" || ! -z \"${UBUNTU_INSTALL_RUNC_VERSION:-}\" ]]; then\n      install-containerd-ubuntu\n    fi\n    # Verify presence and print versions of ctr, containerd, runc\n    if ! command -v ctr >/dev/null 2>&1; then\n      echo \"ERROR ctr not found. Aborting.\"\n      exit 2\n    fi\n    ctr --version\n\n    if ! command -v containerd >/dev/null 2>&1; then\n      echo \"ERROR containerd not found. Aborting.\"\n      exit 2\n    fi\n    containerd --version\n\n    if ! command -v runc >/dev/null 2>&1; then\n      echo \"ERROR runc not found. Aborting.\"\n      exit 2\n    fi\n    runc --version\n  fi\n}\n\n# Downloads kubernetes binaries and kube-system manifest tarball, unpacks them,\n# and places them into suitable directories. Files are placed in /home/kubernetes.\nfunction install-kube-binary-config {\n  cd \"${KUBE_HOME}\"\n  local -r server_binary_tar_urls=( $(split-commas \"${SERVER_BINARY_TAR_URL}\") )\n  local -r server_binary_tar=\"${server_binary_tar_urls[0]##*/}\"\n  if [[ -n \"${SERVER_BINARY_TAR_HASH:-}\" ]]; then\n    local -r server_binary_tar_hash=\"${SERVER_BINARY_TAR_HASH}\"\n  else\n    echo \"Downloading binary release sha512 (not found in env)\"\n    download-or-bust \"\" \"${server_binary_tar_urls[@]/.tar.gz/.tar.gz.sha512}\"\n    local -r server_binary_tar_hash=$(cat \"${server_binary_tar}.sha512\")\n  fi\n\n  if is-preloaded \"${server_binary_tar}\" \"${server_binary_tar_hash}\"; then\n    echo \"${server_binary_tar} is preloaded.\"\n  else\n    echo \"Downloading binary release tar\"\n    download-or-bust \"${server_binary_tar_hash}\" \"${server_binary_tar_urls[@]}\"\n    tar xzf \"${KUBE_HOME}/${server_binary_tar}\" -C \"${KUBE_HOME}\" --overwrite\n    # Copy docker_tag and image files to ${KUBE_HOME}/kube-docker-files.\n    local -r src_dir=\"${KUBE_HOME}/kubernetes/server/bin\"\n    local dst_dir=\"${KUBE_HOME}/kube-docker-files\"\n    mkdir -p \"${dst_dir}\"\n    cp \"${src_dir}/\"*.docker_tag \"${dst_dir}\"\n    if [[ \"${KUBERNETES_MASTER:-}\" == \"false\" ]]; then\n      cp \"${src_dir}/kube-proxy.tar\" \"${dst_dir}\"\n    else\n      cp \"${src_dir}/kube-apiserver.tar\" \"${dst_dir}\"\n      cp \"${src_dir}/kube-controller-manager.tar\" \"${dst_dir}\"\n      cp \"${src_dir}/kube-scheduler.tar\" \"${dst_dir}\"\n      cp -r \"${KUBE_HOME}/kubernetes/addons\" \"${dst_dir}\"\n    fi\n    load-docker-images\n    mv \"${src_dir}/kubelet\" \"${KUBE_BIN}\"\n    mv \"${src_dir}/kubectl\" \"${KUBE_BIN}\"\n\n    # Some older images have LICENSES baked-in as a file. Presumably they will\n    # have the directory baked-in eventually.\n    rm -rf \"${KUBE_HOME}\"/LICENSES\n    mv \"${KUBE_HOME}/kubernetes/LICENSES\" \"${KUBE_HOME}\"\n    mv \"${KUBE_HOME}/kubernetes/kubernetes-src.tar.gz\" \"${KUBE_HOME}\"\n  fi\n\n  if [[ \"${NETWORK_PROVIDER:-}\" == \"kubenet\" ]] || \\\n     [[ \"${NETWORK_PROVIDER:-}\" == \"cni\" ]]; then\n    install-cni-binaries\n  fi\n\n  # Put kube-system pods manifests in ${KUBE_HOME}/kube-manifests/.\n  install-kube-manifests\n  chmod -R 755 \"${KUBE_BIN}\"\n\n  # Install gci mounter related artifacts to allow mounting storage volumes in GCI\n  install-gci-mounter-tools\n\n  # Remount the Flexvolume directory with the \"exec\" option, if needed.\n  if [[ \"${REMOUNT_VOLUME_PLUGIN_DIR:-}\" == \"true\" && -n \"${VOLUME_PLUGIN_DIR:-}\" ]]; then\n    remount-flexvolume-directory \"${VOLUME_PLUGIN_DIR}\"\n  fi\n\n  # Install crictl on each node.\n  install-crictl\n\n  # TODO(awly): include the binary and license in the OS image.\n  install-exec-auth-plugin\n\n  # Source GKE specific scripts.\n  #\n  # This must be done after install-kube-manifests where the\n  # gke-internal-configure.sh is downloaded.\n  if [[ -e \"${KUBE_HOME}/bin/gke-internal-configure.sh\" ]]; then\n    echo \"Running GKE internal configuration script gke-internal-configure.sh\"\n    . \"${KUBE_HOME}/bin/gke-internal-configure.sh\"\n  fi\n\n  if [[ \"${KUBERNETES_MASTER:-}\" == \"false\" ]] && \\\n     [[ \"${ENABLE_NODE_PROBLEM_DETECTOR:-}\" == \"standalone\" ]]; then\n    install-node-problem-detector\n    if [[ -e \"${KUBE_HOME}/bin/gke-internal-configure.sh\" ]]; then\n      install-npd-custom-plugins\n    fi\n  fi\n\n  # Clean up.\n  rm -rf \"${KUBE_HOME}/kubernetes\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}.sha512\"\n}\n\n# Retries a command forever with a delay between retries.\n# Args:\n#   $1    : delay between retries, in seconds.\n#   $2... : the command to run.\nfunction retry-forever {\n  local -r delay=\"$1\"\n  shift 1\n\n  until \"$@\"; do\n    echo \"== $* failed, retrying after ${delay}s\"\n    sleep \"${delay}\"\n  done\n}\n\n# Initializes variables used by the log-* functions.\n#\n# get-metadata-value must be defined before calling this function.\n#\n# NOTE: this function is duplicated in configure-helper.sh, any changes here\n# should be duplicated there as well.\nfunction log-init {\n  # Used by log-* functions.\n  LOG_CLUSTER_ID=$(get-metadata-value 'instance/attributes/cluster-uid' 'get-metadata-value-error')\n  LOG_INSTANCE_NAME=$(hostname)\n  LOG_BOOT_ID=$(journalctl --list-boots | grep -E '^ *0' | awk '{print $2}')\n  declare -Ag LOG_START_TIMES\n  declare -ag LOG_TRAP_STACK\n\n  LOG_STATUS_STARTED='STARTED'\n  LOG_STATUS_COMPLETED='COMPLETED'\n  LOG_STATUS_ERROR='ERROR'\n}\n\n# Sets an EXIT trap.\n# Args:\n#   $1:... : the trap command.\n#\n# NOTE: this function is duplicated in configure-helper.sh, any changes here\n# should be duplicated there as well.\nfunction log-trap-push {\n  local t=\"${*:1}\"\n  LOG_TRAP_STACK+=(\"${t}\")\n  # shellcheck disable=2064\n  trap \"${t}\" EXIT\n}\n\n# Removes and restores an EXIT trap.\n#\n# NOTE: this function is duplicated in configure-helper.sh, any changes here\n# should be duplicated there as well.\nfunction log-trap-pop {\n  # Remove current trap.\n  unset 'LOG_TRAP_STACK[-1]'\n\n  # Restore previous trap.\n  if [ ${#LOG_TRAP_STACK[@]} -ne 0 ]; then\n    local t=\"${LOG_TRAP_STACK[-1]}\"\n    # shellcheck disable=2064\n    trap \"${t}\" EXIT\n  else\n    # If no traps in stack, clear.\n    trap EXIT\n  fi\n}\n\n# Logs the end of a bootstrap step that errored.\n# Args:\n#  $1 : bootstrap step name.\n#\n# NOTE: this function is duplicated in configure-helper.sh, any changes here\n# should be duplicated there as well.\nfunction log-error {\n  local bootstep=\"$1\"\n\n  log-proto \"${bootstep}\" \"${LOG_STATUS_ERROR}\" \"encountered non-zero exit code\"\n}\n\n# Wraps a command with bootstrap logging.\n# Args:\n#   $1    : bootstrap step name.\n#   $2... : the command to run.\n#\n# NOTE: this function is duplicated in configure-helper.sh, any changes here\n# should be duplicated there as well.\nfunction log-wrap {\n  local bootstep=\"$1\"\n  local command=\"${*:2}\"\n\n  log-trap-push \"log-error ${bootstep}\"\n  log-proto \"${bootstep}\" \"${LOG_STATUS_STARTED}\"\n  $command\n  log-proto \"${bootstep}\" \"${LOG_STATUS_COMPLETED}\"\n  log-trap-pop\n}\n\n# Logs a bootstrap step start. Prefer log-wrap.\n# Args:\n#   $1 : bootstrap step name.\n#\n# NOTE: this function is duplicated in configure-helper.sh, any changes here\n# should be duplicated there as well.\nfunction log-start {\n  local bootstep=\"$1\"\n\n  log-trap-push \"log-error ${bootstep}\"\n  log-proto \"${bootstep}\" \"${LOG_STATUS_STARTED}\"\n}\n\n# Logs a bootstrap step end. Prefer log-wrap.\n# Args:\n#   $1 : bootstrap step name.\n#\n# NOTE: this function is duplicated in configure-helper.sh, any changes here\n# should be duplicated there as well.\nfunction log-end {\n  local bootstep=\"$1\"\n\n  log-proto \"${bootstep}\" \"${LOG_STATUS_COMPLETED}\"\n  log-trap-pop\n}\n\n# Writes a log proto to stdout.\n# Args:\n#   $1: bootstrap step name.\n#   $2: status. Either 'STARTED', 'COMPLETED', or 'ERROR'.\n#   $3: optional status reason.\n#\n# NOTE: this function is duplicated in configure-helper.sh, any changes here\n# should be duplicated there as well.\nfunction log-proto {\n  local bootstep=\"$1\"\n  local status=\"$2\"\n  local status_reason=\"${3:-}\"\n\n  # Get current time.\n  local current_time\n  current_time=\"$(date --utc '+%s.%N')\"\n  # ...formatted as UTC RFC 3339.\n  local timestamp\n  timestamp=\"$(date --utc --date=\"@${current_time}\" '+%FT%T.%NZ')\"\n\n  # Calculate latency.\n  local latency='null'\n  if [ \"${status}\" == \"${LOG_STATUS_STARTED}\" ]; then\n    LOG_START_TIMES[\"${bootstep}\"]=\"${current_time}\"\n  else\n    local start_time=\"${LOG_START_TIMES[\"${bootstep}\"]}\"\n    unset 'LOG_START_TIMES['\"${bootstep}\"']'\n\n    # Bash cannot do non-integer math, shell out to awk.\n    latency=\"$(echo \"${current_time} ${start_time}\" | awk '{print $1 - $2}')s\"\n\n    # The default latency is null which cannot be wrapped as a string so we must\n    # do it here instead of the printf.\n    latency=\"\\\"${latency}\\\"\"\n  fi\n\n  printf '[cloud.kubernetes.monitoring.proto.SerialportLog] {\"cluster_hash\":\"%s\",\"vm_instance_name\":\"%s\",\"boot_id\":\"%s\",\"timestamp\":\"%s\",\"bootstrap_status\":{\"step_name\":\"%s\",\"status\":\"%s\",\"status_reason\":\"%s\",\"latency\":%s}}\\n' \\\n  \"${LOG_CLUSTER_ID}\" \"${LOG_INSTANCE_NAME}\" \"${LOG_BOOT_ID}\" \"${timestamp}\" \"${bootstep}\" \"${status}\" \"${status_reason}\" \"${latency}\"\n}\n\n######### Main Function ##########\nlog-init\nlog-start 'ConfigureMain'\necho \"Start to install kubernetes files\"\n\n# if install fails, message-of-the-day (motd) will warn at login shell\nlog-wrap 'SetBrokenMotd' set-broken-motd\n\nKUBE_HOME=\"/home/kubernetes\"\nKUBE_BIN=\"${KUBE_HOME}/bin\"\nPYTHON=\"python\"\n\nlog-start 'SetPythonVersion'\nif [[ \"$(python -V 2>&1)\" =~ \"Python 2\" ]]; then\n  # found python2, just use that\n  PYTHON=\"python\"\nelif [[ -f \"/usr/bin/python2.7\" ]]; then\n  # System python not defaulted to python 2 but using 2.7 during migration\n  PYTHON=\"/usr/bin/python2.7\"\nelse\n  # No python2 either by default, let's see if we can find python3\n  PYTHON=\"python3\"\n  if ! command -v ${PYTHON} >/dev/null 2>&1; then\n    echo \"ERROR Python not found. Aborting.\"\n    exit 2\n  fi\nfi\necho \"Version : \" $(${PYTHON} -V 2>&1)\nlog-end 'SetPythonVersion'\n\nif [[ \"$(is-master)\" == \"true\" ]]; then\n  log-wrap 'InstallHurl' install-hurl\n  log-wrap 'InstallInplace' install-inplace\nfi\n\n# download and source kube-env\nlog-wrap 'DownloadKubeEnv' download-kube-env\nlog-wrap 'SourceKubeEnv' source \"${KUBE_HOME}/kube-env\"\n\nlog-wrap 'DownloadKubeletConfig' download-kubelet-config \"${KUBE_HOME}/kubelet-config.yaml\"\n\n# master certs\nif [[ \"${KUBERNETES_MASTER:-}\" == \"true\" ]]; then\n  log-wrap 'DownloadKubeMasterCerts' download-kube-master-certs\nfi\n\n# ensure chosen container runtime is present\nlog-wrap 'EnsureContainerRuntime' ensure-container-runtime\n\n# binaries and kube-system manifests\nlog-wrap 'InstallKubeBinaryConfig' install-kube-binary-config\n\n# download inplace component manifests\nif [[ \"${KUBERNETES_MASTER:-}\" == \"true\" ]]; then\n  log-wrap 'InplaceRunOnce' inplace-run-once\nfi\n\necho \"Done for installing kubernetes files\"\nlog-end 'ConfigureMain'\n"
                    },
                    {
                        "key": "gci-ensure-gke-docker",
                        "value": "true"
                    },
                    {
                        "key": "disable-legacy-endpoints",
                        "value": "true"
                    },
                    {
                        "key": "user-data",
                        "value": "#cloud-config\n\nwrite_files:\n  - path: /etc/systemd/system/kube-node-installation.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Download and install k8s binaries and configurations\n      After=network-online.target\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/mkdir -p /home/kubernetes/bin\n      ExecStartPre=/bin/mount --bind /home/kubernetes/bin /home/kubernetes/bin\n      ExecStartPre=/bin/mount -o remount,exec /home/kubernetes/bin\n      ExecStartPre=/usr/bin/curl --fail --retry 5 --retry-delay 3 --silent --show-error -H \"X-Google-Metadata-Request: True\" -o /home/kubernetes/bin/configure.sh http://metadata.google.internal/computeMetadata/v1/instance/attributes/configure-sh\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure.sh\n      ExecStart=/home/kubernetes/bin/configure.sh\n      StandardOutput=journal+console\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-node-configuration.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Configure kubernetes node\n      After=kube-node-installation.service\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure-helper.sh\n      ExecStart=/home/kubernetes/bin/configure-helper.sh\n      StandardOutput=journal+console\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-container-runtime-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for container runtime\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh container-runtime\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubelet-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for kubelet\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh kubelet\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.timer\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Hourly kube-logrotate invocation\n\n      [Timer]\n      OnCalendar=hourly\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes log rotation\n      After=kube-node-configuration.service\n\n      [Service]\n      Type=oneshot\n      ExecStart=-/usr/sbin/logrotate /etc/logrotate.conf\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubernetes.target\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes\n\n      [Install]\n      WantedBy=multi-user.target\n\nruncmd:\n - systemctl daemon-reload\n - systemctl enable kube-node-installation.service\n - systemctl enable kube-node-configuration.service\n - systemctl enable kube-container-runtime-monitor.service\n - systemctl enable kubelet-monitor.service\n - systemctl enable kube-logrotate.timer\n - systemctl enable kube-logrotate.service\n - systemctl enable kubernetes.target\n - systemctl start kubernetes.target\n"
                    },
                    {
                        "key": "kube-env",
                        "value": "ALLOCATE_NODE_CIDRS: \"true\"\nAPI_SERVER_TEST_LOG_LEVEL: --v=3\nAUTOSCALER_ENV_VARS: kube_reserved=cpu=1060m,memory=1019Mi,ephemeral-storage=15Gi;node_labels=cloud.google.com/gke-boot-disk=pd-standard,cloud.google.com/gke-container-runtime=containerd,cloud.google.com/gke-nodepool=node-cluster-2,cloud.google.com/gke-os-distribution=cos,cloud.google.com/gke-preemptible=true,cloud.google.com/machine-family=e2;os=linux;os_distribution=cos;evictionHard=memory.available=100Mi,nodefs.available=10%,nodefs.inodesFree=5%,pid.available=10%\nCA_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVMRENDQXBTZ0F3SUJBZ0lRVEg0ay9oWlUwK3NzNWhQWUJZNXFCVEFOQmdrcWhraUc5dzBCQVFzRkFEQXYKTVMwd0t3WURWUVFERXlRNU5EaG1OakUwTWkweE9XWXlMVFEwTXpjdFltUTFOeTAyT1RNME9UUmlaakpsTnpNdwpJQmNOTWpFeE1URXhNVEV5TmpVd1doZ1BNakExTVRFeE1EUXhNakkyTlRCYU1DOHhMVEFyQmdOVkJBTVRKRGswCk9HWTJNVFF5TFRFNVpqSXRORFF6TnkxaVpEVTNMVFk1TXpRNU5HSm1NbVUzTXpDQ0FhSXdEUVlKS29aSWh2Y04KQVFFQkJRQURnZ0dQQURDQ0FZb0NnZ0dCQUxtZUtORGUvTTVzanFZaStuL1FJSlpPbndXOHJUbXZzU1U0RzR6VApURXBENkx5cGhSZitucjRTVnlxNE9KYkw1UksreUFaaWVMSS9lV1VUZElVYUc2S2tGSTlyL3g1SkxCRnoxZFkzCnpYNVFrRlp4RStFWTJMRDg5Rkg3QS9DSGRuTzhsWXNZZXgwTDZBWE1xY1lTazhSN2xGN1ZJZGJqdlowbkIvVkYKUDFod2xRbmMvMTd2WThoU1dhYnZvbDFZNXNNOWZoUDRFNzZpRisrNmRkWkJFcmwrZW9Xb2NSMjBGd2F4Z2VmOQpsM3RYT0p3L0JGbW02eVhpYzV2NHdoTGV0K2NHNUwxc0drQUVQQm5DSnFCWE41VWE5VjNCQTRaTEl3SVhHUzN5CnlBdWF0aGp4NjEvZEdlUmQycFd2cTBQdG1wZlNTSWd5WE9vQ3cyTkJmOGNWMk9UbzZoSyszQ08wSUtQOWp1T2YKVDVHSEt0Zy9oR3dIN0JSdTR5TTEvbkhDV1k3K0VtK1FSS3BzZEg2WWZrRGQwZTErY0Rkb0RQMGo1YnNINDBCSgo1dHMzais5Mk4za1RYblNhZTNBbTlaV3VaZllQQnVqWWJUbGVWQVJJcVFwdUkvQkxsZm15S2dTUnJIZ3Vnd2xzCmJQZkJWNXNsOGtHUllyQlU1OXZ1RGRkTlJRSURBUUFCbzBJd1FEQU9CZ05WSFE4QkFmOEVCQU1DQWdRd0R3WUQKVlIwVEFRSC9CQVV3QXdFQi96QWRCZ05WSFE0RUZnUVUrSXRIcXNzcDAyS0VOUjZrN0czVVJHcjFjUFF3RFFZSgpLb1pJaHZjTkFRRUxCUUFEZ2dHQkFDYUpwRC9ManpHSUFuQ05UcVJrbzI4R1pUQlZIWk9pTTdMU1pYeTlNaERkCkhON295MUJwMFk5YS9EbElWV0dYM3g4Y2tVeVViRmRvUVJLVzVEdWxhWVhLa1Qvb1NmbmlLQ0s5NUluSTJTSXQKaUxtZGV6M0Y4aGF2aWhIY3haOHNJamZ2c2hNZW0yVDhqYjlwMWJ5TEx5eG0wNGwrYW5lOHdtQ1RoM0hMTHhTSgpUb211eFNlVm5nZ3pzY21KSmR2b0ozbGNNK05LVytUSTc4cDZNdzJNbnY3bDhQVElCcTRDSkNheHBuSnA3VTBsCmRyK3dTeFRlZXladkJsczlSanpyZ1grY0tKV1JSaFc0Qnh1c2FNT2FHZ0xoQ29BNlYyMm1sZDR4RkdFMGhLZzAKdUhrYzBwOThreHM3YnhmbjI2U1k3dFJMRzBiOVZ0bnhmQ0cvQVEwckZDQUg0elNCUCsyLzh2dVI5QUp5TTN2dgp6WW12OXhkc0F3eFJLK2JpUjdNNkdpZTEyeWIzVlk4WGtTeWszdVZvaVcza0gwUWg1MXNhdmZDeVdoQitYQit2CnhyRi95eGNZT0F6dnl5aHNxZjN3OWlJaUJkQTNrNjJiRTJjK1lWSWowb3NkZjZsWUVyQm41TzZUUUZleXJuMCsKV3N4aWpaZUVjekZlcDZYOGIyYURGQT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\nCLUSTER_IP_RANGE: 10.2.0.0/20\nCLUSTER_NAME: kuber-2\nCNI_HASH: 60bec898cffa83ee33023df0ea6001940f222e38d360e6829d05b821cff9921842418441abe8cbb9eada606edf50f0fe5730209311b8be5e035db022db4e3a5f\nCNI_SHA1: dcbeba8d6be7a49e399bda6b8b638d312eace876\nCNI_STORAGE_PATH: https://storage.googleapis.com/gke-release/cni-plugins/v0.8.5-gke.1\nCNI_STORAGE_URL_BASE: https://storage.googleapis.com/gke-release/cni-plugins\nCNI_TAR_PREFIX: cni-plugins-linux-amd64-\nCNI_VERSION: v0.8.5-gke.1\nCONTAINER_RUNTIME: containerd\nCONTAINER_RUNTIME_ENDPOINT: unix:///run/containerd/containerd.sock\nCONTAINER_RUNTIME_NAME: containerd\nCONTAINERD_MAX_CONTAINER_LOG_LINE: \"262144\"\nCREATE_BOOTSTRAP_KUBECONFIG: \"false\"\nDETECT_LOCAL_MODE: NodeCIDR\nDNS_DOMAIN: cluster.local\nDNS_SERVER_IP: 10.89.32.10\nDOCKER_REGISTRY_MIRROR_URL: https://mirror.gcr.io\nELASTICSEARCH_LOGGING_REPLICAS: \"1\"\nENABLE_CLUSTER_DNS: \"true\"\nENABLE_CLUSTER_LOGGING: \"false\"\nENABLE_CLUSTER_MONITORING: none\nENABLE_CLUSTER_REGISTRY: \"false\"\nENABLE_CLUSTER_UI: \"true\"\nENABLE_L7_LOADBALANCING: glbc\nENABLE_LATEST_NPD: \"true\"\nENABLE_METADATA_AGENT: \"\"\nENABLE_METRICS_SERVER: \"true\"\nENABLE_NODE_LOGGING: \"false\"\nENABLE_NODE_PROBLEM_DETECTOR: standalone\nENABLE_NODELOCAL_DNS: \"false\"\nENABLE_SYSCTL_TUNING: \"true\"\nENV_TIMESTAMP: \"2021-11-11T12:26:47+00:00\"\nEXEC_AUTH_PLUGIN_HASH: beb06bc613ac0446b296c20e21d518523ab495efc5a529926474979494bd35be0dbfe7d8d9c3299a120570a7101769710063cb4acac5eda4ee23afaab55dbf1a\nEXEC_AUTH_PLUGIN_LICENSE_URL: https://storage.googleapis.com/gke-prod-binaries/gke-exec-auth-plugin/ca1e685df450fd5d32b57a659eb363b870b03937/LICENSE\nEXEC_AUTH_PLUGIN_SHA1: b42adb3966c4295f17bf3c3f8a2058f4bda684b9\nEXEC_AUTH_PLUGIN_URL: https://storage.googleapis.com/gke-prod-binaries/gke-exec-auth-plugin/ca1e685df450fd5d32b57a659eb363b870b03937/gke-exec-auth-plugin\nEXTRA_DOCKER_OPTS: --insecure-registry 10.0.0.0/8\nEXTRA_POD_SYSCTLS: net.ipv6.conf.all.disable_ipv6=1,net.ipv6.conf.default.disable_ipv6=1\nFEATURE_GATES: DynamicKubeletConfig=false,RotateKubeletServerCertificate=true,GracefulNodeShutdown=true,ExecProbeTimeout=false\nFLUENTD_CONTAINER_RUNTIME_SERVICE: containerd\nHEAPSTER_USE_NEW_STACKDRIVER_RESOURCES: \"true\"\nHEAPSTER_USE_OLD_STACKDRIVER_RESOURCES: \"false\"\nHPA_USE_REST_CLIENTS: \"true\"\nINSTANCE_PREFIX: gke-kuber-2-a967968c\nKUBE_ADDON_REGISTRY: k8s.gcr.io\nKUBE_CLUSTER_DNS: 10.89.32.10\nKUBE_DOCKER_REGISTRY: gke.gcr.io\nKUBE_MANIFESTS_TAR_HASH: e7e83c805218139a62ace115e64c6a6a7638e4b3dddf3bcd9a687e60c7f159e35aba1c6151e6e154653d157c5720a1f5f544333654de535aa5ac3f887b42a330\nKUBE_MANIFESTS_TAR_URL: https://storage.googleapis.com/gke-release/kubernetes/release/v1.20.10-gke.1600/kubernetes-manifests.tar.gz,https://storage.googleapis.com/gke-release-eu/kubernetes/release/v1.20.10-gke.1600/kubernetes-manifests.tar.gz,https://storage.googleapis.com/gke-release-asia/kubernetes/release/v1.20.10-gke.1600/kubernetes-manifests.tar.gz\nKUBE_PROXY_TOKEN: ZvkEQt4W6EXV3HBnS2pbbN6hrty9CAoxS-zK1dxnKd4=\nKUBELET_ARGS: --v=2 --experimental-check-node-capabilities-before-mount=true --cloud-provider=gce\n  --experimental-mounter-path=/home/kubernetes/containerized_mounter/mounter --cert-dir=/var/lib/kubelet/pki/\n  --cni-bin-dir=/home/kubernetes/bin --kubeconfig=/var/lib/kubelet/kubeconfig --image-pull-progress-deadline=5m\n  --max-pods=110 --non-masquerade-cidr=0.0.0.0/0 --network-plugin=kubenet --volume-plugin-dir=/home/kubernetes/flexvolume\n  --node-status-max-images=25 --container-runtime=remote --container-runtime-endpoint=unix:///run/containerd/containerd.sock\n  --runtime-cgroups=/system.slice/containerd.service --registry-qps=10 --registry-burst=20\nKUBERNETES_MASTER: \"false\"\nKUBERNETES_MASTER_NAME: 35.224.39.25\nLOAD_IMAGE_COMMAND: ctr -n=k8s.io images import\nLOGGING_DESTINATION: \"\"\nLOGGING_STACKDRIVER_RESOURCE_TYPES: \"\"\nMONITORING_FLAG_SET: \"true\"\nNETWORK_PROVIDER: kubenet\nNODE_LOCAL_SSDS_EXT: \"\"\nNON_MASQUERADE_CIDR: 0.0.0.0/0\nREMOUNT_VOLUME_PLUGIN_DIR: \"true\"\nREQUIRE_METADATA_KUBELET_CONFIG_FILE: \"true\"\nSALT_TAR_HASH: \"\"\nSALT_TAR_URL: https://storage.googleapis.com/gke-release/kubernetes/release/v1.20.10-gke.1600/kubernetes-salt.tar.gz,https://storage.googleapis.com/gke-release-eu/kubernetes/release/v1.20.10-gke.1600/kubernetes-salt.tar.gz,https://storage.googleapis.com/gke-release-asia/kubernetes/release/v1.20.10-gke.1600/kubernetes-salt.tar.gz\nSERVER_BINARY_TAR_HASH: ada8bea81ad9223de32aa8497bdbdf4db6fabd4f463e68f66d8ff47f22709c29d2c797b8bb930bfb28f13cf9c03861b463149d1350d6dbda2b565eb2956cd28b\nSERVER_BINARY_TAR_URL: https://storage.googleapis.com/gke-release/kubernetes/release/v1.20.10-gke.1600/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/gke-release-eu/kubernetes/release/v1.20.10-gke.1600/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/gke-release-asia/kubernetes/release/v1.20.10-gke.1600/kubernetes-server-linux-amd64.tar.gz\nSERVICE_CLUSTER_IP_RANGE: 10.89.32.0/20\nSTACKDRIVER_ENDPOINT: https://logging.googleapis.com\nSYSCTL_OVERRIDES: \"\"\nTPM_BOOTSTRAP_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURyRENDQWhTZ0F3SUJBZ0lSQUo4VDAzSENMQ3ROOS84QVJXb2JEYjh3RFFZSktvWklodmNOQVFFTEJRQXcKTHpFdE1Dc0dBMVVFQXhNa09UUTRaall4TkRJdE1UbG1NaTAwTkRNM0xXSmtOVGN0Tmprek5EazBZbVl5WlRjegpNQjRYRFRJeE1URXhNVEV5TWpZMU1Wb1hEVEkyTVRFeE1ERXlNalkxTVZvd0hERWFNQmdHQTFVRUF4TVJhM1ZpClpXeGxkQzFpYjI5MGMzUnlZWEF3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRQzgKV2RFVVE4RDlYaTBDaTRaNGMyNFh3QUl2Z1B1ZUhELzNHdWJtQ1h1NjdnbmsreUt1eHBOeWtZVktCTU5vcEVkbwpoYWxTNEhwc1l0V2NmNHRqMWtHL1Y4TE5NQnY0VmhkVVBUYzJ3Mm5DLzJuV1RmSCtGZ2Y3bU52TmNDU0tOam5RCk84Ni9DOGcvQVBTUjJvZWhrQmNyNzAyVC8reHNsb0svUTdHZlE0VjQ1WHUrUHFqd0l5RmI4RldiUWFpK2FBb1IKK1BTdlZLb1pPU2FpaWtzd0k0SnE3ZmpUNlFlV0xDZXFtUk53ZUR0cXd5K2U5TWpzSjNlY1RiNGV0SWpIcmNpQQpyM0dybktrdWZLTHlyaWZyYVFQVEJZMjUrV0FLendHLzR6V1Rka0k2S1VFNGptcUt6Qmp6eTJkNkJMSlE5N094ClBFL3NHVDcrakNZVWNxM1phOENmQWdNQkFBR2pWakJVTUE0R0ExVWREd0VCL3dRRUF3SUZvREFUQmdOVkhTVUUKRERBS0JnZ3JCZ0VGQlFjREFqQU1CZ05WSFJNQkFmOEVBakFBTUI4R0ExVWRJd1FZTUJhQUZQaUxSNnJMS2ROaQpoRFVlcE94dDFFUnE5WEQwTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCZ1FBU2hadUQyTWcrSHh6Z25YMnhPTTkwCkQ1SGNDamh1NHVYWUdqc2ZhbG1Ma3htZHBOVDJFcHZTSVZlZFhmYXFHMU0rNEY4cmlRbXZIT21RZ2FYZzhiV1QKQTNGaVRUMkJxeCtBa3ZXRndJTlV6VDlIUTJSWGtreHJEVVUwL1JFNzFFdzFsZ2YyRmVmbXY3WHVtcXg3WlNZegptdE1mRzRMWmxESHNyN2EyQlNKc0o3RndVZWpJb0J5RXRUQzRyUjZwYzdJcDBaYThLelJweGhaNVIyc1ErYXM3CmtUd0dQMU85MTZ6dVBPZlRtWHFNaDZKdWY0SkU4VkxNd1hrODZ3VUdYZXluWDZoYzRRTEVmTE9BT2FVM2hyYnkKSlJzZVVBZDVucjRaN3hXU2dYT3BpbVNHQ2tLOWI2L25ESGJHbWFaNDZwRHI2emx1TlpwYnhuSzlacWNNWU9PKwpnUHE0bENrVmgxd3JFVmdWZTMvQ1VnMThKUzc4UXc3TWdsT3duOGx0VWVNU1JsTWthYnlQT0N2UGU0U2FTMXMyClFiOEdLbHBtMWMvUmkyYk8yejZBWXlZOWhzMXBrTzR1dHA5OTcwS3MveTNUNlVRVkNreEIvczh3bGJpa3hvSVcKVlM0TVNTTjQxaXNFZjY4ejFuOXhJcXlDQWdQaDJRZ1JLaHRock1SMlh2Yz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=\nTPM_BOOTSTRAP_KEY: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBdkZuUkZFUEEvVjR0QW91R2VITnVGOEFDTDREN25ody85eHJtNWdsN3V1NEo1UHNpCnJzYVRjcEdGU2dURGFLUkhhSVdwVXVCNmJHTFZuSCtMWTlaQnYxZkN6VEFiK0ZZWFZEMDNOc05wd3Y5cDFrM3gKL2hZSCs1amJ6WEFraWpZNTBEdk92d3ZJUHdEMGtkcUhvWkFYSys5TmsvL3NiSmFDdjBPeG4wT0ZlT1Y3dmo2bwo4Q01oVy9CVm0wR292bWdLRWZqMHIxU3FHVGttb29wTE1DT0NhdTM0MCtrSGxpd25xcGtUY0hnN2FzTXZudlRJCjdDZDNuRTIrSHJTSXg2M0lnSzl4cTV5cExueWk4cTRuNjJrRDB3V051ZmxnQ3M4QnYrTTFrM1pDT2lsQk9JNXEKaXN3WTg4dG5lZ1N5VVBlenNUeFA3QmsrL293bUZIS3QyV3ZBbndJREFRQUJBb0lCQUIzcVlYQWRDaVdUL3RwNgpkbVlNNWhobFJGT1pqUjFzbk9lWmE4RnZaeW9SRGNidDhSdkpGQ1BzZUxzQmJRSU5UdjdnZFR6aHhPcTdKZlRMCk9KbjlCQWlwU1VVQUs2a2RaTURaK2pvN1U4SGMxeDYvMXVid1JvaWxHNHJuNXIzWEVBYXRhOUNNbXJFUWJKMVAKNlhQMVVyWXY0T2F0WXVGUHVlamtEbTJ6M1VWa0NRZ01yeGR0eXZjZlBTS1lGZXdSeXhXWVNxdUVQbTFuWGdnNwpwY01Oc2dnYm9zWUNZZEZKU3pObEJpUVpvaFh4ejhQNm1BR21tRGh1ellXcHgvTTZCcml5OUhrZ29sSzM1bkxECnczM1g4dEVWYkNPajN5Unhycjl6d29GbndQdUR5ckF2SWJnaVhuWFJTbVlQaFBaMjgxWGcrMytGR0MrcTZpNzIKSmd3SUpzVUNnWUVBNmIzVG5YTTNlcG1IUXpqUkN3Rys2R2VsYzBxZnBGVGw1ZFRUbzROMUx3S2d2d0ExUGszcwp1Zmx0SnhldlVaaGxZMkFudXRZY2twMTRVNVh0RXhDUXdLMUQrM1BxV1RkdjVxaWtiTW1OaFJOSWZ2TEcyclIvCm5WeXhvSnI0N2Q1UEsvOWwyaUVWS0djNFUvSENDSzNZTCtQai9IVWVPdWMrN2xWeDlUbEtUNk1DZ1lFQXprbHoKdWlJZ294V3lNL3pjeW9yNTRJY052U2NSdDdQdEh3TnhOZTZRZis5ZzVEZC83anJwUUtDdkpXdngzSVhZZVdvdAo5NFlJR0JCSVJpTHQzREJhVHB2MDVUZ2YwU3JvaFhIK1ZHQ0tQLzA0a3Zya254eWVHb3FqUUQvZHppSE14ZENjClpoU2tqc0J5NHRIa1VoTm5XWXZQdGdVWHpsanFSK3RrL1ZIS2F0VUNnWUI4UlFNcjg2U3NWdEcyS0kvalZUTkYKWmsxdFpXQkl3eVpUTWZxdk5XWG83M0c4K29SVU1xUElJRmNxOElteVRONmluZTJoaE5JK0ZPQnpPQU9LSGtXSApXdGNJNmhEUERBMC9TYXZaZHJMNTdFMmZ5TDEyYTM1cGtHMlRvTEQxN2pxVGZyNk00UWZacWo4bFNpUko3dnRBClF0M2tTL1FkaHZKTFRqdy9EdzEyRndLQmdHRlJtYjBvT0lsM3hOaHQ1S1BSS00xYUtZc2hFV1MvQjVEb0NOTE8KdDNFRHQ0d3krckdqTFVPR0N0cjJyK1cvWno3d2Jyc2xpay8vN25qWUphc0pUTEZsTmdXbGtxMFZOeGt0akRTMgpUc0tkYmNFNWgvM2dmRjQ5SllNOEhpSVBKQkgydHJJWjd3QkJubkdQWDgyd3hjTWpDRnp3emloVkhrSEx0WnNrCnFQLzVBb0dBRUJnMUR1cENBWXRMSEtqK0ZTMHgzcTI1RWhpWVdyTDZaMTVYN0czb3FZaCsvb0phbWJBN0VqK1YKOWJzc081Rm5IWS9RVVNCTXU2UDdwNVZQL2U2NXdPTjk2OXd2dFNSVHZnaHR3djh4dXVSQW4vN09OQXFKSmpFSwp2bUNnT3RwS2hmM3RMRDhxRXJpU2hWVUpEd0NHYVVUOThLNHJrcjVHd2ZHZEZiLy9SQUk9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==\nVOLUME_PLUGIN_DIR: /home/kubernetes/flexvolume\nZONE: us-central1-a\n"
                    },
                    {
                        "key": "cluster-uid",
                        "value": "a967968cd6cb4f769e5ff1c5062c813a7bc1992a128e4547ba374101edd9f39d"
                    },
                    {
                        "key": "cluster-location",
                        "value": "us-central1-a"
                    }
                ],
                "kind": "compute#metadata"
            },
            "serviceAccounts": [
                {
                    "email": "556062258574-compute@developer.gserviceaccount.com",
                    "scopes": [
                        "https://www.googleapis.com/auth/logging.write",
                        "https://www.googleapis.com/auth/monitoring"
                    ]
                }
            ],
            "selfLink": "https://www.googleapis.com/compute/v1/projects/dev-tomer/zones/us-central1-a/instances/gke-kuber-2-node-cluster-2-3a4d0670-1tcd",
            "scheduling": {
                "onHostMaintenance": "TERMINATE",
                "automaticRestart": false,
                "preemptible": true
            },
            "cpuPlatform": "Intel Broadwell",
            "labels": {
                "goog-gke-node": ""
            },
            "labelFingerprint": "2ixRno2sGuM=",
            "startRestricted": false,
            "deletionProtection": false,
            "shieldedInstanceConfig": {
                "enableSecureBoot": false,
                "enableVtpm": true,
                "enableIntegrityMonitoring": true
            },
            "shieldedInstanceIntegrityPolicy": {
                "updateAutoLearnPolicy": true
            },
            "fingerprint": "O7gOW7CvyNA=",
            "lastStartTimestamp": "2021-11-11T04:33:32.385-08:00",
            "kind": "compute#instance"
        }
    ]
}