{"format_version":"0.1","terraform_version":"0.12.29","variables":{"aws":{"value":{"account-id":"","azs":"","key-name":"","region":""}},"cidr":{"value":{"allow-ssh":"0.0.0.0/0","pods":"10.2.0.0/16","service-cluster":"10.3.0.0/24","vpc":"10.0.0.0/16"}},"cluster-domain":{"value":"cluster.local"},"coreos-aws":{"value":{"ami":"","channel":"","type":""}},"dns-service-ip":{"value":"10.3.0.10"},"etcd-ips":{"value":"10.0.10.10,10.0.10.11,10.0.10.12"},"instance-type":{"value":{"bastion":"t2.nano","etcd":"m3.large","pki":"t2.nano","worker":"m3.large"}},"internal-tld":{"value":"asdf.com"},"k8s":{"value":{"hyperkube-image":"quay.io/coreos/hyperkube","hyperkube-tag":"v1.5.1_coreos.0"}},"k8s-service-ip":{"value":"10.3.0.1"},"name":{"value":"asdfasdf"},"pki-ip":{"value":"1.1.1.1"},"s3-bucket":{"value":"asdf12345123412341234y3therhtefgb"},"vpc-existing":{"value":{"gateway-id":"","id":"","subnet-ids-private":"","subnet-ids-public":""}}},"planned_values":{"outputs":{"autoscaling-group-name":{"sensitive":false,"value":"worker-general-asdfasdf"},"aws-iam-role-bastion-id":{"sensitive":false,"value":"module.iam.aws_iam_role.bastion.id"},"aws-iam-role-etcd-id":{"sensitive":false,"value":"module.iam.aws_iam_role.master.id"},"aws-iam-role-pki-id":{"sensitive":false,"value":"module.iam.aws_iam_role.pki.id"},"aws-iam-role-worker-id":{"sensitive":false,"value":"module.iam.aws_iam_role.worker.id"},"azs":{"sensitive":false,"value":""},"bastion-id":{"sensitive":false,"value":"module.security.aws_security_group.bastion.id"},"bastion-ip":{"sensitive":false,"value":"module.bastion.aws_instance.bastion.public_ip"},"bucket":{"sensitive":false,"value":"kz8s-pki-asdfasdf--"},"bucket-arn":{"sensitive":false,"value":"module.s3.aws_s3_bucket.pki.arn"},"cluster-domain":{"sensitive":false,"value":"cluster.local"},"depends-id":{"sensitive":false,"value":"module.etcd.null_resource.dummy_dependency.id"},"dns-service-ip":{"sensitive":false,"value":"10.3.0.10"},"etcd-id":{"sensitive":false,"value":"module.security.aws_security_group.etcd.id"},"etcd1-ip":{"sensitive":false,"value":"10.0.10.10"},"external-elb":{"sensitive":false,"value":"module.etcd.aws_elb.external.dns_name"},"external-elb-id":{"sensitive":false,"value":"module.security.aws_security_group.external-elb.id"},"gateway-id":{"sensitive":false,"value":""},"id":{"sensitive":false,"value":"vpc-033a54f26ef5e2b4a"},"instance-profile-name-bastion":{"sensitive":false,"value":"kz8s-bastion-asdfasdf"},"instance-profile-name-master":{"sensitive":false,"value":"kz8s-master-asdfasdf"},"instance-profile-name-pki":{"sensitive":false,"value":"kz8s-pki-asdfasdf"},"instance-profile-name-worker":{"sensitive":false,"value":"kz8s-worker-asdfasdf"},"internal-ips":{"sensitive":false,"value":"module.etcd.aws_instance.etcd[0].public_ip,module.etcd.aws_instance.etcd[1].public_ip,module.etcd.aws_instance.etcd[2].public_ip"},"internal-name-servers":{"sensitive":false},"internal-tld":{"sensitive":false,"value":"asdf.com"},"internal-zone-id":{"sensitive":false,"value":"module.route53.aws_route53_zone.internal.zone_id"},"ip":{"sensitive":false,"value":"module.bastion.aws_instance.bastion.public_ip"},"ips":{"sensitive":false,"value":{"bastion":"module.bastion.aws_instance.bastion.public_ip","dns-service":"10.3.0.10","etcd":"10.0.10.10,10.0.10.11,10.0.10.12","pki":"1.1.1.1"}},"name":{"sensitive":false,"value":"asdfasdf"},"pki-id":{"sensitive":false,"value":"module.security.aws_security_group.pki.id"},"pki-ip":{"sensitive":false,"value":"1.1.1.1"},"region":{"sensitive":false,"value":""},"s3-bucket":{"sensitive":false,"value":"kz8s-pki-asdfasdf--"},"subnet-ids-private":{"sensitive":false,"value":""},"subnet-ids-public":{"sensitive":false,"value":""},"worker-autoscaling-group-name":{"sensitive":false,"value":"worker-general-asdfasdf"},"worker-id":{"sensitive":false,"value":"module.security.aws_security_group.worker.id"}},"root_module":{"child_modules":[{"resources":[{"address":"module.bastion.aws_instance.bastion","mode":"managed","type":"aws_instance","name":"bastion","provider_name":"aws","schema_version":1,"values":{"ami":"","associate_public_ip_address":true,"credit_specification":[],"disable_api_termination":null,"ebs_optimized":null,"get_password_data":false,"hibernation":null,"iam_instance_profile":"kz8s-bastion-asdfasdf","instance_initiated_shutdown_behavior":null,"instance_type":"t2.nano","monitoring":null,"source_dest_check":true,"tags":{"Name":"kz8s-bastion","builtWith":"terraform","depends-id":"vpc-033a54f26ef5e2b4a","kz8s":"asdfasdf","role":"bastion"},"timeouts":null,"user_data":"313c04dd2143d3162f02e87fb1e34bc941b1da74","user_data_base64":null,"volume_tags":null,"vpc_security_group_ids":["module.security.aws_security_group.bastion.id"]}},{"address":"module.bastion.null_resource.dummy_dependency","mode":"managed","type":"null_resource","name":"dummy_dependency","provider_name":"null","schema_version":0,"values":{"triggers":null}}],"address":"module.bastion"},{"resources":[{"address":"module.etcd.aws_elb.external","mode":"managed","type":"aws_elb","name":"external","provider_name":"aws","schema_version":0,"values":{"access_logs":[],"connection_draining":false,"connection_draining_timeout":300,"cross_zone_load_balancing":false,"health_check":[{"healthy_threshold":2,"interval":10,"target":"SSL:443","timeout":3,"unhealthy_threshold":6}],"idle_timeout":3600,"listener":[{"instance_port":443,"instance_protocol":"tcp","lb_port":443,"lb_protocol":"tcp","ssl_certificate_id":""}],"name":"kz8s-apiserver-asdfasdf","name_prefix":null,"security_groups":["module.security.aws_security_group.external-elb.id"],"subnets":[""],"tags":{"KubernetesCluster":"asdfasdf","Name":"kz8s-apiserver","builtWith":"terraform","kz8s":"asdfasdfi","role":"apiserver","version":"v1.5.1_coreos.0","visibility":"public"}}},{"address":"module.etcd.aws_elb_attachment.master[0]","mode":"managed","type":"aws_elb_attachment","name":"master","index":0,"provider_name":"aws","schema_version":0,"values":{"elb":"module.etcd.aws_elb.external.id","instance":"module.etcd.aws_instance.etcd[0].id"}},{"address":"module.etcd.aws_elb_attachment.master[1]","mode":"managed","type":"aws_elb_attachment","name":"master","index":1,"provider_name":"aws","schema_version":0,"values":{"elb":"module.etcd.aws_elb.external.id","instance":"module.etcd.aws_instance.etcd[1].id"}},{"address":"module.etcd.aws_elb_attachment.master[2]","mode":"managed","type":"aws_elb_attachment","name":"master","index":2,"provider_name":"aws","schema_version":0,"values":{"elb":"module.etcd.aws_elb.external.id","instance":"module.etcd.aws_instance.etcd[2].id"}},{"address":"module.etcd.aws_instance.etcd[0]","mode":"managed","type":"aws_instance","name":"etcd","index":0,"provider_name":"aws","schema_version":1,"values":{"ami":"","associate_public_ip_address":false,"credit_specification":[],"disable_api_termination":null,"ebs_optimized":null,"get_password_data":false,"hibernation":null,"iam_instance_profile":"kz8s-master-asdfasdf","instance_initiated_shutdown_behavior":null,"instance_type":"m3.large","monitoring":null,"private_ip":"10.0.10.10","root_block_device":[{"delete_on_termination":true,"tags":null,"volume_size":124,"volume_type":"gp2"}],"source_dest_check":true,"tags":{"KubernetesCluster":"asdfasdf","Name":"kz8s-etcd1","builtWith":"terraform","depends-id":"module.route53.null_resource.dummy_dependency.id","kz8s":"asdfasdf","role":"etcd,apiserver","version":"v1.5.1_coreos.0","visibility":"private"},"timeouts":null,"user_data":"cacbf9a4fb66bd39e5f8dd4121db2eba070f03f2","user_data_base64":null,"volume_tags":null,"vpc_security_group_ids":["module.security.aws_security_group.etcd.id"]}},{"address":"module.etcd.aws_instance.etcd[1]","mode":"managed","type":"aws_instance","name":"etcd","index":1,"provider_name":"aws","schema_version":1,"values":{"ami":"","associate_public_ip_address":false,"credit_specification":[],"disable_api_termination":null,"ebs_optimized":null,"get_password_data":false,"hibernation":null,"iam_instance_profile":"kz8s-master-asdfasdf","instance_initiated_shutdown_behavior":null,"instance_type":"m3.large","monitoring":null,"private_ip":"10.0.10.11","root_block_device":[{"delete_on_termination":true,"tags":null,"volume_size":124,"volume_type":"gp2"}],"source_dest_check":true,"tags":{"KubernetesCluster":"asdfasdf","Name":"kz8s-etcd2","builtWith":"terraform","depends-id":"module.route53.null_resource.dummy_dependency.id","kz8s":"asdfasdf","role":"etcd,apiserver","version":"v1.5.1_coreos.0","visibility":"private"},"timeouts":null,"user_data":"d005afacdaf8be98e8c2ef32afa49eb27eed9160","user_data_base64":null,"volume_tags":null,"vpc_security_group_ids":["module.security.aws_security_group.etcd.id"]}},{"address":"module.etcd.aws_instance.etcd[2]","mode":"managed","type":"aws_instance","name":"etcd","index":2,"provider_name":"aws","schema_version":1,"values":{"ami":"","associate_public_ip_address":false,"credit_specification":[],"disable_api_termination":null,"ebs_optimized":null,"get_password_data":false,"hibernation":null,"iam_instance_profile":"kz8s-master-asdfasdf","instance_initiated_shutdown_behavior":null,"instance_type":"m3.large","monitoring":null,"private_ip":"10.0.10.12","root_block_device":[{"delete_on_termination":true,"tags":null,"volume_size":124,"volume_type":"gp2"}],"source_dest_check":true,"tags":{"KubernetesCluster":"asdfasdf","Name":"kz8s-etcd3","builtWith":"terraform","depends-id":"module.route53.null_resource.dummy_dependency.id","kz8s":"asdfasdf","role":"etcd,apiserver","version":"v1.5.1_coreos.0","visibility":"private"},"timeouts":null,"user_data":"2d92052324afddff163e6dd1e11c519cbc056cfb","user_data_base64":null,"volume_tags":null,"vpc_security_group_ids":["module.security.aws_security_group.etcd.id"]}},{"address":"module.etcd.data.template_file.cloud-config[0]","mode":"data","type":"template_file","name":"cloud-config","index":0,"provider_name":"template","schema_version":0,"values":{"filename":null,"template":"#cloud-config\n\n---\ncoreos:\n\n  flannel:\n    interface: $private_ipv4\n    etcd_cafile: /etc/kubernetes/ssl/ca.pem\n    etcd_certfile: /etc/kubernetes/ssl/k8s-etcd.pem\n    etcd_keyfile: /etc/kubernetes/ssl/k8s-etcd-key.pem\n    etcd_endpoints: https://etcd.${ internal-tld }:2379\n\n  locksmith:\n    endpoint: https://etcd.${ internal-tld }:2379\n    etcd_cafile: /etc/kubernetes/ssl/ca.pem\n    etcd_certfile: /etc/kubernetes/ssl/k8s-etcd.pem\n    etcd_keyfile: /etc/kubernetes/ssl/k8s-etcd-key.pem\n\n  units:\n    - name: etcd-member.service\n      command: start\n      drop-ins:\n        - name: 01-wait-for-certs.conf\n          content: |\n            [Unit]\n            After=create-certificates.service\n            Requires=create-certificates.service\n            ConditionFileNotEmpty=/etc/kubernetes/ssl/ca.pem\n            ConditionFileNotEmpty=/etc/kubernetes/ssl/k8s-etcd.pem\n            ConditionFileNotEmpty=/etc/kubernetes/ssl/k8s-etcd-key.pem\n\n        - name: 10-environment.conf\n          content: |\n            [Service]\n            Environment=\"ETCD_ADVERTISE_CLIENT_URLS=https://${ fqdn }:2379\"\n            Environment=\"ETCD_CERT_FILE=/etc/ssl/certs/k8s-etcd.pem\"\n            Environment=\"ETCD_CLIENT_CERT_AUTH=true\"\n            Environment=\"ETCD_DISCOVERY_SRV=${ internal-tld }\"\n            Environment=\"ETCD_INITIAL_ADVERTISE_PEER_URLS=https://${ fqdn }:2380\"\n            Environment=\"ETCD_INITIAL_CLUSTER_STATE=new\"\n            Environment=\"ETCD_INITIAL_CLUSTER_TOKEN=${ cluster-token }\"\n            Environment=\"ETCD_KEY_FILE=/etc/ssl/certs/k8s-etcd-key.pem\"\n            Environment=\"ETCD_LISTEN_CLIENT_URLS=https://0.0.0.0:2379\"\n            Environment=\"ETCD_LISTEN_PEER_URLS=https://0.0.0.0:2380\"\n            Environment=\"ETCD_NAME=${ hostname }\"\n            Environment=\"ETCD_PEER_CERT_FILE=/etc/ssl/certs/k8s-etcd.pem\"\n            Environment=\"ETCD_PEER_KEY_FILE=/etc/ssl/certs/k8s-etcd-key.pem\"\n            Environment=\"ETCD_PEER_TRUSTED_CA_FILE=/etc/ssl/certs/ca.pem\"\n            Environment=\"ETCD_SSL_DIR=/etc/kubernetes/ssl\"\n            Environment=\"ETCD_TRUSTED_CA_FILE=/etc/ssl/certs/ca.pem\"\n\n    - name: flanneld.service\n      command: start\n      drop-ins:\n        - name: 50-network-config.conf\n          content: |\n            [Unit]\n            Wants=create-certificates.service\n            After=create-certificates.service\n            [Service]\n            EnvironmentFile=/etc/environment\n            Environment=\"ETCD_SSL_DIR=/etc/kubernetes/ssl\"\n            ExecStartPre=-/usr/bin/etcdctl mk /coreos.com/network/config \\\n              '{ \"Network\": \"${ pod-ip-range }\", \"Backend\": { \"Type\": \"vxlan\" } }'\n            Restart=always\n            RestartSec=10\n\n    - name: docker.service\n      command: start\n      drop-ins:\n        - name: 40-flannel.conf\n          content: |\n            [Unit]\n            After=flanneld.service\n            Requires=flanneld.service\n            [Service]\n            Restart=always\n            RestartSec=10\n\n    - name: download-cfssl.service\n      command: start\n      content: |\n        [Unit]\n        After=network-online.target\n        Requires=network-online.target\n        Before=etcd-member.service\n        Description=Download cfssl\n        [Service]\n        Type=oneshot\n        RemainAfterExit=yes\n        ExecStartPre=-/usr/bin/mkdir --parents /opt/bin\n        ExecStartPre=/usr/bin/curl -L -o /opt/bin/cfssl https://pkg.cfssl.org/R1.2/cfssl_linux-amd64\n        ExecStartPre=/usr/bin/curl -L -o /opt/bin/cfssljson https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64\n        ExecStart=/usr/bin/chmod +x /opt/bin/cfssl /opt/bin/cfssljson\n\n    - name: create-certificates.service\n      command: start\n      content: |\n        [Unit]\n        After=download-cfssl.service\n        Before=flannel.service\n        ConditionFileIsExecutable=/opt/bin/cfssl\n        Description=Get ssl artifacts from s3 bucket using IAM role and create local certificates\n        Requires=download-cfssl.service\n        [Service]\n        ExecStartPre=-/usr/bin/mkdir -p /etc/kubernetes/ssl\n        ExecStartPre=/opt/bin/fetch-from-s3 service-account-key.pem\n        ExecStartPre=/opt/bin/fetch-from-s3 ca.pem\n        ExecStart=/opt/bin/create-certificates\n        RemainAfterExit=yes\n        Type=oneshot\n\n    - name: prefetch-rkt-hyperkube.service\n      command: start\n      content: |\n        [Unit]\n        After=network-online.target\n        Requires=network-online.target\n        Description=Prefetch rkt Hyperkube\n        [Service]\n        Type=oneshot\n        RemainAfterExit=yes\n        ExecStartPre=/usr/bin/rkt trust --trust-keys-from-https --prefix=quay.io/coreos/hyperkube\n        ExecStart=/usr/bin/rkt fetch ${ hyperkube-image }:${ hyperkube-tag }\n\n    - name: prefetch-docker-hyperkube.service\n      command: start\n      content: |\n        [Unit]\n        After=docker.service\n        Requires=docker.service\n        Description=Prefetch docker Hyperkube\n        [Service]\n        Type=oneshot\n        RemainAfterExit=yes\n        ExecStart=/usr/bin/docker pull ${ hyperkube }\n\n    - name: kubelet.service\n      command: start\n      runtime: true\n      content: |\n        [Unit]\n        ConditionFileNotEmpty=/etc/kubernetes/ssl/service-account-key.pem\n        ConditionFileIsExecutable=/usr/lib/coreos/kubelet-wrapper\n        After=flanneld.service\n        After=prefetch-rkt-hyperkube.service\n        After=prefetch-docker-hyperkube.service\n        Requires=flanneld.service\n        [Service]\n        EnvironmentFile=-/etc/environment\n        Environment=\"KUBELET_ACI=${ hyperkube-image }\"\n        Environment=\"KUBELET_VERSION=${ hyperkube-tag }\"\n        Environment=\"RKT_OPTS=\\\n          --volume dns,kind=host,source=/etc/resolv.conf \\\n          --mount volume=dns,target=/etc/resolv.conf \\\n          --volume rkt,kind=host,source=/opt/bin/host-rkt \\\n          --mount volume=rkt,target=/usr/bin/rkt \\\n          --volume var-lib-rkt,kind=host,source=/var/lib/rkt \\\n          --mount volume=var-lib-rkt,target=/var/lib/rkt \\\n          --volume stage,kind=host,source=/tmp \\\n          --mount volume=stage,target=/tmp \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log\"\n        ExecStartPre=/usr/bin/mkdir -p /var/log/containers\n        ExecStartPre=/usr/bin/mkdir -p /var/lib/kubelet\n        ExecStartPre=/usr/bin/mount --bind /var/lib/kubelet /var/lib/kubelet\n        ExecStartPre=/usr/bin/mount --make-shared /var/lib/kubelet\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged=true \\\n          --api-servers=http://127.0.0.1:8080 \\\n          --cloud-provider=aws \\\n          --cluster-dns=${ dns-service-ip } \\\n          --cluster-domain=${ cluster-domain } \\\n          --kubeconfig=/etc/kubernetes/kubeconfig.yml \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --node-labels node-role.kubernetes.io/master \\\n          --register-node=true \\\n          --register-with-taints node-role.kubernetes.io/master='':NoSchedule\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\n  update:\n    reboot-strategy: etcd-lock\n\nwrite-files:\n\n  - path: /etc/environment\n    permissions: 0644\n    content: |\n      COREOS_PRIVATE_IPV4=$private_ipv4\n      ETCD_CA_FILE=/etc/kubernetes/ssl/ca.pem\n      ETCD_CERT_FILE=/etc/kubernetes/ssl/k8s-etcd.pem\n      ETCD_KEY_FILE=/etc/kubernetes/ssl/k8s-etcd-key.pem\n      ETCDCTL_CA_FILE=/etc/kubernetes/ssl/ca.pem\n      ETCDCTL_CERT_FILE=/etc/kubernetes/ssl/k8s-etcd.pem\n      ETCDCTL_KEY_FILE=/etc/kubernetes/ssl/k8s-etcd-key.pem\n      ETCDCTL_ENDPOINT=https://${ fqdn }:2379\n\n  - path: /opt/bin/host-rkt\n    permissions: 0755\n    owner: root:root\n    content: |\n      #!/bin/sh\n      exec nsenter -m -u -i -n -p -t 1 -- /usr/bin/rkt \"$@\"\n\n  - path: /etc/kubernetes/kubeconfig.yml\n    content: |\n      apiVersion: v1\n      kind: Config\n      clusters:\n        - name: local\n          cluster:\n            server: http://127.0.0.1:8080\n      users:\n        - name: kubelet\n      contexts:\n        - name: kubelet-context\n          context:\n            cluster: local\n            user: kubelet\n      current-context: kubelet-context\n\n  - path: /etc/kubernetes/manifests/kube-apiserver.yml\n    content: |\n      apiVersion: v1\n      kind: Pod\n      metadata:\n        name: kube-apiserver\n        namespace: kube-system\n      spec:\n        hostNetwork: true\n        containers:\n        - name: kube-apiserver\n          image: ${ hyperkube }\n          command:\n          - /hyperkube\n          - apiserver\n          - --admission-control=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,ResourceQuota\n          - --advertise-address=$private_ipv4\n          - --apiserver-count=${ apiserver-count }\n          - --allow-privileged=true\n          - --anonymous-auth=false\n          - --client-ca-file=/etc/kubernetes/ssl/ca.pem\n          - --cloud-provider=aws\n          - --enable-swagger-ui\n          - --etcd-cafile=/etc/kubernetes/ssl/ca.pem\n          - --etcd-certfile=/etc/kubernetes/ssl/k8s-etcd.pem\n          - --etcd-keyfile=/etc/kubernetes/ssl/k8s-etcd-key.pem\n          - --etcd-servers=https://etcd.${ internal-tld }:2379\n          - --runtime-config=extensions/v1beta1=true,extensions/v1beta1/thirdpartyresources=true,apps/v1beta1=true\n          - --secure-port=443\n          - --service-account-key-file=/etc/kubernetes/ssl/service-account-key.pem\n          - --service-account-lookup\n          - --service-cluster-ip-range=${ service-cluster-ip-range }\n          - --tls-cert-file=/etc/kubernetes/ssl/k8s-apiserver.pem\n          - --tls-private-key-file=/etc/kubernetes/ssl/k8s-apiserver-key.pem\n          - --v=2\n          livenessProbe:\n            httpGet:\n              host: 127.0.0.1\n              port: 8080\n              path: /healthz\n            initialDelaySeconds: 15\n            timeoutSeconds: 15\n          ports:\n          - containerPort: 443\n            hostPort: 443\n            name: https\n          - containerPort: 8080\n            hostPort: 8080\n            name: local\n          volumeMounts:\n          - mountPath: /etc/kubernetes/ssl\n            name: ssl-certs-kubernetes\n            readOnly: true\n          - mountPath: /etc/ssl/certs\n            name: ssl-certs-host\n            readOnly: true\n        volumes:\n        - hostPath:\n            path: /etc/kubernetes/ssl\n          name: ssl-certs-kubernetes\n        - hostPath:\n            path: /usr/share/ca-certificates\n          name: ssl-certs-host\n\n  - path: /etc/kubernetes/manifests/kube-controller-manager.yml\n    content: |\n      apiVersion: v1\n      kind: Pod\n      metadata:\n        name: kube-controller-manager\n        namespace: kube-system\n      spec:\n        hostNetwork: true\n        containers:\n        - name: kube-controller-manager\n          image: ${ hyperkube }\n          command:\n          - /hyperkube\n          - controller-manager\n          - --cloud-provider=aws\n          - --leader-elect=true\n          - --master=http://127.0.0.1:8080\n          - --root-ca-file=/etc/kubernetes/ssl/ca.pem\n          - --service-account-private-key-file=/etc/kubernetes/ssl/service-account-key.pem\n          resources:\n            requests:\n              cpu: 200m\n          livenessProbe:\n            httpGet:\n              host: 127.0.0.1\n              path: /healthz\n              port: 10252\n            initialDelaySeconds: 15\n            timeoutSeconds: 1\n          volumeMounts:\n          - mountPath: /etc/kubernetes/ssl\n            name: ssl-certs-kubernetes\n            readOnly: true\n          - mountPath: /etc/ssl/certs\n            name: ssl-certs-host\n            readOnly: true\n        volumes:\n        - hostPath:\n            path: /etc/kubernetes/ssl\n          name: ssl-certs-kubernetes\n        - hostPath:\n            path: /usr/share/ca-certificates\n          name: ssl-certs-host\n\n  - path: /etc/kubernetes/manifests/kube-proxy.yml\n    content: |\n      apiVersion: v1\n      kind: Pod\n      metadata:\n        name: kube-proxy\n        namespace: kube-system\n      spec:\n        hostNetwork: true\n        containers:\n        - name: kube-proxy\n          image: ${ hyperkube }\n          command:\n          - /hyperkube\n          - proxy\n          - --master=http://127.0.0.1:8080\n          securityContext:\n            privileged: true\n          volumeMounts:\n          - mountPath: /etc/ssl/certs\n            name: ssl-certs-host\n            readOnly: true\n          - mountPath: /var/run/dbus\n            name: dbus\n            readOnly: false\n        volumes:\n        - hostPath:\n            path: /usr/share/ca-certificates\n          name: ssl-certs-host\n        - hostPath:\n            path: /var/run/dbus\n          name: dbus\n\n  - path: /etc/kubernetes/manifests/kube-scheduler.yml\n    content: |\n      apiVersion: v1\n      kind: Pod\n      metadata:\n        name: kube-scheduler\n        namespace: kube-system\n      spec:\n        hostNetwork: true\n        containers:\n        - name: kube-scheduler\n          image: ${ hyperkube }\n          command:\n          - /hyperkube\n          - scheduler\n          - --leader-elect=true\n          - --master=http://127.0.0.1:8080\n          resources:\n            requests:\n              cpu: 100m\n          livenessProbe:\n            httpGet:\n              host: 127.0.0.1\n              path: /healthz\n              port: 10251\n            initialDelaySeconds: 15\n            timeoutSeconds: 1\n\n  - path: /etc/logrotate.d/docker-containers\n    content: |\n      /var/lib/docker/containers/*/*.log {\n        rotate 7\n        daily\n        compress\n        size=1M\n        missingok\n        delaycompress\n        copytruncate\n      }\n\n  - path: /opt/bin/fetch-from-s3\n    permissions: 0755\n    owner: root:root\n    content: |\n      #!/bin/bash -e\n      until /usr/bin/rkt run \\\n        --net=host \\\n        --trust-keys-from-https \\\n        --volume=dns,kind=host,source=/etc/resolv.conf,readOnly=true --mount volume=dns,target=/etc/resolv.conf \\\n        --volume=ssl,kind=host,source=/etc/kubernetes/ssl,readOnly=false --mount=volume=ssl,target=/etc/kubernetes/ssl \\\n        quay.io/coreos/awscli -- aws s3 cp s3://${ s3-bucket }/$1 /etc/kubernetes/ssl\n      do\n        echo \"retrying\"\n        sleep 5.2\n      done\n      echo \"✓\"\n\n  - path: /opt/bin/wait-for-certs\n    permissions: 0755\n    owner: root:root\n    content: |\n      #!/bin/bash -e\n      until ls /etc/kubernetes/ssl\n      do\n        echo \"retrying\"\n        sleep 5.2\n      done\n      echo \"✓\"\n\n  - path: /opt/bin/create-certificates\n    permissions: 0755\n    owner: root:root\n    content: |\n      #!/bin/bash -vex\n\n      OUTDIR=/etc/kubernetes/ssl\n\n      function error {\n        echo \"✗ Error on line $1\"'!'\n        exit 1\n      }\n      trap 'error $LINENO' ERR\n\n      until printf \".\" \u0026\u0026 curl -d '{\"label\":\"primary\"}' http://pki.${ internal-tld }:8888/api/v1/cfssl/info \u0026\u003e/dev/null\n      do sleep 5.2; done; echo \"✓\"\n\n      DNS1=\"kubernetes\"\n      DNS2=\"kubernetes.default\"\n      DNS3=\"kubernetes.default.svc\"\n      DNS4=\"kubernetes.default.svc.cluster.local\"\n      DEFAULT_HOSTS=\"$DNS1,$DNS2,$DNS3,$DNS4,127.0.0.1\"\n\n      function csr {\n        cat \u003c\u003cEOF\n      {\"CN\":\"$1\",\"hosts\":[\"\"],\"key\":{\"algo\":\"rsa\",\"size\":2048}}\n      EOF\n      }\n\n      function generate {\n\n        CN=$1\n        PROFILE=$2\n        HOSTS=$3\n\n        echo \"$(csr $CN)\" \\\n          | /opt/bin/cfssl gencert \\\n            -remote=pki.${ internal-tld }:8888 \\\n            -profile=$PROFILE \\\n            -hostname=\"$HOSTS\" - \\\n          | /opt/bin/cfssljson -bare $CN\n\n        chmod 0644 $${CN}.pem $${CN}-key.pem\n\n      }\n\n      mkdir -p $OUTDIR \u0026\u0026 cd $OUTDIR\n\n      generate k8s-apiserver client-server \"$${DEFAULT_HOSTS},${ ip-k8s-service },master.${ internal-tld },${ external-elb }\"\n      generate k8s-etcd client-server \"etcd.${ internal-tld },${ fqdn }\"\n\n  - path: /etc/kubernetes/cni/net.d/10-flannel.conf\n    content: |\n        {\n            \"name\": \"podnet\",\n            \"type\": \"flannel\",\n            \"delegate\": {\n                \"isDefaultGateway\": true\n            }\n        }\n","vars":{"apiserver-count":"3","cluster-domain":"cluster.local","cluster-token":"etcd-cluster-asdfasdf","dns-service-ip":"10.3.0.10","external-elb":"module.etcd.aws_elb.external.dns_name","fqdn":"etcd1.asdf.com","hostname":"etcd1","hyperkube":"quay.io/coreos/hyperkube:v1.5.1_coreos.0","hyperkube-image":"quay.io/coreos/hyperkube","hyperkube-tag":"v1.5.1_coreos.0","internal-tld":"asdf.com","ip-k8s-service":"10.3.0.1","pod-ip-range":"10.2.0.0/16","region":"","s3-bucket":"kz8s-pki-asdfasdf--","service-cluster-ip-range":"10.3.0.0/24"}}},{"address":"module.etcd.data.template_file.cloud-config[1]","mode":"data","type":"template_file","name":"cloud-config","index":1,"provider_name":"template","schema_version":0,"values":{"filename":null,"template":"#cloud-config\n\n---\ncoreos:\n\n  flannel:\n    interface: $private_ipv4\n    etcd_cafile: /etc/kubernetes/ssl/ca.pem\n    etcd_certfile: /etc/kubernetes/ssl/k8s-etcd.pem\n    etcd_keyfile: /etc/kubernetes/ssl/k8s-etcd-key.pem\n    etcd_endpoints: https://etcd.${ internal-tld }:2379\n\n  locksmith:\n    endpoint: https://etcd.${ internal-tld }:2379\n    etcd_cafile: /etc/kubernetes/ssl/ca.pem\n    etcd_certfile: /etc/kubernetes/ssl/k8s-etcd.pem\n    etcd_keyfile: /etc/kubernetes/ssl/k8s-etcd-key.pem\n\n  units:\n    - name: etcd-member.service\n      command: start\n      drop-ins:\n        - name: 01-wait-for-certs.conf\n          content: |\n            [Unit]\n            After=create-certificates.service\n            Requires=create-certificates.service\n            ConditionFileNotEmpty=/etc/kubernetes/ssl/ca.pem\n            ConditionFileNotEmpty=/etc/kubernetes/ssl/k8s-etcd.pem\n            ConditionFileNotEmpty=/etc/kubernetes/ssl/k8s-etcd-key.pem\n\n        - name: 10-environment.conf\n          content: |\n            [Service]\n            Environment=\"ETCD_ADVERTISE_CLIENT_URLS=https://${ fqdn }:2379\"\n            Environment=\"ETCD_CERT_FILE=/etc/ssl/certs/k8s-etcd.pem\"\n            Environment=\"ETCD_CLIENT_CERT_AUTH=true\"\n            Environment=\"ETCD_DISCOVERY_SRV=${ internal-tld }\"\n            Environment=\"ETCD_INITIAL_ADVERTISE_PEER_URLS=https://${ fqdn }:2380\"\n            Environment=\"ETCD_INITIAL_CLUSTER_STATE=new\"\n            Environment=\"ETCD_INITIAL_CLUSTER_TOKEN=${ cluster-token }\"\n            Environment=\"ETCD_KEY_FILE=/etc/ssl/certs/k8s-etcd-key.pem\"\n            Environment=\"ETCD_LISTEN_CLIENT_URLS=https://0.0.0.0:2379\"\n            Environment=\"ETCD_LISTEN_PEER_URLS=https://0.0.0.0:2380\"\n            Environment=\"ETCD_NAME=${ hostname }\"\n            Environment=\"ETCD_PEER_CERT_FILE=/etc/ssl/certs/k8s-etcd.pem\"\n            Environment=\"ETCD_PEER_KEY_FILE=/etc/ssl/certs/k8s-etcd-key.pem\"\n            Environment=\"ETCD_PEER_TRUSTED_CA_FILE=/etc/ssl/certs/ca.pem\"\n            Environment=\"ETCD_SSL_DIR=/etc/kubernetes/ssl\"\n            Environment=\"ETCD_TRUSTED_CA_FILE=/etc/ssl/certs/ca.pem\"\n\n    - name: flanneld.service\n      command: start\n      drop-ins:\n        - name: 50-network-config.conf\n          content: |\n            [Unit]\n            Wants=create-certificates.service\n            After=create-certificates.service\n            [Service]\n            EnvironmentFile=/etc/environment\n            Environment=\"ETCD_SSL_DIR=/etc/kubernetes/ssl\"\n            ExecStartPre=-/usr/bin/etcdctl mk /coreos.com/network/config \\\n              '{ \"Network\": \"${ pod-ip-range }\", \"Backend\": { \"Type\": \"vxlan\" } }'\n            Restart=always\n            RestartSec=10\n\n    - name: docker.service\n      command: start\n      drop-ins:\n        - name: 40-flannel.conf\n          content: |\n            [Unit]\n            After=flanneld.service\n            Requires=flanneld.service\n            [Service]\n            Restart=always\n            RestartSec=10\n\n    - name: download-cfssl.service\n      command: start\n      content: |\n        [Unit]\n        After=network-online.target\n        Requires=network-online.target\n        Before=etcd-member.service\n        Description=Download cfssl\n        [Service]\n        Type=oneshot\n        RemainAfterExit=yes\n        ExecStartPre=-/usr/bin/mkdir --parents /opt/bin\n        ExecStartPre=/usr/bin/curl -L -o /opt/bin/cfssl https://pkg.cfssl.org/R1.2/cfssl_linux-amd64\n        ExecStartPre=/usr/bin/curl -L -o /opt/bin/cfssljson https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64\n        ExecStart=/usr/bin/chmod +x /opt/bin/cfssl /opt/bin/cfssljson\n\n    - name: create-certificates.service\n      command: start\n      content: |\n        [Unit]\n        After=download-cfssl.service\n        Before=flannel.service\n        ConditionFileIsExecutable=/opt/bin/cfssl\n        Description=Get ssl artifacts from s3 bucket using IAM role and create local certificates\n        Requires=download-cfssl.service\n        [Service]\n        ExecStartPre=-/usr/bin/mkdir -p /etc/kubernetes/ssl\n        ExecStartPre=/opt/bin/fetch-from-s3 service-account-key.pem\n        ExecStartPre=/opt/bin/fetch-from-s3 ca.pem\n        ExecStart=/opt/bin/create-certificates\n        RemainAfterExit=yes\n        Type=oneshot\n\n    - name: prefetch-rkt-hyperkube.service\n      command: start\n      content: |\n        [Unit]\n        After=network-online.target\n        Requires=network-online.target\n        Description=Prefetch rkt Hyperkube\n        [Service]\n        Type=oneshot\n        RemainAfterExit=yes\n        ExecStartPre=/usr/bin/rkt trust --trust-keys-from-https --prefix=quay.io/coreos/hyperkube\n        ExecStart=/usr/bin/rkt fetch ${ hyperkube-image }:${ hyperkube-tag }\n\n    - name: prefetch-docker-hyperkube.service\n      command: start\n      content: |\n        [Unit]\n        After=docker.service\n        Requires=docker.service\n        Description=Prefetch docker Hyperkube\n        [Service]\n        Type=oneshot\n        RemainAfterExit=yes\n        ExecStart=/usr/bin/docker pull ${ hyperkube }\n\n    - name: kubelet.service\n      command: start\n      runtime: true\n      content: |\n        [Unit]\n        ConditionFileNotEmpty=/etc/kubernetes/ssl/service-account-key.pem\n        ConditionFileIsExecutable=/usr/lib/coreos/kubelet-wrapper\n        After=flanneld.service\n        After=prefetch-rkt-hyperkube.service\n        After=prefetch-docker-hyperkube.service\n        Requires=flanneld.service\n        [Service]\n        EnvironmentFile=-/etc/environment\n        Environment=\"KUBELET_ACI=${ hyperkube-image }\"\n        Environment=\"KUBELET_VERSION=${ hyperkube-tag }\"\n        Environment=\"RKT_OPTS=\\\n          --volume dns,kind=host,source=/etc/resolv.conf \\\n          --mount volume=dns,target=/etc/resolv.conf \\\n          --volume rkt,kind=host,source=/opt/bin/host-rkt \\\n          --mount volume=rkt,target=/usr/bin/rkt \\\n          --volume var-lib-rkt,kind=host,source=/var/lib/rkt \\\n          --mount volume=var-lib-rkt,target=/var/lib/rkt \\\n          --volume stage,kind=host,source=/tmp \\\n          --mount volume=stage,target=/tmp \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log\"\n        ExecStartPre=/usr/bin/mkdir -p /var/log/containers\n        ExecStartPre=/usr/bin/mkdir -p /var/lib/kubelet\n        ExecStartPre=/usr/bin/mount --bind /var/lib/kubelet /var/lib/kubelet\n        ExecStartPre=/usr/bin/mount --make-shared /var/lib/kubelet\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged=true \\\n          --api-servers=http://127.0.0.1:8080 \\\n          --cloud-provider=aws \\\n          --cluster-dns=${ dns-service-ip } \\\n          --cluster-domain=${ cluster-domain } \\\n          --kubeconfig=/etc/kubernetes/kubeconfig.yml \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --node-labels node-role.kubernetes.io/master \\\n          --register-node=true \\\n          --register-with-taints node-role.kubernetes.io/master='':NoSchedule\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\n  update:\n    reboot-strategy: etcd-lock\n\nwrite-files:\n\n  - path: /etc/environment\n    permissions: 0644\n    content: |\n      COREOS_PRIVATE_IPV4=$private_ipv4\n      ETCD_CA_FILE=/etc/kubernetes/ssl/ca.pem\n      ETCD_CERT_FILE=/etc/kubernetes/ssl/k8s-etcd.pem\n      ETCD_KEY_FILE=/etc/kubernetes/ssl/k8s-etcd-key.pem\n      ETCDCTL_CA_FILE=/etc/kubernetes/ssl/ca.pem\n      ETCDCTL_CERT_FILE=/etc/kubernetes/ssl/k8s-etcd.pem\n      ETCDCTL_KEY_FILE=/etc/kubernetes/ssl/k8s-etcd-key.pem\n      ETCDCTL_ENDPOINT=https://${ fqdn }:2379\n\n  - path: /opt/bin/host-rkt\n    permissions: 0755\n    owner: root:root\n    content: |\n      #!/bin/sh\n      exec nsenter -m -u -i -n -p -t 1 -- /usr/bin/rkt \"$@\"\n\n  - path: /etc/kubernetes/kubeconfig.yml\n    content: |\n      apiVersion: v1\n      kind: Config\n      clusters:\n        - name: local\n          cluster:\n            server: http://127.0.0.1:8080\n      users:\n        - name: kubelet\n      contexts:\n        - name: kubelet-context\n          context:\n            cluster: local\n            user: kubelet\n      current-context: kubelet-context\n\n  - path: /etc/kubernetes/manifests/kube-apiserver.yml\n    content: |\n      apiVersion: v1\n      kind: Pod\n      metadata:\n        name: kube-apiserver\n        namespace: kube-system\n      spec:\n        hostNetwork: true\n        containers:\n        - name: kube-apiserver\n          image: ${ hyperkube }\n          command:\n          - /hyperkube\n          - apiserver\n          - --admission-control=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,ResourceQuota\n          - --advertise-address=$private_ipv4\n          - --apiserver-count=${ apiserver-count }\n          - --allow-privileged=true\n          - --anonymous-auth=false\n          - --client-ca-file=/etc/kubernetes/ssl/ca.pem\n          - --cloud-provider=aws\n          - --enable-swagger-ui\n          - --etcd-cafile=/etc/kubernetes/ssl/ca.pem\n          - --etcd-certfile=/etc/kubernetes/ssl/k8s-etcd.pem\n          - --etcd-keyfile=/etc/kubernetes/ssl/k8s-etcd-key.pem\n          - --etcd-servers=https://etcd.${ internal-tld }:2379\n          - --runtime-config=extensions/v1beta1=true,extensions/v1beta1/thirdpartyresources=true,apps/v1beta1=true\n          - --secure-port=443\n          - --service-account-key-file=/etc/kubernetes/ssl/service-account-key.pem\n          - --service-account-lookup\n          - --service-cluster-ip-range=${ service-cluster-ip-range }\n          - --tls-cert-file=/etc/kubernetes/ssl/k8s-apiserver.pem\n          - --tls-private-key-file=/etc/kubernetes/ssl/k8s-apiserver-key.pem\n          - --v=2\n          livenessProbe:\n            httpGet:\n              host: 127.0.0.1\n              port: 8080\n              path: /healthz\n            initialDelaySeconds: 15\n            timeoutSeconds: 15\n          ports:\n          - containerPort: 443\n            hostPort: 443\n            name: https\n          - containerPort: 8080\n            hostPort: 8080\n            name: local\n          volumeMounts:\n          - mountPath: /etc/kubernetes/ssl\n            name: ssl-certs-kubernetes\n            readOnly: true\n          - mountPath: /etc/ssl/certs\n            name: ssl-certs-host\n            readOnly: true\n        volumes:\n        - hostPath:\n            path: /etc/kubernetes/ssl\n          name: ssl-certs-kubernetes\n        - hostPath:\n            path: /usr/share/ca-certificates\n          name: ssl-certs-host\n\n  - path: /etc/kubernetes/manifests/kube-controller-manager.yml\n    content: |\n      apiVersion: v1\n      kind: Pod\n      metadata:\n        name: kube-controller-manager\n        namespace: kube-system\n      spec:\n        hostNetwork: true\n        containers:\n        - name: kube-controller-manager\n          image: ${ hyperkube }\n          command:\n          - /hyperkube\n          - controller-manager\n          - --cloud-provider=aws\n          - --leader-elect=true\n          - --master=http://127.0.0.1:8080\n          - --root-ca-file=/etc/kubernetes/ssl/ca.pem\n          - --service-account-private-key-file=/etc/kubernetes/ssl/service-account-key.pem\n          resources:\n            requests:\n              cpu: 200m\n          livenessProbe:\n            httpGet:\n              host: 127.0.0.1\n              path: /healthz\n              port: 10252\n            initialDelaySeconds: 15\n            timeoutSeconds: 1\n          volumeMounts:\n          - mountPath: /etc/kubernetes/ssl\n            name: ssl-certs-kubernetes\n            readOnly: true\n          - mountPath: /etc/ssl/certs\n            name: ssl-certs-host\n            readOnly: true\n        volumes:\n        - hostPath:\n            path: /etc/kubernetes/ssl\n          name: ssl-certs-kubernetes\n        - hostPath:\n            path: /usr/share/ca-certificates\n          name: ssl-certs-host\n\n  - path: /etc/kubernetes/manifests/kube-proxy.yml\n    content: |\n      apiVersion: v1\n      kind: Pod\n      metadata:\n        name: kube-proxy\n        namespace: kube-system\n      spec:\n        hostNetwork: true\n        containers:\n        - name: kube-proxy\n          image: ${ hyperkube }\n          command:\n          - /hyperkube\n          - proxy\n          - --master=http://127.0.0.1:8080\n          securityContext:\n            privileged: true\n          volumeMounts:\n          - mountPath: /etc/ssl/certs\n            name: ssl-certs-host\n            readOnly: true\n          - mountPath: /var/run/dbus\n            name: dbus\n            readOnly: false\n        volumes:\n        - hostPath:\n            path: /usr/share/ca-certificates\n          name: ssl-certs-host\n        - hostPath:\n            path: /var/run/dbus\n          name: dbus\n\n  - path: /etc/kubernetes/manifests/kube-scheduler.yml\n    content: |\n      apiVersion: v1\n      kind: Pod\n      metadata:\n        name: kube-scheduler\n        namespace: kube-system\n      spec:\n        hostNetwork: true\n        containers:\n        - name: kube-scheduler\n          image: ${ hyperkube }\n          command:\n          - /hyperkube\n          - scheduler\n          - --leader-elect=true\n          - --master=http://127.0.0.1:8080\n          resources:\n            requests:\n              cpu: 100m\n          livenessProbe:\n            httpGet:\n              host: 127.0.0.1\n              path: /healthz\n              port: 10251\n            initialDelaySeconds: 15\n            timeoutSeconds: 1\n\n  - path: /etc/logrotate.d/docker-containers\n    content: |\n      /var/lib/docker/containers/*/*.log {\n        rotate 7\n        daily\n        compress\n        size=1M\n        missingok\n        delaycompress\n        copytruncate\n      }\n\n  - path: /opt/bin/fetch-from-s3\n    permissions: 0755\n    owner: root:root\n    content: |\n      #!/bin/bash -e\n      until /usr/bin/rkt run \\\n        --net=host \\\n        --trust-keys-from-https \\\n        --volume=dns,kind=host,source=/etc/resolv.conf,readOnly=true --mount volume=dns,target=/etc/resolv.conf \\\n        --volume=ssl,kind=host,source=/etc/kubernetes/ssl,readOnly=false --mount=volume=ssl,target=/etc/kubernetes/ssl \\\n        quay.io/coreos/awscli -- aws s3 cp s3://${ s3-bucket }/$1 /etc/kubernetes/ssl\n      do\n        echo \"retrying\"\n        sleep 5.2\n      done\n      echo \"✓\"\n\n  - path: /opt/bin/wait-for-certs\n    permissions: 0755\n    owner: root:root\n    content: |\n      #!/bin/bash -e\n      until ls /etc/kubernetes/ssl\n      do\n        echo \"retrying\"\n        sleep 5.2\n      done\n      echo \"✓\"\n\n  - path: /opt/bin/create-certificates\n    permissions: 0755\n    owner: root:root\n    content: |\n      #!/bin/bash -vex\n\n      OUTDIR=/etc/kubernetes/ssl\n\n      function error {\n        echo \"✗ Error on line $1\"'!'\n        exit 1\n      }\n      trap 'error $LINENO' ERR\n\n      until printf \".\" \u0026\u0026 curl -d '{\"label\":\"primary\"}' http://pki.${ internal-tld }:8888/api/v1/cfssl/info \u0026\u003e/dev/null\n      do sleep 5.2; done; echo \"✓\"\n\n      DNS1=\"kubernetes\"\n      DNS2=\"kubernetes.default\"\n      DNS3=\"kubernetes.default.svc\"\n      DNS4=\"kubernetes.default.svc.cluster.local\"\n      DEFAULT_HOSTS=\"$DNS1,$DNS2,$DNS3,$DNS4,127.0.0.1\"\n\n      function csr {\n        cat \u003c\u003cEOF\n      {\"CN\":\"$1\",\"hosts\":[\"\"],\"key\":{\"algo\":\"rsa\",\"size\":2048}}\n      EOF\n      }\n\n      function generate {\n\n        CN=$1\n        PROFILE=$2\n        HOSTS=$3\n\n        echo \"$(csr $CN)\" \\\n          | /opt/bin/cfssl gencert \\\n            -remote=pki.${ internal-tld }:8888 \\\n            -profile=$PROFILE \\\n            -hostname=\"$HOSTS\" - \\\n          | /opt/bin/cfssljson -bare $CN\n\n        chmod 0644 $${CN}.pem $${CN}-key.pem\n\n      }\n\n      mkdir -p $OUTDIR \u0026\u0026 cd $OUTDIR\n\n      generate k8s-apiserver client-server \"$${DEFAULT_HOSTS},${ ip-k8s-service },master.${ internal-tld },${ external-elb }\"\n      generate k8s-etcd client-server \"etcd.${ internal-tld },${ fqdn }\"\n\n  - path: /etc/kubernetes/cni/net.d/10-flannel.conf\n    content: |\n        {\n            \"name\": \"podnet\",\n            \"type\": \"flannel\",\n            \"delegate\": {\n                \"isDefaultGateway\": true\n            }\n        }\n","vars":{"apiserver-count":"3","cluster-domain":"cluster.local","cluster-token":"etcd-cluster-asdfasdf","dns-service-ip":"10.3.0.10","external-elb":"module.etcd.aws_elb.external.dns_name","fqdn":"etcd2.asdf.com","hostname":"etcd2","hyperkube":"quay.io/coreos/hyperkube:v1.5.1_coreos.0","hyperkube-image":"quay.io/coreos/hyperkube","hyperkube-tag":"v1.5.1_coreos.0","internal-tld":"asdf.com","ip-k8s-service":"10.3.0.1","pod-ip-range":"10.2.0.0/16","region":"","s3-bucket":"kz8s-pki-asdfasdf--","service-cluster-ip-range":"10.3.0.0/24"}}},{"address":"module.etcd.data.template_file.cloud-config[2]","mode":"data","type":"template_file","name":"cloud-config","index":2,"provider_name":"template","schema_version":0,"values":{"filename":null,"template":"#cloud-config\n\n---\ncoreos:\n\n  flannel:\n    interface: $private_ipv4\n    etcd_cafile: /etc/kubernetes/ssl/ca.pem\n    etcd_certfile: /etc/kubernetes/ssl/k8s-etcd.pem\n    etcd_keyfile: /etc/kubernetes/ssl/k8s-etcd-key.pem\n    etcd_endpoints: https://etcd.${ internal-tld }:2379\n\n  locksmith:\n    endpoint: https://etcd.${ internal-tld }:2379\n    etcd_cafile: /etc/kubernetes/ssl/ca.pem\n    etcd_certfile: /etc/kubernetes/ssl/k8s-etcd.pem\n    etcd_keyfile: /etc/kubernetes/ssl/k8s-etcd-key.pem\n\n  units:\n    - name: etcd-member.service\n      command: start\n      drop-ins:\n        - name: 01-wait-for-certs.conf\n          content: |\n            [Unit]\n            After=create-certificates.service\n            Requires=create-certificates.service\n            ConditionFileNotEmpty=/etc/kubernetes/ssl/ca.pem\n            ConditionFileNotEmpty=/etc/kubernetes/ssl/k8s-etcd.pem\n            ConditionFileNotEmpty=/etc/kubernetes/ssl/k8s-etcd-key.pem\n\n        - name: 10-environment.conf\n          content: |\n            [Service]\n            Environment=\"ETCD_ADVERTISE_CLIENT_URLS=https://${ fqdn }:2379\"\n            Environment=\"ETCD_CERT_FILE=/etc/ssl/certs/k8s-etcd.pem\"\n            Environment=\"ETCD_CLIENT_CERT_AUTH=true\"\n            Environment=\"ETCD_DISCOVERY_SRV=${ internal-tld }\"\n            Environment=\"ETCD_INITIAL_ADVERTISE_PEER_URLS=https://${ fqdn }:2380\"\n            Environment=\"ETCD_INITIAL_CLUSTER_STATE=new\"\n            Environment=\"ETCD_INITIAL_CLUSTER_TOKEN=${ cluster-token }\"\n            Environment=\"ETCD_KEY_FILE=/etc/ssl/certs/k8s-etcd-key.pem\"\n            Environment=\"ETCD_LISTEN_CLIENT_URLS=https://0.0.0.0:2379\"\n            Environment=\"ETCD_LISTEN_PEER_URLS=https://0.0.0.0:2380\"\n            Environment=\"ETCD_NAME=${ hostname }\"\n            Environment=\"ETCD_PEER_CERT_FILE=/etc/ssl/certs/k8s-etcd.pem\"\n            Environment=\"ETCD_PEER_KEY_FILE=/etc/ssl/certs/k8s-etcd-key.pem\"\n            Environment=\"ETCD_PEER_TRUSTED_CA_FILE=/etc/ssl/certs/ca.pem\"\n            Environment=\"ETCD_SSL_DIR=/etc/kubernetes/ssl\"\n            Environment=\"ETCD_TRUSTED_CA_FILE=/etc/ssl/certs/ca.pem\"\n\n    - name: flanneld.service\n      command: start\n      drop-ins:\n        - name: 50-network-config.conf\n          content: |\n            [Unit]\n            Wants=create-certificates.service\n            After=create-certificates.service\n            [Service]\n            EnvironmentFile=/etc/environment\n            Environment=\"ETCD_SSL_DIR=/etc/kubernetes/ssl\"\n            ExecStartPre=-/usr/bin/etcdctl mk /coreos.com/network/config \\\n              '{ \"Network\": \"${ pod-ip-range }\", \"Backend\": { \"Type\": \"vxlan\" } }'\n            Restart=always\n            RestartSec=10\n\n    - name: docker.service\n      command: start\n      drop-ins:\n        - name: 40-flannel.conf\n          content: |\n            [Unit]\n            After=flanneld.service\n            Requires=flanneld.service\n            [Service]\n            Restart=always\n            RestartSec=10\n\n    - name: download-cfssl.service\n      command: start\n      content: |\n        [Unit]\n        After=network-online.target\n        Requires=network-online.target\n        Before=etcd-member.service\n        Description=Download cfssl\n        [Service]\n        Type=oneshot\n        RemainAfterExit=yes\n        ExecStartPre=-/usr/bin/mkdir --parents /opt/bin\n        ExecStartPre=/usr/bin/curl -L -o /opt/bin/cfssl https://pkg.cfssl.org/R1.2/cfssl_linux-amd64\n        ExecStartPre=/usr/bin/curl -L -o /opt/bin/cfssljson https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64\n        ExecStart=/usr/bin/chmod +x /opt/bin/cfssl /opt/bin/cfssljson\n\n    - name: create-certificates.service\n      command: start\n      content: |\n        [Unit]\n        After=download-cfssl.service\n        Before=flannel.service\n        ConditionFileIsExecutable=/opt/bin/cfssl\n        Description=Get ssl artifacts from s3 bucket using IAM role and create local certificates\n        Requires=download-cfssl.service\n        [Service]\n        ExecStartPre=-/usr/bin/mkdir -p /etc/kubernetes/ssl\n        ExecStartPre=/opt/bin/fetch-from-s3 service-account-key.pem\n        ExecStartPre=/opt/bin/fetch-from-s3 ca.pem\n        ExecStart=/opt/bin/create-certificates\n        RemainAfterExit=yes\n        Type=oneshot\n\n    - name: prefetch-rkt-hyperkube.service\n      command: start\n      content: |\n        [Unit]\n        After=network-online.target\n        Requires=network-online.target\n        Description=Prefetch rkt Hyperkube\n        [Service]\n        Type=oneshot\n        RemainAfterExit=yes\n        ExecStartPre=/usr/bin/rkt trust --trust-keys-from-https --prefix=quay.io/coreos/hyperkube\n        ExecStart=/usr/bin/rkt fetch ${ hyperkube-image }:${ hyperkube-tag }\n\n    - name: prefetch-docker-hyperkube.service\n      command: start\n      content: |\n        [Unit]\n        After=docker.service\n        Requires=docker.service\n        Description=Prefetch docker Hyperkube\n        [Service]\n        Type=oneshot\n        RemainAfterExit=yes\n        ExecStart=/usr/bin/docker pull ${ hyperkube }\n\n    - name: kubelet.service\n      command: start\n      runtime: true\n      content: |\n        [Unit]\n        ConditionFileNotEmpty=/etc/kubernetes/ssl/service-account-key.pem\n        ConditionFileIsExecutable=/usr/lib/coreos/kubelet-wrapper\n        After=flanneld.service\n        After=prefetch-rkt-hyperkube.service\n        After=prefetch-docker-hyperkube.service\n        Requires=flanneld.service\n        [Service]\n        EnvironmentFile=-/etc/environment\n        Environment=\"KUBELET_ACI=${ hyperkube-image }\"\n        Environment=\"KUBELET_VERSION=${ hyperkube-tag }\"\n        Environment=\"RKT_OPTS=\\\n          --volume dns,kind=host,source=/etc/resolv.conf \\\n          --mount volume=dns,target=/etc/resolv.conf \\\n          --volume rkt,kind=host,source=/opt/bin/host-rkt \\\n          --mount volume=rkt,target=/usr/bin/rkt \\\n          --volume var-lib-rkt,kind=host,source=/var/lib/rkt \\\n          --mount volume=var-lib-rkt,target=/var/lib/rkt \\\n          --volume stage,kind=host,source=/tmp \\\n          --mount volume=stage,target=/tmp \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log\"\n        ExecStartPre=/usr/bin/mkdir -p /var/log/containers\n        ExecStartPre=/usr/bin/mkdir -p /var/lib/kubelet\n        ExecStartPre=/usr/bin/mount --bind /var/lib/kubelet /var/lib/kubelet\n        ExecStartPre=/usr/bin/mount --make-shared /var/lib/kubelet\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged=true \\\n          --api-servers=http://127.0.0.1:8080 \\\n          --cloud-provider=aws \\\n          --cluster-dns=${ dns-service-ip } \\\n          --cluster-domain=${ cluster-domain } \\\n          --kubeconfig=/etc/kubernetes/kubeconfig.yml \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --node-labels node-role.kubernetes.io/master \\\n          --register-node=true \\\n          --register-with-taints node-role.kubernetes.io/master='':NoSchedule\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\n  update:\n    reboot-strategy: etcd-lock\n\nwrite-files:\n\n  - path: /etc/environment\n    permissions: 0644\n    content: |\n      COREOS_PRIVATE_IPV4=$private_ipv4\n      ETCD_CA_FILE=/etc/kubernetes/ssl/ca.pem\n      ETCD_CERT_FILE=/etc/kubernetes/ssl/k8s-etcd.pem\n      ETCD_KEY_FILE=/etc/kubernetes/ssl/k8s-etcd-key.pem\n      ETCDCTL_CA_FILE=/etc/kubernetes/ssl/ca.pem\n      ETCDCTL_CERT_FILE=/etc/kubernetes/ssl/k8s-etcd.pem\n      ETCDCTL_KEY_FILE=/etc/kubernetes/ssl/k8s-etcd-key.pem\n      ETCDCTL_ENDPOINT=https://${ fqdn }:2379\n\n  - path: /opt/bin/host-rkt\n    permissions: 0755\n    owner: root:root\n    content: |\n      #!/bin/sh\n      exec nsenter -m -u -i -n -p -t 1 -- /usr/bin/rkt \"$@\"\n\n  - path: /etc/kubernetes/kubeconfig.yml\n    content: |\n      apiVersion: v1\n      kind: Config\n      clusters:\n        - name: local\n          cluster:\n            server: http://127.0.0.1:8080\n      users:\n        - name: kubelet\n      contexts:\n        - name: kubelet-context\n          context:\n            cluster: local\n            user: kubelet\n      current-context: kubelet-context\n\n  - path: /etc/kubernetes/manifests/kube-apiserver.yml\n    content: |\n      apiVersion: v1\n      kind: Pod\n      metadata:\n        name: kube-apiserver\n        namespace: kube-system\n      spec:\n        hostNetwork: true\n        containers:\n        - name: kube-apiserver\n          image: ${ hyperkube }\n          command:\n          - /hyperkube\n          - apiserver\n          - --admission-control=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,ResourceQuota\n          - --advertise-address=$private_ipv4\n          - --apiserver-count=${ apiserver-count }\n          - --allow-privileged=true\n          - --anonymous-auth=false\n          - --client-ca-file=/etc/kubernetes/ssl/ca.pem\n          - --cloud-provider=aws\n          - --enable-swagger-ui\n          - --etcd-cafile=/etc/kubernetes/ssl/ca.pem\n          - --etcd-certfile=/etc/kubernetes/ssl/k8s-etcd.pem\n          - --etcd-keyfile=/etc/kubernetes/ssl/k8s-etcd-key.pem\n          - --etcd-servers=https://etcd.${ internal-tld }:2379\n          - --runtime-config=extensions/v1beta1=true,extensions/v1beta1/thirdpartyresources=true,apps/v1beta1=true\n          - --secure-port=443\n          - --service-account-key-file=/etc/kubernetes/ssl/service-account-key.pem\n          - --service-account-lookup\n          - --service-cluster-ip-range=${ service-cluster-ip-range }\n          - --tls-cert-file=/etc/kubernetes/ssl/k8s-apiserver.pem\n          - --tls-private-key-file=/etc/kubernetes/ssl/k8s-apiserver-key.pem\n          - --v=2\n          livenessProbe:\n            httpGet:\n              host: 127.0.0.1\n              port: 8080\n              path: /healthz\n            initialDelaySeconds: 15\n            timeoutSeconds: 15\n          ports:\n          - containerPort: 443\n            hostPort: 443\n            name: https\n          - containerPort: 8080\n            hostPort: 8080\n            name: local\n          volumeMounts:\n          - mountPath: /etc/kubernetes/ssl\n            name: ssl-certs-kubernetes\n            readOnly: true\n          - mountPath: /etc/ssl/certs\n            name: ssl-certs-host\n            readOnly: true\n        volumes:\n        - hostPath:\n            path: /etc/kubernetes/ssl\n          name: ssl-certs-kubernetes\n        - hostPath:\n            path: /usr/share/ca-certificates\n          name: ssl-certs-host\n\n  - path: /etc/kubernetes/manifests/kube-controller-manager.yml\n    content: |\n      apiVersion: v1\n      kind: Pod\n      metadata:\n        name: kube-controller-manager\n        namespace: kube-system\n      spec:\n        hostNetwork: true\n        containers:\n        - name: kube-controller-manager\n          image: ${ hyperkube }\n          command:\n          - /hyperkube\n          - controller-manager\n          - --cloud-provider=aws\n          - --leader-elect=true\n          - --master=http://127.0.0.1:8080\n          - --root-ca-file=/etc/kubernetes/ssl/ca.pem\n          - --service-account-private-key-file=/etc/kubernetes/ssl/service-account-key.pem\n          resources:\n            requests:\n              cpu: 200m\n          livenessProbe:\n            httpGet:\n              host: 127.0.0.1\n              path: /healthz\n              port: 10252\n            initialDelaySeconds: 15\n            timeoutSeconds: 1\n          volumeMounts:\n          - mountPath: /etc/kubernetes/ssl\n            name: ssl-certs-kubernetes\n            readOnly: true\n          - mountPath: /etc/ssl/certs\n            name: ssl-certs-host\n            readOnly: true\n        volumes:\n        - hostPath:\n            path: /etc/kubernetes/ssl\n          name: ssl-certs-kubernetes\n        - hostPath:\n            path: /usr/share/ca-certificates\n          name: ssl-certs-host\n\n  - path: /etc/kubernetes/manifests/kube-proxy.yml\n    content: |\n      apiVersion: v1\n      kind: Pod\n      metadata:\n        name: kube-proxy\n        namespace: kube-system\n      spec:\n        hostNetwork: true\n        containers:\n        - name: kube-proxy\n          image: ${ hyperkube }\n          command:\n          - /hyperkube\n          - proxy\n          - --master=http://127.0.0.1:8080\n          securityContext:\n            privileged: true\n          volumeMounts:\n          - mountPath: /etc/ssl/certs\n            name: ssl-certs-host\n            readOnly: true\n          - mountPath: /var/run/dbus\n            name: dbus\n            readOnly: false\n        volumes:\n        - hostPath:\n            path: /usr/share/ca-certificates\n          name: ssl-certs-host\n        - hostPath:\n            path: /var/run/dbus\n          name: dbus\n\n  - path: /etc/kubernetes/manifests/kube-scheduler.yml\n    content: |\n      apiVersion: v1\n      kind: Pod\n      metadata:\n        name: kube-scheduler\n        namespace: kube-system\n      spec:\n        hostNetwork: true\n        containers:\n        - name: kube-scheduler\n          image: ${ hyperkube }\n          command:\n          - /hyperkube\n          - scheduler\n          - --leader-elect=true\n          - --master=http://127.0.0.1:8080\n          resources:\n            requests:\n              cpu: 100m\n          livenessProbe:\n            httpGet:\n              host: 127.0.0.1\n              path: /healthz\n              port: 10251\n            initialDelaySeconds: 15\n            timeoutSeconds: 1\n\n  - path: /etc/logrotate.d/docker-containers\n    content: |\n      /var/lib/docker/containers/*/*.log {\n        rotate 7\n        daily\n        compress\n        size=1M\n        missingok\n        delaycompress\n        copytruncate\n      }\n\n  - path: /opt/bin/fetch-from-s3\n    permissions: 0755\n    owner: root:root\n    content: |\n      #!/bin/bash -e\n      until /usr/bin/rkt run \\\n        --net=host \\\n        --trust-keys-from-https \\\n        --volume=dns,kind=host,source=/etc/resolv.conf,readOnly=true --mount volume=dns,target=/etc/resolv.conf \\\n        --volume=ssl,kind=host,source=/etc/kubernetes/ssl,readOnly=false --mount=volume=ssl,target=/etc/kubernetes/ssl \\\n        quay.io/coreos/awscli -- aws s3 cp s3://${ s3-bucket }/$1 /etc/kubernetes/ssl\n      do\n        echo \"retrying\"\n        sleep 5.2\n      done\n      echo \"✓\"\n\n  - path: /opt/bin/wait-for-certs\n    permissions: 0755\n    owner: root:root\n    content: |\n      #!/bin/bash -e\n      until ls /etc/kubernetes/ssl\n      do\n        echo \"retrying\"\n        sleep 5.2\n      done\n      echo \"✓\"\n\n  - path: /opt/bin/create-certificates\n    permissions: 0755\n    owner: root:root\n    content: |\n      #!/bin/bash -vex\n\n      OUTDIR=/etc/kubernetes/ssl\n\n      function error {\n        echo \"✗ Error on line $1\"'!'\n        exit 1\n      }\n      trap 'error $LINENO' ERR\n\n      until printf \".\" \u0026\u0026 curl -d '{\"label\":\"primary\"}' http://pki.${ internal-tld }:8888/api/v1/cfssl/info \u0026\u003e/dev/null\n      do sleep 5.2; done; echo \"✓\"\n\n      DNS1=\"kubernetes\"\n      DNS2=\"kubernetes.default\"\n      DNS3=\"kubernetes.default.svc\"\n      DNS4=\"kubernetes.default.svc.cluster.local\"\n      DEFAULT_HOSTS=\"$DNS1,$DNS2,$DNS3,$DNS4,127.0.0.1\"\n\n      function csr {\n        cat \u003c\u003cEOF\n      {\"CN\":\"$1\",\"hosts\":[\"\"],\"key\":{\"algo\":\"rsa\",\"size\":2048}}\n      EOF\n      }\n\n      function generate {\n\n        CN=$1\n        PROFILE=$2\n        HOSTS=$3\n\n        echo \"$(csr $CN)\" \\\n          | /opt/bin/cfssl gencert \\\n            -remote=pki.${ internal-tld }:8888 \\\n            -profile=$PROFILE \\\n            -hostname=\"$HOSTS\" - \\\n          | /opt/bin/cfssljson -bare $CN\n\n        chmod 0644 $${CN}.pem $${CN}-key.pem\n\n      }\n\n      mkdir -p $OUTDIR \u0026\u0026 cd $OUTDIR\n\n      generate k8s-apiserver client-server \"$${DEFAULT_HOSTS},${ ip-k8s-service },master.${ internal-tld },${ external-elb }\"\n      generate k8s-etcd client-server \"etcd.${ internal-tld },${ fqdn }\"\n\n  - path: /etc/kubernetes/cni/net.d/10-flannel.conf\n    content: |\n        {\n            \"name\": \"podnet\",\n            \"type\": \"flannel\",\n            \"delegate\": {\n                \"isDefaultGateway\": true\n            }\n        }\n","vars":{"apiserver-count":"3","cluster-domain":"cluster.local","cluster-token":"etcd-cluster-asdfasdf","dns-service-ip":"10.3.0.10","external-elb":"module.etcd.aws_elb.external.dns_name","fqdn":"etcd3.asdf.com","hostname":"etcd3","hyperkube":"quay.io/coreos/hyperkube:v1.5.1_coreos.0","hyperkube-image":"quay.io/coreos/hyperkube","hyperkube-tag":"v1.5.1_coreos.0","internal-tld":"asdf.com","ip-k8s-service":"10.3.0.1","pod-ip-range":"10.2.0.0/16","region":"","s3-bucket":"kz8s-pki-asdfasdf--","service-cluster-ip-range":"10.3.0.0/24"}}},{"address":"module.etcd.null_resource.dummy_dependency","mode":"managed","type":"null_resource","name":"dummy_dependency","provider_name":"null","schema_version":0,"values":{"triggers":null}}],"address":"module.etcd"},{"resources":[{"address":"module.iam.aws_iam_instance_profile.bastion","mode":"managed","type":"aws_iam_instance_profile","name":"bastion","provider_name":"aws","schema_version":0,"values":{"name":"kz8s-bastion-asdfasdf","name_prefix":null,"path":"/","role":"kz8s-bastion-asdfasdf"}},{"address":"module.iam.aws_iam_instance_profile.master","mode":"managed","type":"aws_iam_instance_profile","name":"master","provider_name":"aws","schema_version":0,"values":{"name":"kz8s-master-asdfasdf","name_prefix":null,"path":"/","role":"kz8s-master-asdfasdf"}},{"address":"module.iam.aws_iam_instance_profile.pki","mode":"managed","type":"aws_iam_instance_profile","name":"pki","provider_name":"aws","schema_version":0,"values":{"name":"kz8s-pki-asdfasdf","name_prefix":null,"path":"/","role":"kz8s-pki-asdfasdf"}},{"address":"module.iam.aws_iam_instance_profile.worker","mode":"managed","type":"aws_iam_instance_profile","name":"worker","provider_name":"aws","schema_version":0,"values":{"name":"kz8s-worker-asdfasdf","name_prefix":null,"path":"/","role":"kz8s-worker-asdfasdf"}},{"address":"module.iam.aws_iam_role.bastion","mode":"managed","type":"aws_iam_role","name":"bastion","provider_name":"aws","schema_version":0,"values":{"assume_role_policy":"{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Principal\": { \"Service\": \"ec2.amazonaws.com\" },\n      \"Action\": \"sts:AssumeRole\"\n    }\n  ]\n}\n","description":null,"force_detach_policies":false,"max_session_duration":3600,"name":"kz8s-bastion-asdfasdf","name_prefix":null,"path":"/","permissions_boundary":null,"tags":null}},{"address":"module.iam.aws_iam_role.master","mode":"managed","type":"aws_iam_role","name":"master","provider_name":"aws","schema_version":0,"values":{"assume_role_policy":"{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Principal\": { \"Service\": \"ec2.amazonaws.com\" },\n      \"Action\": \"sts:AssumeRole\"\n    }\n  ]\n}\n","description":null,"force_detach_policies":false,"max_session_duration":3600,"name":"kz8s-master-asdfasdf","name_prefix":null,"path":"/","permissions_boundary":null,"tags":null}},{"address":"module.iam.aws_iam_role.pki","mode":"managed","type":"aws_iam_role","name":"pki","provider_name":"aws","schema_version":0,"values":{"assume_role_policy":"{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Principal\": { \"Service\": \"ec2.amazonaws.com\" },\n      \"Action\": \"sts:AssumeRole\"\n    }\n  ]\n}\n","description":null,"force_detach_policies":false,"max_session_duration":3600,"name":"kz8s-pki-asdfasdf","name_prefix":null,"path":"/","permissions_boundary":null,"tags":null}},{"address":"module.iam.aws_iam_role.worker","mode":"managed","type":"aws_iam_role","name":"worker","provider_name":"aws","schema_version":0,"values":{"assume_role_policy":"{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Principal\": {\n        \"Service\": \"ec2.amazonaws.com\"\n      },\n      \"Action\": \"sts:AssumeRole\"\n    }\n  ]\n}\n","description":null,"force_detach_policies":false,"max_session_duration":3600,"name":"kz8s-worker-asdfasdf","name_prefix":null,"path":"/","permissions_boundary":null,"tags":null}},{"address":"module.iam.aws_iam_role_policy.bastion","mode":"managed","type":"aws_iam_role_policy","name":"bastion","provider_name":"aws","schema_version":0,"values":{"name":"kz8s-bastion-asdfasdf","name_prefix":null,"policy":"{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"s3:Get*\"\n      ],\n      \"Resource\": [ \"module.s3.aws_s3_bucket.pki.arn/*\" ]\n    }\n  ]\n}\n","role":"module.iam.aws_iam_role.bastion.id"}},{"address":"module.iam.aws_iam_role_policy.master","mode":"managed","type":"aws_iam_role_policy","name":"master","provider_name":"aws","schema_version":0,"values":{"name":"kz8s-master-asdfasdf","name_prefix":null,"policy":"{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Action\": [\n        \"s3:Get*\"\n      ],\n      \"Effect\": \"Allow\",\n      \"Resource\": [ \"module.s3.aws_s3_bucket.pki.arn/*\" ]\n    },\n    {\n      \"Action\": [\n        \"ec2:AttachVolume\",\n        \"ec2:CreateTags\",\n        \"ec2:CreateVolume\",\n        \"ec2:DeleteVolume\",\n        \"ec2:Describe*\",\n        \"ec2:DescribeInstances\",\n        \"ec2:DetachVolume\",\n        \"ec2:CreateSecurityGroup\",\n        \"ec2:AuthorizeSecurityGroupIngress\",\n        \"ec2:AuthorizeSecurityGroupEgress\",\n        \"ec2:DeleteSecurityGroup\",\n        \"ec2:RevokeSecurityGroupEgress\",\n        \"ec2:RevokeSecurityGroupIngress\",\n        \"elasticloadbalancing:*\"\n        ],\n      \"Effect\": \"Allow\",\n      \"Resource\": [ \"*\" ]\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"ecr:GetAuthorizationToken\",\n        \"ecr:BatchCheckLayerAvailability\",\n        \"ecr:GetDownloadUrlForLayer\",\n        \"ecr:GetRepositoryPolicy\",\n        \"ecr:DescribeRepositories\",\n        \"ecr:ListImages\",\n        \"ecr:BatchGetImage\"\n      ],\n      \"Resource\": \"*\"\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"autoscaling:DescribeAutoScalingGroups\",\n        \"autoscaling:DescribeAutoScalingInstances\",\n        \"autoscaling:SetDesiredCapacity\",\n        \"autoscaling:TerminateInstanceInAutoScalingGroup\"\n      ],\n      \"Resource\": \"*\"\n    }\n  ]\n}\n","role":"module.iam.aws_iam_role.master.id"}},{"address":"module.iam.aws_iam_role_policy.pki","mode":"managed","type":"aws_iam_role_policy","name":"pki","provider_name":"aws","schema_version":0,"values":{"name":"kz8s-pki-asdfasdf","name_prefix":null,"policy":"{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Action\": [\n        \"s3:Put*\"\n      ],\n      \"Effect\": \"Allow\",\n      \"Resource\": [ \"module.s3.aws_s3_bucket.pki.arn/*\" ]\n    }\n  ]\n}\n","role":"module.iam.aws_iam_role.pki.id"}},{"address":"module.iam.aws_iam_role_policy.worker","mode":"managed","type":"aws_iam_role_policy","name":"worker","provider_name":"aws","schema_version":0,"values":{"name":"kz8s-worker-asdfasdf","name_prefix":null,"policy":"{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Action\": [\n        \"s3:GetObject\"\n      ],\n      \"Effect\": \"Allow\",\n      \"Resource\": [ \"module.s3.aws_s3_bucket.pki.arn/ca.pem\" ]\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"ec2:Describe*\",\n        \"ec2:AttachVolume\",\n        \"ec2:DetachVolume\",\n        \"ec2:DescribeInstances\"\n      ],\n      \"Resource\": \"*\"\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"ecr:GetAuthorizationToken\",\n        \"ecr:BatchCheckLayerAvailability\",\n        \"ecr:GetDownloadUrlForLayer\",\n        \"ecr:GetRepositoryPolicy\",\n        \"ecr:DescribeRepositories\",\n        \"ecr:ListImages\",\n        \"ecr:BatchGetImage\"\n      ],\n      \"Resource\": \"*\"\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"autoscaling:DescribeAutoScalingGroups\",\n        \"autoscaling:DescribeAutoScalingInstances\",\n        \"autoscaling:SetDesiredCapacity\",\n        \"autoscaling:TerminateInstanceInAutoScalingGroup\"\n      ],\n      \"Resource\": \"*\"\n    }\n  ]\n}\n","role":"module.iam.aws_iam_role.worker.id"}},{"address":"module.iam.null_resource.dummy_dependency","mode":"managed","type":"null_resource","name":"dummy_dependency","provider_name":"null","schema_version":0,"values":{"triggers":null}}],"address":"module.iam"},{"resources":[{"address":"module.pki.aws_instance.pki","mode":"managed","type":"aws_instance","name":"pki","provider_name":"aws","schema_version":1,"values":{"ami":"","associate_public_ip_address":false,"credit_specification":[],"disable_api_termination":null,"ebs_optimized":null,"get_password_data":false,"hibernation":null,"iam_instance_profile":"kz8s-pki-asdfasdf","instance_initiated_shutdown_behavior":null,"instance_type":"t2.nano","monitoring":null,"private_ip":"1.1.1.1","source_dest_check":true,"tags":{"Name":"kz8s-pki","builtWith":"terraform","depends-id":"vpc-033a54f26ef5e2b4a","kz8s":"asdfasdf","role":"pki"},"timeouts":null,"user_data":"81b453713b658aaa84fae978d2d43d8f1f3f9834","user_data_base64":null,"volume_tags":null,"vpc_security_group_ids":["module.security.aws_security_group.pki.id"]}},{"address":"module.pki.aws_route53_record.pki","mode":"managed","type":"aws_route53_record","name":"pki","provider_name":"aws","schema_version":2,"values":{"alias":[],"failover_routing_policy":[],"geolocation_routing_policy":[],"health_check_id":null,"latency_routing_policy":[],"multivalue_answer_routing_policy":null,"name":"pki","records":["1.1.1.1"],"set_identifier":null,"ttl":300,"type":"A","weighted_routing_policy":[],"zone_id":"module.route53.aws_route53_zone.internal.zone_id"}},{"address":"module.pki.null_resource.dummy_dependency","mode":"managed","type":"null_resource","name":"dummy_dependency","provider_name":"null","schema_version":0,"values":{"triggers":null}}],"address":"module.pki"},{"resources":[{"address":"module.route53.aws_route53_record.A-etcd","mode":"managed","type":"aws_route53_record","name":"A-etcd","provider_name":"aws","schema_version":2,"values":{"alias":[],"failover_routing_policy":[],"geolocation_routing_policy":[],"health_check_id":null,"latency_routing_policy":[],"multivalue_answer_routing_policy":null,"name":"etcd","records":["10.0.10.10","10.0.10.11","10.0.10.12"],"set_identifier":null,"ttl":300,"type":"A","weighted_routing_policy":[],"zone_id":"module.route53.aws_route53_zone.internal.zone_id"}},{"address":"module.route53.aws_route53_record.A-etcds[0]","mode":"managed","type":"aws_route53_record","name":"A-etcds","index":0,"provider_name":"aws","schema_version":2,"values":{"alias":[],"failover_routing_policy":[],"geolocation_routing_policy":[],"health_check_id":null,"latency_routing_policy":[],"multivalue_answer_routing_policy":null,"name":"etcd1","records":["10.0.10.10"],"set_identifier":null,"ttl":300,"type":"A","weighted_routing_policy":[],"zone_id":"module.route53.aws_route53_zone.internal.zone_id"}},{"address":"module.route53.aws_route53_record.A-etcds[1]","mode":"managed","type":"aws_route53_record","name":"A-etcds","index":1,"provider_name":"aws","schema_version":2,"values":{"alias":[],"failover_routing_policy":[],"geolocation_routing_policy":[],"health_check_id":null,"latency_routing_policy":[],"multivalue_answer_routing_policy":null,"name":"etcd2","records":["10.0.10.11"],"set_identifier":null,"ttl":300,"type":"A","weighted_routing_policy":[],"zone_id":"module.route53.aws_route53_zone.internal.zone_id"}},{"address":"module.route53.aws_route53_record.A-etcds[2]","mode":"managed","type":"aws_route53_record","name":"A-etcds","index":2,"provider_name":"aws","schema_version":2,"values":{"alias":[],"failover_routing_policy":[],"geolocation_routing_policy":[],"health_check_id":null,"latency_routing_policy":[],"multivalue_answer_routing_policy":null,"name":"etcd3","records":["10.0.10.12"],"set_identifier":null,"ttl":300,"type":"A","weighted_routing_policy":[],"zone_id":"module.route53.aws_route53_zone.internal.zone_id"}},{"address":"module.route53.aws_route53_record.CNAME-master","mode":"managed","type":"aws_route53_record","name":"CNAME-master","provider_name":"aws","schema_version":2,"values":{"alias":[],"failover_routing_policy":[],"geolocation_routing_policy":[],"health_check_id":null,"latency_routing_policy":[],"multivalue_answer_routing_policy":null,"name":"master","records":["asdf.com"],"set_identifier":null,"ttl":300,"type":"CNAME","weighted_routing_policy":[],"zone_id":"module.route53.aws_route53_zone.internal.zone_id"}},{"address":"module.route53.aws_route53_record.etcd-client-tcp","mode":"managed","type":"aws_route53_record","name":"etcd-client-tcp","provider_name":"aws","schema_version":2,"values":{"alias":[],"failover_routing_policy":[],"geolocation_routing_policy":[],"health_check_id":null,"latency_routing_policy":[],"multivalue_answer_routing_policy":null,"name":"_etcd-client._tcp","records":["0 0 2379 module.route53.aws_route53_record.A-etcds[0].fqdn","0 0 2379 module.route53.aws_route53_record.A-etcds[1].fqdn","0 0 2379 module.route53.aws_route53_record.A-etcds[2].fqdn"],"set_identifier":null,"ttl":300,"type":"SRV","weighted_routing_policy":[],"zone_id":"module.route53.aws_route53_zone.internal.zone_id"}},{"address":"module.route53.aws_route53_record.etcd-server-tcp","mode":"managed","type":"aws_route53_record","name":"etcd-server-tcp","provider_name":"aws","schema_version":2,"values":{"alias":[],"failover_routing_policy":[],"geolocation_routing_policy":[],"health_check_id":null,"latency_routing_policy":[],"multivalue_answer_routing_policy":null,"name":"_etcd-server-ssl._tcp","records":["0 0 2380 module.route53.aws_route53_record.A-etcds[0].fqdn","0 0 2380 module.route53.aws_route53_record.A-etcds[1].fqdn","0 0 2380 module.route53.aws_route53_record.A-etcds[2].fqdn"],"set_identifier":null,"ttl":300,"type":"SRV","weighted_routing_policy":[],"zone_id":"module.route53.aws_route53_zone.internal.zone_id"}},{"address":"module.route53.aws_route53_zone.internal","mode":"managed","type":"aws_route53_zone","name":"internal","provider_name":"aws","schema_version":0,"values":{"comment":"Kubernetes [tack] cluster DNS (internal)","delegation_set_id":null,"force_destroy":false,"name":"asdf.com","tags":{"KubernetesCluster":"asdfasdf","Name":"k8s-asdfasdf","builtWith":"terraform","kz8s":"asdfasdf"},"vpc":[]}},{"address":"module.route53.null_resource.dummy_dependency","mode":"managed","type":"null_resource","name":"dummy_dependency","provider_name":"null","schema_version":0,"values":{"triggers":null}}],"address":"module.route53"},{"resources":[{"address":"module.s3.aws_s3_bucket.pki","mode":"managed","type":"aws_s3_bucket","name":"pki","provider_name":"aws","schema_version":0,"values":{"acl":"private","bucket":"kz8s-pki-asdfasdf--","bucket_prefix":null,"cors_rule":[],"force_destroy":true,"grant":[],"lifecycle_rule":[],"logging":[],"object_lock_configuration":[],"policy":null,"replication_configuration":[],"server_side_encryption_configuration":[],"tags":{"KubernetesCluster":"asdfasdf","Name":"asdfasdf","builtWith":"terraform","kz8s":"asdfasdf"},"website":[]}}],"address":"module.s3"},{"resources":[{"address":"module.security.aws_security_group.bastion","mode":"managed","type":"aws_security_group","name":"bastion","provider_name":"aws","schema_version":1,"values":{"description":"kz8s bastion security group","egress":[{"cidr_blocks":["0.0.0.0/0"],"description":"","from_port":0,"ipv6_cidr_blocks":[],"prefix_list_ids":[],"protocol":"-1","security_groups":[],"self":false,"to_port":0}],"ingress":[{"cidr_blocks":["0.0.0.0/0"],"description":"","from_port":22,"ipv6_cidr_blocks":[],"prefix_list_ids":[],"protocol":"tcp","security_groups":[],"self":false,"to_port":22}],"name":"kz8s-bastion-asdfasdf","name_prefix":null,"revoke_rules_on_delete":false,"tags":{"KubernetesCluster":"asdfasdf","Name":"kz8s-bastion-asdfasdf","builtWith":"terraform","kz8s":"asdfasdf"},"timeouts":null,"vpc_id":"vpc-033a54f26ef5e2b4a"}},{"address":"module.security.aws_security_group.etcd","mode":"managed","type":"aws_security_group","name":"etcd","provider_name":"aws","schema_version":1,"values":{"description":"kz8s etcd security group","egress":[{"cidr_blocks":["0.0.0.0/0"],"description":"","from_port":0,"ipv6_cidr_blocks":[],"prefix_list_ids":[],"protocol":"-1","security_groups":[],"self":false,"to_port":0}],"ingress":[{"cidr_blocks":["10.0.0.0/16"],"description":"","from_port":0,"ipv6_cidr_blocks":[],"prefix_list_ids":[],"protocol":"-1","security_groups":[],"self":true,"to_port":0}],"name":"kz8s-etcd-asdfasdf","name_prefix":null,"revoke_rules_on_delete":false,"tags":{"KubernetesCluster":"asdfasdf","Name":"kz8s-etcd-asdfasdf","builtWith":"terraform","kz8s":"asdfasdf"},"timeouts":null,"vpc_id":"vpc-033a54f26ef5e2b4a"}},{"address":"module.security.aws_security_group.external-elb","mode":"managed","type":"aws_security_group","name":"external-elb","provider_name":"aws","schema_version":1,"values":{"description":"kz8s-asdfasdf master (apiserver) external elb","egress":[{"cidr_blocks":[],"description":"","from_port":0,"ipv6_cidr_blocks":[],"prefix_list_ids":[],"protocol":"-1","security_groups":["module.security.aws_security_group.etcd.id"],"self":false,"to_port":0}],"ingress":[{"cidr_blocks":["0.0.0.0/0"],"description":"","from_port":-1,"ipv6_cidr_blocks":[],"prefix_list_ids":[],"protocol":"icmp","security_groups":[],"self":false,"to_port":-1},{"cidr_blocks":["0.0.0.0/0"],"description":"","from_port":443,"ipv6_cidr_blocks":[],"prefix_list_ids":[],"protocol":"tcp","security_groups":[],"self":false,"to_port":443}],"name":"kz8s-master-external-elb-asdfasdf","name_prefix":null,"revoke_rules_on_delete":false,"tags":{"KubernetesCluster":"asdfasdf","Name":"kz8s-master-external-elb-asdfasdf","builtWith":"terraform","kz8s":"asdfasdf"},"timeouts":null,"vpc_id":"vpc-033a54f26ef5e2b4a"}},{"address":"module.security.aws_security_group.pki","mode":"managed","type":"aws_security_group","name":"pki","provider_name":"aws","schema_version":1,"values":{"description":"k8s pki security group","egress":[{"cidr_blocks":["0.0.0.0/0"],"description":"","from_port":0,"ipv6_cidr_blocks":[],"prefix_list_ids":[],"protocol":"-1","security_groups":[],"self":false,"to_port":0}],"ingress":[{"cidr_blocks":["10.0.0.0/16"],"description":"","from_port":0,"ipv6_cidr_blocks":[],"prefix_list_ids":[],"protocol":"-1","security_groups":[],"self":true,"to_port":0}],"name":"kz8s-pki-asdfasdf","name_prefix":null,"revoke_rules_on_delete":false,"tags":{"KubernetesCluster":"asdfasdf","Name":"kz8s-pki-asdfasdf","builtWith":"terraform","kz8s":"asdfasdf"},"timeouts":null,"vpc_id":"vpc-033a54f26ef5e2b4a"}},{"address":"module.security.aws_security_group.worker","mode":"managed","type":"aws_security_group","name":"worker","provider_name":"aws","schema_version":1,"values":{"description":"kz8s worker security group","egress":[{"cidr_blocks":["0.0.0.0/0"],"description":"","from_port":0,"ipv6_cidr_blocks":[],"prefix_list_ids":[],"protocol":"-1","security_groups":[],"self":false,"to_port":0}],"ingress":[{"cidr_blocks":["10.0.0.0/16"],"description":"","from_port":0,"ipv6_cidr_blocks":[],"prefix_list_ids":[],"protocol":"-1","security_groups":[],"self":true,"to_port":0}],"name":"kz8s-worker-asdfasdf","name_prefix":null,"revoke_rules_on_delete":false,"tags":{"KubernetesCluster":"asdfasdf","Name":"kz8s-worker-asdfasdf","builtWith":"terraform","kz8s":"asdfasdf"},"timeouts":null,"vpc_id":"vpc-033a54f26ef5e2b4a"}},{"address":"module.security.null_resource.dummy_dependency","mode":"managed","type":"null_resource","name":"dummy_dependency","provider_name":"null","schema_version":0,"values":{"triggers":null}}],"address":"module.security"},{"resources":[{"address":"module.worker.aws_autoscaling_group.worker","mode":"managed","type":"aws_autoscaling_group","name":"worker","provider_name":"aws","schema_version":0,"values":{"capacity_rebalance":null,"desired_capacity":3,"enabled_metrics":null,"force_delete":true,"health_check_grace_period":60,"health_check_type":"EC2","initial_lifecycle_hook":[],"instance_refresh":[],"launch_configuration":"module.worker.aws_launch_configuration.worker.name","launch_template":[],"load_balancers":null,"max_instance_lifetime":null,"max_size":5,"metrics_granularity":"1Minute","min_elb_capacity":null,"min_size":1,"mixed_instances_policy":[],"name":"worker-general-asdfasdf","name_prefix":null,"placement_group":null,"protect_from_scale_in":false,"suspended_processes":null,"tag":[{"key":"KubernetesCluster","propagate_at_launch":true,"value":"asdfasdf"},{"key":"Name","propagate_at_launch":true,"value":"kz8s-worker"},{"key":"builtWith","propagate_at_launch":true,"value":"terraform"},{"key":"depends-id","propagate_at_launch":false,"value":"module.route53.null_resource.dummy_dependency.id"},{"key":"kz8s","propagate_at_launch":true,"value":"asdfasdf"},{"key":"role","propagate_at_launch":true,"value":"worker"},{"key":"version","propagate_at_launch":true,"value":"v1.5.1_coreos.0"},{"key":"visibility","propagate_at_launch":true,"value":"private"}],"tags":null,"target_group_arns":null,"termination_policies":null,"timeouts":null,"vpc_zone_identifier":[""],"wait_for_capacity_timeout":"10m","wait_for_elb_capacity":null}},{"address":"module.worker.aws_launch_configuration.worker","mode":"managed","type":"aws_launch_configuration","name":"worker","provider_name":"aws","schema_version":0,"values":{"associate_public_ip_address":false,"ebs_block_device":[{"delete_on_termination":true,"device_name":"/dev/xvdf","no_device":null,"volume_size":250,"volume_type":"gp2"}],"enable_monitoring":true,"ephemeral_block_device":[],"iam_instance_profile":"kz8s-worker-asdfasdf","image_id":"","instance_type":"m3.large","name_prefix":null,"placement_tenancy":null,"root_block_device":[{"delete_on_termination":true,"volume_size":52,"volume_type":"gp2"}],"security_groups":["module.security.aws_security_group.worker.id"],"spot_price":null,"user_data":"a2c67cfdb8540764d1d74f23c43ced2049e4d364","user_data_base64":null,"vpc_classic_link_id":null,"vpc_classic_link_security_groups":null}},{"address":"module.worker.null_resource.dummy_dependency","mode":"managed","type":"null_resource","name":"dummy_dependency","provider_name":"null","schema_version":0,"values":{"triggers":null}}],"address":"module.worker"}]}},"resource_changes":[{"address":"module.bastion.aws_instance.bastion","module_address":"module.bastion","mode":"managed","type":"aws_instance","name":"bastion","provider_name":"aws","change":{"actions":["create"],"before":null,"after":{"ami":"","associate_public_ip_address":true,"credit_specification":[],"disable_api_termination":null,"ebs_optimized":null,"get_password_data":false,"hibernation":null,"iam_instance_profile":"kz8s-bastion-asdfasdf","instance_initiated_shutdown_behavior":null,"instance_type":"t2.nano","monitoring":null,"source_dest_check":true,"tags":{"Name":"kz8s-bastion","builtWith":"terraform","depends-id":"vpc-033a54f26ef5e2b4a","kz8s":"asdfasdf","role":"bastion"},"timeouts":null,"user_data":"313c04dd2143d3162f02e87fb1e34bc941b1da74","user_data_base64":null,"volume_tags":null,"vpc_security_group_ids":["module.security.aws_security_group.bastion.id"]},"after_unknown":{"arn":true,"availability_zone":true,"cpu_core_count":true,"cpu_threads_per_core":true,"credit_specification":[],"ebs_block_device":true,"enclave_options":true,"ephemeral_block_device":true,"host_id":true,"id":true,"instance_state":true,"ipv6_address_count":true,"ipv6_addresses":true,"key_name":true,"metadata_options":true,"network_interface":true,"outpost_arn":true,"password_data":true,"placement_group":true,"primary_network_interface_id":true,"private_dns":true,"private_ip":true,"public_dns":true,"public_ip":true,"root_block_device":true,"secondary_private_ips":true,"security_groups":true,"subnet_id":true,"tags":{},"tenancy":true,"vpc_security_group_ids":[false]}}},{"address":"module.bastion.null_resource.dummy_dependency","module_address":"module.bastion","mode":"managed","type":"null_resource","name":"dummy_dependency","provider_name":"null","change":{"actions":["create"],"before":null,"after":{"triggers":null},"after_unknown":{"id":true}}},{"address":"module.etcd.aws_elb.external","module_address":"module.etcd","mode":"managed","type":"aws_elb","name":"external","provider_name":"aws","change":{"actions":["create"],"before":null,"after":{"access_logs":[],"connection_draining":false,"connection_draining_timeout":300,"cross_zone_load_balancing":false,"health_check":[{"healthy_threshold":2,"interval":10,"target":"SSL:443","timeout":3,"unhealthy_threshold":6}],"idle_timeout":3600,"listener":[{"instance_port":443,"instance_protocol":"tcp","lb_port":443,"lb_protocol":"tcp","ssl_certificate_id":""}],"name":"kz8s-apiserver-asdfasdf","name_prefix":null,"security_groups":["module.security.aws_security_group.external-elb.id"],"subnets":[""],"tags":{"KubernetesCluster":"asdfasdf","Name":"kz8s-apiserver","builtWith":"terraform","kz8s":"asdfasdfi","role":"apiserver","version":"v1.5.1_coreos.0","visibility":"public"}},"after_unknown":{"access_logs":[],"arn":true,"availability_zones":true,"dns_name":true,"health_check":[{}],"id":true,"instances":true,"internal":true,"listener":[{}],"security_groups":[false],"source_security_group":true,"source_security_group_id":true,"subnets":[false],"tags":{},"zone_id":true}}},{"address":"module.etcd.aws_elb_attachment.master[0]","module_address":"module.etcd","mode":"managed","type":"aws_elb_attachment","name":"master","index":0,"provider_name":"aws","change":{"actions":["create"],"before":null,"after":{"elb":"module.etcd.aws_elb.external.id","instance":"module.etcd.aws_instance.etcd[0].id"},"after_unknown":{"id":true}}},{"address":"module.etcd.aws_elb_attachment.master[1]","module_address":"module.etcd","mode":"managed","type":"aws_elb_attachment","name":"master","index":1,"provider_name":"aws","change":{"actions":["create"],"before":null,"after":{"elb":"module.etcd.aws_elb.external.id","instance":"module.etcd.aws_instance.etcd[1].id"},"after_unknown":{"id":true}}},{"address":"module.etcd.aws_elb_attachment.master[2]","module_address":"module.etcd","mode":"managed","type":"aws_elb_attachment","name":"master","index":2,"provider_name":"aws","change":{"actions":["create"],"before":null,"after":{"elb":"module.etcd.aws_elb.external.id","instance":"module.etcd.aws_instance.etcd[2].id"},"after_unknown":{"id":true}}},{"address":"module.etcd.aws_instance.etcd[0]","module_address":"module.etcd","mode":"managed","type":"aws_instance","name":"etcd","index":0,"provider_name":"aws","change":{"actions":["create"],"before":null,"after":{"ami":"","associate_public_ip_address":false,"credit_specification":[],"disable_api_termination":null,"ebs_optimized":null,"get_password_data":false,"hibernation":null,"iam_instance_profile":"kz8s-master-asdfasdf","instance_initiated_shutdown_behavior":null,"instance_type":"m3.large","monitoring":null,"private_ip":"10.0.10.10","root_block_device":[{"delete_on_termination":true,"tags":null,"volume_size":124,"volume_type":"gp2"}],"source_dest_check":true,"tags":{"KubernetesCluster":"asdfasdf","Name":"kz8s-etcd1","builtWith":"terraform","depends-id":"module.route53.null_resource.dummy_dependency.id","kz8s":"asdfasdf","role":"etcd,apiserver","version":"v1.5.1_coreos.0","visibility":"private"},"timeouts":null,"user_data":"cacbf9a4fb66bd39e5f8dd4121db2eba070f03f2","user_data_base64":null,"volume_tags":null,"vpc_security_group_ids":["module.security.aws_security_group.etcd.id"]},"after_unknown":{"arn":true,"availability_zone":true,"cpu_core_count":true,"cpu_threads_per_core":true,"credit_specification":[],"ebs_block_device":true,"enclave_options":true,"ephemeral_block_device":true,"host_id":true,"id":true,"instance_state":true,"ipv6_address_count":true,"ipv6_addresses":true,"key_name":true,"metadata_options":true,"network_interface":true,"outpost_arn":true,"password_data":true,"placement_group":true,"primary_network_interface_id":true,"private_dns":true,"public_dns":true,"public_ip":true,"root_block_device":[{"device_name":true,"encrypted":true,"iops":true,"kms_key_id":true,"throughput":true,"volume_id":true}],"secondary_private_ips":true,"security_groups":true,"subnet_id":true,"tags":{},"tenancy":true,"vpc_security_group_ids":[false]}}},{"address":"module.etcd.aws_instance.etcd[1]","module_address":"module.etcd","mode":"managed","type":"aws_instance","name":"etcd","index":1,"provider_name":"aws","change":{"actions":["create"],"before":null,"after":{"ami":"","associate_public_ip_address":false,"credit_specification":[],"disable_api_termination":null,"ebs_optimized":null,"get_password_data":false,"hibernation":null,"iam_instance_profile":"kz8s-master-asdfasdf","instance_initiated_shutdown_behavior":null,"instance_type":"m3.large","monitoring":null,"private_ip":"10.0.10.11","root_block_device":[{"delete_on_termination":true,"tags":null,"volume_size":124,"volume_type":"gp2"}],"source_dest_check":true,"tags":{"KubernetesCluster":"asdfasdf","Name":"kz8s-etcd2","builtWith":"terraform","depends-id":"module.route53.null_resource.dummy_dependency.id","kz8s":"asdfasdf","role":"etcd,apiserver","version":"v1.5.1_coreos.0","visibility":"private"},"timeouts":null,"user_data":"d005afacdaf8be98e8c2ef32afa49eb27eed9160","user_data_base64":null,"volume_tags":null,"vpc_security_group_ids":["module.security.aws_security_group.etcd.id"]},"after_unknown":{"arn":true,"availability_zone":true,"cpu_core_count":true,"cpu_threads_per_core":true,"credit_specification":[],"ebs_block_device":true,"enclave_options":true,"ephemeral_block_device":true,"host_id":true,"id":true,"instance_state":true,"ipv6_address_count":true,"ipv6_addresses":true,"key_name":true,"metadata_options":true,"network_interface":true,"outpost_arn":true,"password_data":true,"placement_group":true,"primary_network_interface_id":true,"private_dns":true,"public_dns":true,"public_ip":true,"root_block_device":[{"device_name":true,"encrypted":true,"iops":true,"kms_key_id":true,"throughput":true,"volume_id":true}],"secondary_private_ips":true,"security_groups":true,"subnet_id":true,"tags":{},"tenancy":true,"vpc_security_group_ids":[false]}}},{"address":"module.etcd.aws_instance.etcd[2]","module_address":"module.etcd","mode":"managed","type":"aws_instance","name":"etcd","index":2,"provider_name":"aws","change":{"actions":["create"],"before":null,"after":{"ami":"","associate_public_ip_address":false,"credit_specification":[],"disable_api_termination":null,"ebs_optimized":null,"get_password_data":false,"hibernation":null,"iam_instance_profile":"kz8s-master-asdfasdf","instance_initiated_shutdown_behavior":null,"instance_type":"m3.large","monitoring":null,"private_ip":"10.0.10.12","root_block_device":[{"delete_on_termination":true,"tags":null,"volume_size":124,"volume_type":"gp2"}],"source_dest_check":true,"tags":{"KubernetesCluster":"asdfasdf","Name":"kz8s-etcd3","builtWith":"terraform","depends-id":"module.route53.null_resource.dummy_dependency.id","kz8s":"asdfasdf","role":"etcd,apiserver","version":"v1.5.1_coreos.0","visibility":"private"},"timeouts":null,"user_data":"2d92052324afddff163e6dd1e11c519cbc056cfb","user_data_base64":null,"volume_tags":null,"vpc_security_group_ids":["module.security.aws_security_group.etcd.id"]},"after_unknown":{"arn":true,"availability_zone":true,"cpu_core_count":true,"cpu_threads_per_core":true,"credit_specification":[],"ebs_block_device":true,"enclave_options":true,"ephemeral_block_device":true,"host_id":true,"id":true,"instance_state":true,"ipv6_address_count":true,"ipv6_addresses":true,"key_name":true,"metadata_options":true,"network_interface":true,"outpost_arn":true,"password_data":true,"placement_group":true,"primary_network_interface_id":true,"private_dns":true,"public_dns":true,"public_ip":true,"root_block_device":[{"device_name":true,"encrypted":true,"iops":true,"kms_key_id":true,"throughput":true,"volume_id":true}],"secondary_private_ips":true,"security_groups":true,"subnet_id":true,"tags":{},"tenancy":true,"vpc_security_group_ids":[false]}}},{"address":"module.etcd.data.template_file.cloud-config[0]","module_address":"module.etcd","mode":"data","type":"template_file","name":"cloud-config","index":0,"provider_name":"template","change":{"actions":["read"],"before":null,"after":{"filename":null,"template":"#cloud-config\n\n---\ncoreos:\n\n  flannel:\n    interface: $private_ipv4\n    etcd_cafile: /etc/kubernetes/ssl/ca.pem\n    etcd_certfile: /etc/kubernetes/ssl/k8s-etcd.pem\n    etcd_keyfile: /etc/kubernetes/ssl/k8s-etcd-key.pem\n    etcd_endpoints: https://etcd.${ internal-tld }:2379\n\n  locksmith:\n    endpoint: https://etcd.${ internal-tld }:2379\n    etcd_cafile: /etc/kubernetes/ssl/ca.pem\n    etcd_certfile: /etc/kubernetes/ssl/k8s-etcd.pem\n    etcd_keyfile: /etc/kubernetes/ssl/k8s-etcd-key.pem\n\n  units:\n    - name: etcd-member.service\n      command: start\n      drop-ins:\n        - name: 01-wait-for-certs.conf\n          content: |\n            [Unit]\n            After=create-certificates.service\n            Requires=create-certificates.service\n            ConditionFileNotEmpty=/etc/kubernetes/ssl/ca.pem\n            ConditionFileNotEmpty=/etc/kubernetes/ssl/k8s-etcd.pem\n            ConditionFileNotEmpty=/etc/kubernetes/ssl/k8s-etcd-key.pem\n\n        - name: 10-environment.conf\n          content: |\n            [Service]\n            Environment=\"ETCD_ADVERTISE_CLIENT_URLS=https://${ fqdn }:2379\"\n            Environment=\"ETCD_CERT_FILE=/etc/ssl/certs/k8s-etcd.pem\"\n            Environment=\"ETCD_CLIENT_CERT_AUTH=true\"\n            Environment=\"ETCD_DISCOVERY_SRV=${ internal-tld }\"\n            Environment=\"ETCD_INITIAL_ADVERTISE_PEER_URLS=https://${ fqdn }:2380\"\n            Environment=\"ETCD_INITIAL_CLUSTER_STATE=new\"\n            Environment=\"ETCD_INITIAL_CLUSTER_TOKEN=${ cluster-token }\"\n            Environment=\"ETCD_KEY_FILE=/etc/ssl/certs/k8s-etcd-key.pem\"\n            Environment=\"ETCD_LISTEN_CLIENT_URLS=https://0.0.0.0:2379\"\n            Environment=\"ETCD_LISTEN_PEER_URLS=https://0.0.0.0:2380\"\n            Environment=\"ETCD_NAME=${ hostname }\"\n            Environment=\"ETCD_PEER_CERT_FILE=/etc/ssl/certs/k8s-etcd.pem\"\n            Environment=\"ETCD_PEER_KEY_FILE=/etc/ssl/certs/k8s-etcd-key.pem\"\n            Environment=\"ETCD_PEER_TRUSTED_CA_FILE=/etc/ssl/certs/ca.pem\"\n            Environment=\"ETCD_SSL_DIR=/etc/kubernetes/ssl\"\n            Environment=\"ETCD_TRUSTED_CA_FILE=/etc/ssl/certs/ca.pem\"\n\n    - name: flanneld.service\n      command: start\n      drop-ins:\n        - name: 50-network-config.conf\n          content: |\n            [Unit]\n            Wants=create-certificates.service\n            After=create-certificates.service\n            [Service]\n            EnvironmentFile=/etc/environment\n            Environment=\"ETCD_SSL_DIR=/etc/kubernetes/ssl\"\n            ExecStartPre=-/usr/bin/etcdctl mk /coreos.com/network/config \\\n              '{ \"Network\": \"${ pod-ip-range }\", \"Backend\": { \"Type\": \"vxlan\" } }'\n            Restart=always\n            RestartSec=10\n\n    - name: docker.service\n      command: start\n      drop-ins:\n        - name: 40-flannel.conf\n          content: |\n            [Unit]\n            After=flanneld.service\n            Requires=flanneld.service\n            [Service]\n            Restart=always\n            RestartSec=10\n\n    - name: download-cfssl.service\n      command: start\n      content: |\n        [Unit]\n        After=network-online.target\n        Requires=network-online.target\n        Before=etcd-member.service\n        Description=Download cfssl\n        [Service]\n        Type=oneshot\n        RemainAfterExit=yes\n        ExecStartPre=-/usr/bin/mkdir --parents /opt/bin\n        ExecStartPre=/usr/bin/curl -L -o /opt/bin/cfssl https://pkg.cfssl.org/R1.2/cfssl_linux-amd64\n        ExecStartPre=/usr/bin/curl -L -o /opt/bin/cfssljson https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64\n        ExecStart=/usr/bin/chmod +x /opt/bin/cfssl /opt/bin/cfssljson\n\n    - name: create-certificates.service\n      command: start\n      content: |\n        [Unit]\n        After=download-cfssl.service\n        Before=flannel.service\n        ConditionFileIsExecutable=/opt/bin/cfssl\n        Description=Get ssl artifacts from s3 bucket using IAM role and create local certificates\n        Requires=download-cfssl.service\n        [Service]\n        ExecStartPre=-/usr/bin/mkdir -p /etc/kubernetes/ssl\n        ExecStartPre=/opt/bin/fetch-from-s3 service-account-key.pem\n        ExecStartPre=/opt/bin/fetch-from-s3 ca.pem\n        ExecStart=/opt/bin/create-certificates\n        RemainAfterExit=yes\n        Type=oneshot\n\n    - name: prefetch-rkt-hyperkube.service\n      command: start\n      content: |\n        [Unit]\n        After=network-online.target\n        Requires=network-online.target\n        Description=Prefetch rkt Hyperkube\n        [Service]\n        Type=oneshot\n        RemainAfterExit=yes\n        ExecStartPre=/usr/bin/rkt trust --trust-keys-from-https --prefix=quay.io/coreos/hyperkube\n        ExecStart=/usr/bin/rkt fetch ${ hyperkube-image }:${ hyperkube-tag }\n\n    - name: prefetch-docker-hyperkube.service\n      command: start\n      content: |\n        [Unit]\n        After=docker.service\n        Requires=docker.service\n        Description=Prefetch docker Hyperkube\n        [Service]\n        Type=oneshot\n        RemainAfterExit=yes\n        ExecStart=/usr/bin/docker pull ${ hyperkube }\n\n    - name: kubelet.service\n      command: start\n      runtime: true\n      content: |\n        [Unit]\n        ConditionFileNotEmpty=/etc/kubernetes/ssl/service-account-key.pem\n        ConditionFileIsExecutable=/usr/lib/coreos/kubelet-wrapper\n        After=flanneld.service\n        After=prefetch-rkt-hyperkube.service\n        After=prefetch-docker-hyperkube.service\n        Requires=flanneld.service\n        [Service]\n        EnvironmentFile=-/etc/environment\n        Environment=\"KUBELET_ACI=${ hyperkube-image }\"\n        Environment=\"KUBELET_VERSION=${ hyperkube-tag }\"\n        Environment=\"RKT_OPTS=\\\n          --volume dns,kind=host,source=/etc/resolv.conf \\\n          --mount volume=dns,target=/etc/resolv.conf \\\n          --volume rkt,kind=host,source=/opt/bin/host-rkt \\\n          --mount volume=rkt,target=/usr/bin/rkt \\\n          --volume var-lib-rkt,kind=host,source=/var/lib/rkt \\\n          --mount volume=var-lib-rkt,target=/var/lib/rkt \\\n          --volume stage,kind=host,source=/tmp \\\n          --mount volume=stage,target=/tmp \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log\"\n        ExecStartPre=/usr/bin/mkdir -p /var/log/containers\n        ExecStartPre=/usr/bin/mkdir -p /var/lib/kubelet\n        ExecStartPre=/usr/bin/mount --bind /var/lib/kubelet /var/lib/kubelet\n        ExecStartPre=/usr/bin/mount --make-shared /var/lib/kubelet\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged=true \\\n          --api-servers=http://127.0.0.1:8080 \\\n          --cloud-provider=aws \\\n          --cluster-dns=${ dns-service-ip } \\\n          --cluster-domain=${ cluster-domain } \\\n          --kubeconfig=/etc/kubernetes/kubeconfig.yml \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --node-labels node-role.kubernetes.io/master \\\n          --register-node=true \\\n          --register-with-taints node-role.kubernetes.io/master='':NoSchedule\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\n  update:\n    reboot-strategy: etcd-lock\n\nwrite-files:\n\n  - path: /etc/environment\n    permissions: 0644\n    content: |\n      COREOS_PRIVATE_IPV4=$private_ipv4\n      ETCD_CA_FILE=/etc/kubernetes/ssl/ca.pem\n      ETCD_CERT_FILE=/etc/kubernetes/ssl/k8s-etcd.pem\n      ETCD_KEY_FILE=/etc/kubernetes/ssl/k8s-etcd-key.pem\n      ETCDCTL_CA_FILE=/etc/kubernetes/ssl/ca.pem\n      ETCDCTL_CERT_FILE=/etc/kubernetes/ssl/k8s-etcd.pem\n      ETCDCTL_KEY_FILE=/etc/kubernetes/ssl/k8s-etcd-key.pem\n      ETCDCTL_ENDPOINT=https://${ fqdn }:2379\n\n  - path: /opt/bin/host-rkt\n    permissions: 0755\n    owner: root:root\n    content: |\n      #!/bin/sh\n      exec nsenter -m -u -i -n -p -t 1 -- /usr/bin/rkt \"$@\"\n\n  - path: /etc/kubernetes/kubeconfig.yml\n    content: |\n      apiVersion: v1\n      kind: Config\n      clusters:\n        - name: local\n          cluster:\n            server: http://127.0.0.1:8080\n      users:\n        - name: kubelet\n      contexts:\n        - name: kubelet-context\n          context:\n            cluster: local\n            user: kubelet\n      current-context: kubelet-context\n\n  - path: /etc/kubernetes/manifests/kube-apiserver.yml\n    content: |\n      apiVersion: v1\n      kind: Pod\n      metadata:\n        name: kube-apiserver\n        namespace: kube-system\n      spec:\n        hostNetwork: true\n        containers:\n        - name: kube-apiserver\n          image: ${ hyperkube }\n          command:\n          - /hyperkube\n          - apiserver\n          - --admission-control=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,ResourceQuota\n          - --advertise-address=$private_ipv4\n          - --apiserver-count=${ apiserver-count }\n          - --allow-privileged=true\n          - --anonymous-auth=false\n          - --client-ca-file=/etc/kubernetes/ssl/ca.pem\n          - --cloud-provider=aws\n          - --enable-swagger-ui\n          - --etcd-cafile=/etc/kubernetes/ssl/ca.pem\n          - --etcd-certfile=/etc/kubernetes/ssl/k8s-etcd.pem\n          - --etcd-keyfile=/etc/kubernetes/ssl/k8s-etcd-key.pem\n          - --etcd-servers=https://etcd.${ internal-tld }:2379\n          - --runtime-config=extensions/v1beta1=true,extensions/v1beta1/thirdpartyresources=true,apps/v1beta1=true\n          - --secure-port=443\n          - --service-account-key-file=/etc/kubernetes/ssl/service-account-key.pem\n          - --service-account-lookup\n          - --service-cluster-ip-range=${ service-cluster-ip-range }\n          - --tls-cert-file=/etc/kubernetes/ssl/k8s-apiserver.pem\n          - --tls-private-key-file=/etc/kubernetes/ssl/k8s-apiserver-key.pem\n          - --v=2\n          livenessProbe:\n            httpGet:\n              host: 127.0.0.1\n              port: 8080\n              path: /healthz\n            initialDelaySeconds: 15\n            timeoutSeconds: 15\n          ports:\n          - containerPort: 443\n            hostPort: 443\n            name: https\n          - containerPort: 8080\n            hostPort: 8080\n            name: local\n          volumeMounts:\n          - mountPath: /etc/kubernetes/ssl\n            name: ssl-certs-kubernetes\n            readOnly: true\n          - mountPath: /etc/ssl/certs\n            name: ssl-certs-host\n            readOnly: true\n        volumes:\n        - hostPath:\n            path: /etc/kubernetes/ssl\n          name: ssl-certs-kubernetes\n        - hostPath:\n            path: /usr/share/ca-certificates\n          name: ssl-certs-host\n\n  - path: /etc/kubernetes/manifests/kube-controller-manager.yml\n    content: |\n      apiVersion: v1\n      kind: Pod\n      metadata:\n        name: kube-controller-manager\n        namespace: kube-system\n      spec:\n        hostNetwork: true\n        containers:\n        - name: kube-controller-manager\n          image: ${ hyperkube }\n          command:\n          - /hyperkube\n          - controller-manager\n          - --cloud-provider=aws\n          - --leader-elect=true\n          - --master=http://127.0.0.1:8080\n          - --root-ca-file=/etc/kubernetes/ssl/ca.pem\n          - --service-account-private-key-file=/etc/kubernetes/ssl/service-account-key.pem\n          resources:\n            requests:\n              cpu: 200m\n          livenessProbe:\n            httpGet:\n              host: 127.0.0.1\n              path: /healthz\n              port: 10252\n            initialDelaySeconds: 15\n            timeoutSeconds: 1\n          volumeMounts:\n          - mountPath: /etc/kubernetes/ssl\n            name: ssl-certs-kubernetes\n            readOnly: true\n          - mountPath: /etc/ssl/certs\n            name: ssl-certs-host\n            readOnly: true\n        volumes:\n        - hostPath:\n            path: /etc/kubernetes/ssl\n          name: ssl-certs-kubernetes\n        - hostPath:\n            path: /usr/share/ca-certificates\n          name: ssl-certs-host\n\n  - path: /etc/kubernetes/manifests/kube-proxy.yml\n    content: |\n      apiVersion: v1\n      kind: Pod\n      metadata:\n        name: kube-proxy\n        namespace: kube-system\n      spec:\n        hostNetwork: true\n        containers:\n        - name: kube-proxy\n          image: ${ hyperkube }\n          command:\n          - /hyperkube\n          - proxy\n          - --master=http://127.0.0.1:8080\n          securityContext:\n            privileged: true\n          volumeMounts:\n          - mountPath: /etc/ssl/certs\n            name: ssl-certs-host\n            readOnly: true\n          - mountPath: /var/run/dbus\n            name: dbus\n            readOnly: false\n        volumes:\n        - hostPath:\n            path: /usr/share/ca-certificates\n          name: ssl-certs-host\n        - hostPath:\n            path: /var/run/dbus\n          name: dbus\n\n  - path: /etc/kubernetes/manifests/kube-scheduler.yml\n    content: |\n      apiVersion: v1\n      kind: Pod\n      metadata:\n        name: kube-scheduler\n        namespace: kube-system\n      spec:\n        hostNetwork: true\n        containers:\n        - name: kube-scheduler\n          image: ${ hyperkube }\n          command:\n          - /hyperkube\n          - scheduler\n          - --leader-elect=true\n          - --master=http://127.0.0.1:8080\n          resources:\n            requests:\n              cpu: 100m\n          livenessProbe:\n            httpGet:\n              host: 127.0.0.1\n              path: /healthz\n              port: 10251\n            initialDelaySeconds: 15\n            timeoutSeconds: 1\n\n  - path: /etc/logrotate.d/docker-containers\n    content: |\n      /var/lib/docker/containers/*/*.log {\n        rotate 7\n        daily\n        compress\n        size=1M\n        missingok\n        delaycompress\n        copytruncate\n      }\n\n  - path: /opt/bin/fetch-from-s3\n    permissions: 0755\n    owner: root:root\n    content: |\n      #!/bin/bash -e\n      until /usr/bin/rkt run \\\n        --net=host \\\n        --trust-keys-from-https \\\n        --volume=dns,kind=host,source=/etc/resolv.conf,readOnly=true --mount volume=dns,target=/etc/resolv.conf \\\n        --volume=ssl,kind=host,source=/etc/kubernetes/ssl,readOnly=false --mount=volume=ssl,target=/etc/kubernetes/ssl \\\n        quay.io/coreos/awscli -- aws s3 cp s3://${ s3-bucket }/$1 /etc/kubernetes/ssl\n      do\n        echo \"retrying\"\n        sleep 5.2\n      done\n      echo \"✓\"\n\n  - path: /opt/bin/wait-for-certs\n    permissions: 0755\n    owner: root:root\n    content: |\n      #!/bin/bash -e\n      until ls /etc/kubernetes/ssl\n      do\n        echo \"retrying\"\n        sleep 5.2\n      done\n      echo \"✓\"\n\n  - path: /opt/bin/create-certificates\n    permissions: 0755\n    owner: root:root\n    content: |\n      #!/bin/bash -vex\n\n      OUTDIR=/etc/kubernetes/ssl\n\n      function error {\n        echo \"✗ Error on line $1\"'!'\n        exit 1\n      }\n      trap 'error $LINENO' ERR\n\n      until printf \".\" \u0026\u0026 curl -d '{\"label\":\"primary\"}' http://pki.${ internal-tld }:8888/api/v1/cfssl/info \u0026\u003e/dev/null\n      do sleep 5.2; done; echo \"✓\"\n\n      DNS1=\"kubernetes\"\n      DNS2=\"kubernetes.default\"\n      DNS3=\"kubernetes.default.svc\"\n      DNS4=\"kubernetes.default.svc.cluster.local\"\n      DEFAULT_HOSTS=\"$DNS1,$DNS2,$DNS3,$DNS4,127.0.0.1\"\n\n      function csr {\n        cat \u003c\u003cEOF\n      {\"CN\":\"$1\",\"hosts\":[\"\"],\"key\":{\"algo\":\"rsa\",\"size\":2048}}\n      EOF\n      }\n\n      function generate {\n\n        CN=$1\n        PROFILE=$2\n        HOSTS=$3\n\n        echo \"$(csr $CN)\" \\\n          | /opt/bin/cfssl gencert \\\n            -remote=pki.${ internal-tld }:8888 \\\n            -profile=$PROFILE \\\n            -hostname=\"$HOSTS\" - \\\n          | /opt/bin/cfssljson -bare $CN\n\n        chmod 0644 $${CN}.pem $${CN}-key.pem\n\n      }\n\n      mkdir -p $OUTDIR \u0026\u0026 cd $OUTDIR\n\n      generate k8s-apiserver client-server \"$${DEFAULT_HOSTS},${ ip-k8s-service },master.${ internal-tld },${ external-elb }\"\n      generate k8s-etcd client-server \"etcd.${ internal-tld },${ fqdn }\"\n\n  - path: /etc/kubernetes/cni/net.d/10-flannel.conf\n    content: |\n        {\n            \"name\": \"podnet\",\n            \"type\": \"flannel\",\n            \"delegate\": {\n                \"isDefaultGateway\": true\n            }\n        }\n","vars":{"apiserver-count":"3","cluster-domain":"cluster.local","cluster-token":"etcd-cluster-asdfasdf","dns-service-ip":"10.3.0.10","external-elb":"module.etcd.aws_elb.external.dns_name","fqdn":"etcd1.asdf.com","hostname":"etcd1","hyperkube":"quay.io/coreos/hyperkube:v1.5.1_coreos.0","hyperkube-image":"quay.io/coreos/hyperkube","hyperkube-tag":"v1.5.1_coreos.0","internal-tld":"asdf.com","ip-k8s-service":"10.3.0.1","pod-ip-range":"10.2.0.0/16","region":"","s3-bucket":"kz8s-pki-asdfasdf--","service-cluster-ip-range":"10.3.0.0/24"}},"after_unknown":{"id":true,"rendered":true,"vars":{}}}},{"address":"module.etcd.data.template_file.cloud-config[1]","module_address":"module.etcd","mode":"data","type":"template_file","name":"cloud-config","index":1,"provider_name":"template","change":{"actions":["read"],"before":null,"after":{"filename":null,"template":"#cloud-config\n\n---\ncoreos:\n\n  flannel:\n    interface: $private_ipv4\n    etcd_cafile: /etc/kubernetes/ssl/ca.pem\n    etcd_certfile: /etc/kubernetes/ssl/k8s-etcd.pem\n    etcd_keyfile: /etc/kubernetes/ssl/k8s-etcd-key.pem\n    etcd_endpoints: https://etcd.${ internal-tld }:2379\n\n  locksmith:\n    endpoint: https://etcd.${ internal-tld }:2379\n    etcd_cafile: /etc/kubernetes/ssl/ca.pem\n    etcd_certfile: /etc/kubernetes/ssl/k8s-etcd.pem\n    etcd_keyfile: /etc/kubernetes/ssl/k8s-etcd-key.pem\n\n  units:\n    - name: etcd-member.service\n      command: start\n      drop-ins:\n        - name: 01-wait-for-certs.conf\n          content: |\n            [Unit]\n            After=create-certificates.service\n            Requires=create-certificates.service\n            ConditionFileNotEmpty=/etc/kubernetes/ssl/ca.pem\n            ConditionFileNotEmpty=/etc/kubernetes/ssl/k8s-etcd.pem\n            ConditionFileNotEmpty=/etc/kubernetes/ssl/k8s-etcd-key.pem\n\n        - name: 10-environment.conf\n          content: |\n            [Service]\n            Environment=\"ETCD_ADVERTISE_CLIENT_URLS=https://${ fqdn }:2379\"\n            Environment=\"ETCD_CERT_FILE=/etc/ssl/certs/k8s-etcd.pem\"\n            Environment=\"ETCD_CLIENT_CERT_AUTH=true\"\n            Environment=\"ETCD_DISCOVERY_SRV=${ internal-tld }\"\n            Environment=\"ETCD_INITIAL_ADVERTISE_PEER_URLS=https://${ fqdn }:2380\"\n            Environment=\"ETCD_INITIAL_CLUSTER_STATE=new\"\n            Environment=\"ETCD_INITIAL_CLUSTER_TOKEN=${ cluster-token }\"\n            Environment=\"ETCD_KEY_FILE=/etc/ssl/certs/k8s-etcd-key.pem\"\n            Environment=\"ETCD_LISTEN_CLIENT_URLS=https://0.0.0.0:2379\"\n            Environment=\"ETCD_LISTEN_PEER_URLS=https://0.0.0.0:2380\"\n            Environment=\"ETCD_NAME=${ hostname }\"\n            Environment=\"ETCD_PEER_CERT_FILE=/etc/ssl/certs/k8s-etcd.pem\"\n            Environment=\"ETCD_PEER_KEY_FILE=/etc/ssl/certs/k8s-etcd-key.pem\"\n            Environment=\"ETCD_PEER_TRUSTED_CA_FILE=/etc/ssl/certs/ca.pem\"\n            Environment=\"ETCD_SSL_DIR=/etc/kubernetes/ssl\"\n            Environment=\"ETCD_TRUSTED_CA_FILE=/etc/ssl/certs/ca.pem\"\n\n    - name: flanneld.service\n      command: start\n      drop-ins:\n        - name: 50-network-config.conf\n          content: |\n            [Unit]\n            Wants=create-certificates.service\n            After=create-certificates.service\n            [Service]\n            EnvironmentFile=/etc/environment\n            Environment=\"ETCD_SSL_DIR=/etc/kubernetes/ssl\"\n            ExecStartPre=-/usr/bin/etcdctl mk /coreos.com/network/config \\\n              '{ \"Network\": \"${ pod-ip-range }\", \"Backend\": { \"Type\": \"vxlan\" } }'\n            Restart=always\n            RestartSec=10\n\n    - name: docker.service\n      command: start\n      drop-ins:\n        - name: 40-flannel.conf\n          content: |\n            [Unit]\n            After=flanneld.service\n            Requires=flanneld.service\n            [Service]\n            Restart=always\n            RestartSec=10\n\n    - name: download-cfssl.service\n      command: start\n      content: |\n        [Unit]\n        After=network-online.target\n        Requires=network-online.target\n        Before=etcd-member.service\n        Description=Download cfssl\n        [Service]\n        Type=oneshot\n        RemainAfterExit=yes\n        ExecStartPre=-/usr/bin/mkdir --parents /opt/bin\n        ExecStartPre=/usr/bin/curl -L -o /opt/bin/cfssl https://pkg.cfssl.org/R1.2/cfssl_linux-amd64\n        ExecStartPre=/usr/bin/curl -L -o /opt/bin/cfssljson https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64\n        ExecStart=/usr/bin/chmod +x /opt/bin/cfssl /opt/bin/cfssljson\n\n    - name: create-certificates.service\n      command: start\n      content: |\n        [Unit]\n        After=download-cfssl.service\n        Before=flannel.service\n        ConditionFileIsExecutable=/opt/bin/cfssl\n        Description=Get ssl artifacts from s3 bucket using IAM role and create local certificates\n        Requires=download-cfssl.service\n        [Service]\n        ExecStartPre=-/usr/bin/mkdir -p /etc/kubernetes/ssl\n        ExecStartPre=/opt/bin/fetch-from-s3 service-account-key.pem\n        ExecStartPre=/opt/bin/fetch-from-s3 ca.pem\n        ExecStart=/opt/bin/create-certificates\n        RemainAfterExit=yes\n        Type=oneshot\n\n    - name: prefetch-rkt-hyperkube.service\n      command: start\n      content: |\n        [Unit]\n        After=network-online.target\n        Requires=network-online.target\n        Description=Prefetch rkt Hyperkube\n        [Service]\n        Type=oneshot\n        RemainAfterExit=yes\n        ExecStartPre=/usr/bin/rkt trust --trust-keys-from-https --prefix=quay.io/coreos/hyperkube\n        ExecStart=/usr/bin/rkt fetch ${ hyperkube-image }:${ hyperkube-tag }\n\n    - name: prefetch-docker-hyperkube.service\n      command: start\n      content: |\n        [Unit]\n        After=docker.service\n        Requires=docker.service\n        Description=Prefetch docker Hyperkube\n        [Service]\n        Type=oneshot\n        RemainAfterExit=yes\n        ExecStart=/usr/bin/docker pull ${ hyperkube }\n\n    - name: kubelet.service\n      command: start\n      runtime: true\n      content: |\n        [Unit]\n        ConditionFileNotEmpty=/etc/kubernetes/ssl/service-account-key.pem\n        ConditionFileIsExecutable=/usr/lib/coreos/kubelet-wrapper\n        After=flanneld.service\n        After=prefetch-rkt-hyperkube.service\n        After=prefetch-docker-hyperkube.service\n        Requires=flanneld.service\n        [Service]\n        EnvironmentFile=-/etc/environment\n        Environment=\"KUBELET_ACI=${ hyperkube-image }\"\n        Environment=\"KUBELET_VERSION=${ hyperkube-tag }\"\n        Environment=\"RKT_OPTS=\\\n          --volume dns,kind=host,source=/etc/resolv.conf \\\n          --mount volume=dns,target=/etc/resolv.conf \\\n          --volume rkt,kind=host,source=/opt/bin/host-rkt \\\n          --mount volume=rkt,target=/usr/bin/rkt \\\n          --volume var-lib-rkt,kind=host,source=/var/lib/rkt \\\n          --mount volume=var-lib-rkt,target=/var/lib/rkt \\\n          --volume stage,kind=host,source=/tmp \\\n          --mount volume=stage,target=/tmp \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log\"\n        ExecStartPre=/usr/bin/mkdir -p /var/log/containers\n        ExecStartPre=/usr/bin/mkdir -p /var/lib/kubelet\n        ExecStartPre=/usr/bin/mount --bind /var/lib/kubelet /var/lib/kubelet\n        ExecStartPre=/usr/bin/mount --make-shared /var/lib/kubelet\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged=true \\\n          --api-servers=http://127.0.0.1:8080 \\\n          --cloud-provider=aws \\\n          --cluster-dns=${ dns-service-ip } \\\n          --cluster-domain=${ cluster-domain } \\\n          --kubeconfig=/etc/kubernetes/kubeconfig.yml \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --node-labels node-role.kubernetes.io/master \\\n          --register-node=true \\\n          --register-with-taints node-role.kubernetes.io/master='':NoSchedule\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\n  update:\n    reboot-strategy: etcd-lock\n\nwrite-files:\n\n  - path: /etc/environment\n    permissions: 0644\n    content: |\n      COREOS_PRIVATE_IPV4=$private_ipv4\n      ETCD_CA_FILE=/etc/kubernetes/ssl/ca.pem\n      ETCD_CERT_FILE=/etc/kubernetes/ssl/k8s-etcd.pem\n      ETCD_KEY_FILE=/etc/kubernetes/ssl/k8s-etcd-key.pem\n      ETCDCTL_CA_FILE=/etc/kubernetes/ssl/ca.pem\n      ETCDCTL_CERT_FILE=/etc/kubernetes/ssl/k8s-etcd.pem\n      ETCDCTL_KEY_FILE=/etc/kubernetes/ssl/k8s-etcd-key.pem\n      ETCDCTL_ENDPOINT=https://${ fqdn }:2379\n\n  - path: /opt/bin/host-rkt\n    permissions: 0755\n    owner: root:root\n    content: |\n      #!/bin/sh\n      exec nsenter -m -u -i -n -p -t 1 -- /usr/bin/rkt \"$@\"\n\n  - path: /etc/kubernetes/kubeconfig.yml\n    content: |\n      apiVersion: v1\n      kind: Config\n      clusters:\n        - name: local\n          cluster:\n            server: http://127.0.0.1:8080\n      users:\n        - name: kubelet\n      contexts:\n        - name: kubelet-context\n          context:\n            cluster: local\n            user: kubelet\n      current-context: kubelet-context\n\n  - path: /etc/kubernetes/manifests/kube-apiserver.yml\n    content: |\n      apiVersion: v1\n      kind: Pod\n      metadata:\n        name: kube-apiserver\n        namespace: kube-system\n      spec:\n        hostNetwork: true\n        containers:\n        - name: kube-apiserver\n          image: ${ hyperkube }\n          command:\n          - /hyperkube\n          - apiserver\n          - --admission-control=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,ResourceQuota\n          - --advertise-address=$private_ipv4\n          - --apiserver-count=${ apiserver-count }\n          - --allow-privileged=true\n          - --anonymous-auth=false\n          - --client-ca-file=/etc/kubernetes/ssl/ca.pem\n          - --cloud-provider=aws\n          - --enable-swagger-ui\n          - --etcd-cafile=/etc/kubernetes/ssl/ca.pem\n          - --etcd-certfile=/etc/kubernetes/ssl/k8s-etcd.pem\n          - --etcd-keyfile=/etc/kubernetes/ssl/k8s-etcd-key.pem\n          - --etcd-servers=https://etcd.${ internal-tld }:2379\n          - --runtime-config=extensions/v1beta1=true,extensions/v1beta1/thirdpartyresources=true,apps/v1beta1=true\n          - --secure-port=443\n          - --service-account-key-file=/etc/kubernetes/ssl/service-account-key.pem\n          - --service-account-lookup\n          - --service-cluster-ip-range=${ service-cluster-ip-range }\n          - --tls-cert-file=/etc/kubernetes/ssl/k8s-apiserver.pem\n          - --tls-private-key-file=/etc/kubernetes/ssl/k8s-apiserver-key.pem\n          - --v=2\n          livenessProbe:\n            httpGet:\n              host: 127.0.0.1\n              port: 8080\n              path: /healthz\n            initialDelaySeconds: 15\n            timeoutSeconds: 15\n          ports:\n          - containerPort: 443\n            hostPort: 443\n            name: https\n          - containerPort: 8080\n            hostPort: 8080\n            name: local\n          volumeMounts:\n          - mountPath: /etc/kubernetes/ssl\n            name: ssl-certs-kubernetes\n            readOnly: true\n          - mountPath: /etc/ssl/certs\n            name: ssl-certs-host\n            readOnly: true\n        volumes:\n        - hostPath:\n            path: /etc/kubernetes/ssl\n          name: ssl-certs-kubernetes\n        - hostPath:\n            path: /usr/share/ca-certificates\n          name: ssl-certs-host\n\n  - path: /etc/kubernetes/manifests/kube-controller-manager.yml\n    content: |\n      apiVersion: v1\n      kind: Pod\n      metadata:\n        name: kube-controller-manager\n        namespace: kube-system\n      spec:\n        hostNetwork: true\n        containers:\n        - name: kube-controller-manager\n          image: ${ hyperkube }\n          command:\n          - /hyperkube\n          - controller-manager\n          - --cloud-provider=aws\n          - --leader-elect=true\n          - --master=http://127.0.0.1:8080\n          - --root-ca-file=/etc/kubernetes/ssl/ca.pem\n          - --service-account-private-key-file=/etc/kubernetes/ssl/service-account-key.pem\n          resources:\n            requests:\n              cpu: 200m\n          livenessProbe:\n            httpGet:\n              host: 127.0.0.1\n              path: /healthz\n              port: 10252\n            initialDelaySeconds: 15\n            timeoutSeconds: 1\n          volumeMounts:\n          - mountPath: /etc/kubernetes/ssl\n            name: ssl-certs-kubernetes\n            readOnly: true\n          - mountPath: /etc/ssl/certs\n            name: ssl-certs-host\n            readOnly: true\n        volumes:\n        - hostPath:\n            path: /etc/kubernetes/ssl\n          name: ssl-certs-kubernetes\n        - hostPath:\n            path: /usr/share/ca-certificates\n          name: ssl-certs-host\n\n  - path: /etc/kubernetes/manifests/kube-proxy.yml\n    content: |\n      apiVersion: v1\n      kind: Pod\n      metadata:\n        name: kube-proxy\n        namespace: kube-system\n      spec:\n        hostNetwork: true\n        containers:\n        - name: kube-proxy\n          image: ${ hyperkube }\n          command:\n          - /hyperkube\n          - proxy\n          - --master=http://127.0.0.1:8080\n          securityContext:\n            privileged: true\n          volumeMounts:\n          - mountPath: /etc/ssl/certs\n            name: ssl-certs-host\n            readOnly: true\n          - mountPath: /var/run/dbus\n            name: dbus\n            readOnly: false\n        volumes:\n        - hostPath:\n            path: /usr/share/ca-certificates\n          name: ssl-certs-host\n        - hostPath:\n            path: /var/run/dbus\n          name: dbus\n\n  - path: /etc/kubernetes/manifests/kube-scheduler.yml\n    content: |\n      apiVersion: v1\n      kind: Pod\n      metadata:\n        name: kube-scheduler\n        namespace: kube-system\n      spec:\n        hostNetwork: true\n        containers:\n        - name: kube-scheduler\n          image: ${ hyperkube }\n          command:\n          - /hyperkube\n          - scheduler\n          - --leader-elect=true\n          - --master=http://127.0.0.1:8080\n          resources:\n            requests:\n              cpu: 100m\n          livenessProbe:\n            httpGet:\n              host: 127.0.0.1\n              path: /healthz\n              port: 10251\n            initialDelaySeconds: 15\n            timeoutSeconds: 1\n\n  - path: /etc/logrotate.d/docker-containers\n    content: |\n      /var/lib/docker/containers/*/*.log {\n        rotate 7\n        daily\n        compress\n        size=1M\n        missingok\n        delaycompress\n        copytruncate\n      }\n\n  - path: /opt/bin/fetch-from-s3\n    permissions: 0755\n    owner: root:root\n    content: |\n      #!/bin/bash -e\n      until /usr/bin/rkt run \\\n        --net=host \\\n        --trust-keys-from-https \\\n        --volume=dns,kind=host,source=/etc/resolv.conf,readOnly=true --mount volume=dns,target=/etc/resolv.conf \\\n        --volume=ssl,kind=host,source=/etc/kubernetes/ssl,readOnly=false --mount=volume=ssl,target=/etc/kubernetes/ssl \\\n        quay.io/coreos/awscli -- aws s3 cp s3://${ s3-bucket }/$1 /etc/kubernetes/ssl\n      do\n        echo \"retrying\"\n        sleep 5.2\n      done\n      echo \"✓\"\n\n  - path: /opt/bin/wait-for-certs\n    permissions: 0755\n    owner: root:root\n    content: |\n      #!/bin/bash -e\n      until ls /etc/kubernetes/ssl\n      do\n        echo \"retrying\"\n        sleep 5.2\n      done\n      echo \"✓\"\n\n  - path: /opt/bin/create-certificates\n    permissions: 0755\n    owner: root:root\n    content: |\n      #!/bin/bash -vex\n\n      OUTDIR=/etc/kubernetes/ssl\n\n      function error {\n        echo \"✗ Error on line $1\"'!'\n        exit 1\n      }\n      trap 'error $LINENO' ERR\n\n      until printf \".\" \u0026\u0026 curl -d '{\"label\":\"primary\"}' http://pki.${ internal-tld }:8888/api/v1/cfssl/info \u0026\u003e/dev/null\n      do sleep 5.2; done; echo \"✓\"\n\n      DNS1=\"kubernetes\"\n      DNS2=\"kubernetes.default\"\n      DNS3=\"kubernetes.default.svc\"\n      DNS4=\"kubernetes.default.svc.cluster.local\"\n      DEFAULT_HOSTS=\"$DNS1,$DNS2,$DNS3,$DNS4,127.0.0.1\"\n\n      function csr {\n        cat \u003c\u003cEOF\n      {\"CN\":\"$1\",\"hosts\":[\"\"],\"key\":{\"algo\":\"rsa\",\"size\":2048}}\n      EOF\n      }\n\n      function generate {\n\n        CN=$1\n        PROFILE=$2\n        HOSTS=$3\n\n        echo \"$(csr $CN)\" \\\n          | /opt/bin/cfssl gencert \\\n            -remote=pki.${ internal-tld }:8888 \\\n            -profile=$PROFILE \\\n            -hostname=\"$HOSTS\" - \\\n          | /opt/bin/cfssljson -bare $CN\n\n        chmod 0644 $${CN}.pem $${CN}-key.pem\n\n      }\n\n      mkdir -p $OUTDIR \u0026\u0026 cd $OUTDIR\n\n      generate k8s-apiserver client-server \"$${DEFAULT_HOSTS},${ ip-k8s-service },master.${ internal-tld },${ external-elb }\"\n      generate k8s-etcd client-server \"etcd.${ internal-tld },${ fqdn }\"\n\n  - path: /etc/kubernetes/cni/net.d/10-flannel.conf\n    content: |\n        {\n            \"name\": \"podnet\",\n            \"type\": \"flannel\",\n            \"delegate\": {\n                \"isDefaultGateway\": true\n            }\n        }\n","vars":{"apiserver-count":"3","cluster-domain":"cluster.local","cluster-token":"etcd-cluster-asdfasdf","dns-service-ip":"10.3.0.10","external-elb":"module.etcd.aws_elb.external.dns_name","fqdn":"etcd2.asdf.com","hostname":"etcd2","hyperkube":"quay.io/coreos/hyperkube:v1.5.1_coreos.0","hyperkube-image":"quay.io/coreos/hyperkube","hyperkube-tag":"v1.5.1_coreos.0","internal-tld":"asdf.com","ip-k8s-service":"10.3.0.1","pod-ip-range":"10.2.0.0/16","region":"","s3-bucket":"kz8s-pki-asdfasdf--","service-cluster-ip-range":"10.3.0.0/24"}},"after_unknown":{"id":true,"rendered":true,"vars":{}}}},{"address":"module.etcd.data.template_file.cloud-config[2]","module_address":"module.etcd","mode":"data","type":"template_file","name":"cloud-config","index":2,"provider_name":"template","change":{"actions":["read"],"before":null,"after":{"filename":null,"template":"#cloud-config\n\n---\ncoreos:\n\n  flannel:\n    interface: $private_ipv4\n    etcd_cafile: /etc/kubernetes/ssl/ca.pem\n    etcd_certfile: /etc/kubernetes/ssl/k8s-etcd.pem\n    etcd_keyfile: /etc/kubernetes/ssl/k8s-etcd-key.pem\n    etcd_endpoints: https://etcd.${ internal-tld }:2379\n\n  locksmith:\n    endpoint: https://etcd.${ internal-tld }:2379\n    etcd_cafile: /etc/kubernetes/ssl/ca.pem\n    etcd_certfile: /etc/kubernetes/ssl/k8s-etcd.pem\n    etcd_keyfile: /etc/kubernetes/ssl/k8s-etcd-key.pem\n\n  units:\n    - name: etcd-member.service\n      command: start\n      drop-ins:\n        - name: 01-wait-for-certs.conf\n          content: |\n            [Unit]\n            After=create-certificates.service\n            Requires=create-certificates.service\n            ConditionFileNotEmpty=/etc/kubernetes/ssl/ca.pem\n            ConditionFileNotEmpty=/etc/kubernetes/ssl/k8s-etcd.pem\n            ConditionFileNotEmpty=/etc/kubernetes/ssl/k8s-etcd-key.pem\n\n        - name: 10-environment.conf\n          content: |\n            [Service]\n            Environment=\"ETCD_ADVERTISE_CLIENT_URLS=https://${ fqdn }:2379\"\n            Environment=\"ETCD_CERT_FILE=/etc/ssl/certs/k8s-etcd.pem\"\n            Environment=\"ETCD_CLIENT_CERT_AUTH=true\"\n            Environment=\"ETCD_DISCOVERY_SRV=${ internal-tld }\"\n            Environment=\"ETCD_INITIAL_ADVERTISE_PEER_URLS=https://${ fqdn }:2380\"\n            Environment=\"ETCD_INITIAL_CLUSTER_STATE=new\"\n            Environment=\"ETCD_INITIAL_CLUSTER_TOKEN=${ cluster-token }\"\n            Environment=\"ETCD_KEY_FILE=/etc/ssl/certs/k8s-etcd-key.pem\"\n            Environment=\"ETCD_LISTEN_CLIENT_URLS=https://0.0.0.0:2379\"\n            Environment=\"ETCD_LISTEN_PEER_URLS=https://0.0.0.0:2380\"\n            Environment=\"ETCD_NAME=${ hostname }\"\n            Environment=\"ETCD_PEER_CERT_FILE=/etc/ssl/certs/k8s-etcd.pem\"\n            Environment=\"ETCD_PEER_KEY_FILE=/etc/ssl/certs/k8s-etcd-key.pem\"\n            Environment=\"ETCD_PEER_TRUSTED_CA_FILE=/etc/ssl/certs/ca.pem\"\n            Environment=\"ETCD_SSL_DIR=/etc/kubernetes/ssl\"\n            Environment=\"ETCD_TRUSTED_CA_FILE=/etc/ssl/certs/ca.pem\"\n\n    - name: flanneld.service\n      command: start\n      drop-ins:\n        - name: 50-network-config.conf\n          content: |\n            [Unit]\n            Wants=create-certificates.service\n            After=create-certificates.service\n            [Service]\n            EnvironmentFile=/etc/environment\n            Environment=\"ETCD_SSL_DIR=/etc/kubernetes/ssl\"\n            ExecStartPre=-/usr/bin/etcdctl mk /coreos.com/network/config \\\n              '{ \"Network\": \"${ pod-ip-range }\", \"Backend\": { \"Type\": \"vxlan\" } }'\n            Restart=always\n            RestartSec=10\n\n    - name: docker.service\n      command: start\n      drop-ins:\n        - name: 40-flannel.conf\n          content: |\n            [Unit]\n            After=flanneld.service\n            Requires=flanneld.service\n            [Service]\n            Restart=always\n            RestartSec=10\n\n    - name: download-cfssl.service\n      command: start\n      content: |\n        [Unit]\n        After=network-online.target\n        Requires=network-online.target\n        Before=etcd-member.service\n        Description=Download cfssl\n        [Service]\n        Type=oneshot\n        RemainAfterExit=yes\n        ExecStartPre=-/usr/bin/mkdir --parents /opt/bin\n        ExecStartPre=/usr/bin/curl -L -o /opt/bin/cfssl https://pkg.cfssl.org/R1.2/cfssl_linux-amd64\n        ExecStartPre=/usr/bin/curl -L -o /opt/bin/cfssljson https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64\n        ExecStart=/usr/bin/chmod +x /opt/bin/cfssl /opt/bin/cfssljson\n\n    - name: create-certificates.service\n      command: start\n      content: |\n        [Unit]\n        After=download-cfssl.service\n        Before=flannel.service\n        ConditionFileIsExecutable=/opt/bin/cfssl\n        Description=Get ssl artifacts from s3 bucket using IAM role and create local certificates\n        Requires=download-cfssl.service\n        [Service]\n        ExecStartPre=-/usr/bin/mkdir -p /etc/kubernetes/ssl\n        ExecStartPre=/opt/bin/fetch-from-s3 service-account-key.pem\n        ExecStartPre=/opt/bin/fetch-from-s3 ca.pem\n        ExecStart=/opt/bin/create-certificates\n        RemainAfterExit=yes\n        Type=oneshot\n\n    - name: prefetch-rkt-hyperkube.service\n      command: start\n      content: |\n        [Unit]\n        After=network-online.target\n        Requires=network-online.target\n        Description=Prefetch rkt Hyperkube\n        [Service]\n        Type=oneshot\n        RemainAfterExit=yes\n        ExecStartPre=/usr/bin/rkt trust --trust-keys-from-https --prefix=quay.io/coreos/hyperkube\n        ExecStart=/usr/bin/rkt fetch ${ hyperkube-image }:${ hyperkube-tag }\n\n    - name: prefetch-docker-hyperkube.service\n      command: start\n      content: |\n        [Unit]\n        After=docker.service\n        Requires=docker.service\n        Description=Prefetch docker Hyperkube\n        [Service]\n        Type=oneshot\n        RemainAfterExit=yes\n        ExecStart=/usr/bin/docker pull ${ hyperkube }\n\n    - name: kubelet.service\n      command: start\n      runtime: true\n      content: |\n        [Unit]\n        ConditionFileNotEmpty=/etc/kubernetes/ssl/service-account-key.pem\n        ConditionFileIsExecutable=/usr/lib/coreos/kubelet-wrapper\n        After=flanneld.service\n        After=prefetch-rkt-hyperkube.service\n        After=prefetch-docker-hyperkube.service\n        Requires=flanneld.service\n        [Service]\n        EnvironmentFile=-/etc/environment\n        Environment=\"KUBELET_ACI=${ hyperkube-image }\"\n        Environment=\"KUBELET_VERSION=${ hyperkube-tag }\"\n        Environment=\"RKT_OPTS=\\\n          --volume dns,kind=host,source=/etc/resolv.conf \\\n          --mount volume=dns,target=/etc/resolv.conf \\\n          --volume rkt,kind=host,source=/opt/bin/host-rkt \\\n          --mount volume=rkt,target=/usr/bin/rkt \\\n          --volume var-lib-rkt,kind=host,source=/var/lib/rkt \\\n          --mount volume=var-lib-rkt,target=/var/lib/rkt \\\n          --volume stage,kind=host,source=/tmp \\\n          --mount volume=stage,target=/tmp \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log\"\n        ExecStartPre=/usr/bin/mkdir -p /var/log/containers\n        ExecStartPre=/usr/bin/mkdir -p /var/lib/kubelet\n        ExecStartPre=/usr/bin/mount --bind /var/lib/kubelet /var/lib/kubelet\n        ExecStartPre=/usr/bin/mount --make-shared /var/lib/kubelet\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged=true \\\n          --api-servers=http://127.0.0.1:8080 \\\n          --cloud-provider=aws \\\n          --cluster-dns=${ dns-service-ip } \\\n          --cluster-domain=${ cluster-domain } \\\n          --kubeconfig=/etc/kubernetes/kubeconfig.yml \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --node-labels node-role.kubernetes.io/master \\\n          --register-node=true \\\n          --register-with-taints node-role.kubernetes.io/master='':NoSchedule\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\n  update:\n    reboot-strategy: etcd-lock\n\nwrite-files:\n\n  - path: /etc/environment\n    permissions: 0644\n    content: |\n      COREOS_PRIVATE_IPV4=$private_ipv4\n      ETCD_CA_FILE=/etc/kubernetes/ssl/ca.pem\n      ETCD_CERT_FILE=/etc/kubernetes/ssl/k8s-etcd.pem\n      ETCD_KEY_FILE=/etc/kubernetes/ssl/k8s-etcd-key.pem\n      ETCDCTL_CA_FILE=/etc/kubernetes/ssl/ca.pem\n      ETCDCTL_CERT_FILE=/etc/kubernetes/ssl/k8s-etcd.pem\n      ETCDCTL_KEY_FILE=/etc/kubernetes/ssl/k8s-etcd-key.pem\n      ETCDCTL_ENDPOINT=https://${ fqdn }:2379\n\n  - path: /opt/bin/host-rkt\n    permissions: 0755\n    owner: root:root\n    content: |\n      #!/bin/sh\n      exec nsenter -m -u -i -n -p -t 1 -- /usr/bin/rkt \"$@\"\n\n  - path: /etc/kubernetes/kubeconfig.yml\n    content: |\n      apiVersion: v1\n      kind: Config\n      clusters:\n        - name: local\n          cluster:\n            server: http://127.0.0.1:8080\n      users:\n        - name: kubelet\n      contexts:\n        - name: kubelet-context\n          context:\n            cluster: local\n            user: kubelet\n      current-context: kubelet-context\n\n  - path: /etc/kubernetes/manifests/kube-apiserver.yml\n    content: |\n      apiVersion: v1\n      kind: Pod\n      metadata:\n        name: kube-apiserver\n        namespace: kube-system\n      spec:\n        hostNetwork: true\n        containers:\n        - name: kube-apiserver\n          image: ${ hyperkube }\n          command:\n          - /hyperkube\n          - apiserver\n          - --admission-control=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,ResourceQuota\n          - --advertise-address=$private_ipv4\n          - --apiserver-count=${ apiserver-count }\n          - --allow-privileged=true\n          - --anonymous-auth=false\n          - --client-ca-file=/etc/kubernetes/ssl/ca.pem\n          - --cloud-provider=aws\n          - --enable-swagger-ui\n          - --etcd-cafile=/etc/kubernetes/ssl/ca.pem\n          - --etcd-certfile=/etc/kubernetes/ssl/k8s-etcd.pem\n          - --etcd-keyfile=/etc/kubernetes/ssl/k8s-etcd-key.pem\n          - --etcd-servers=https://etcd.${ internal-tld }:2379\n          - --runtime-config=extensions/v1beta1=true,extensions/v1beta1/thirdpartyresources=true,apps/v1beta1=true\n          - --secure-port=443\n          - --service-account-key-file=/etc/kubernetes/ssl/service-account-key.pem\n          - --service-account-lookup\n          - --service-cluster-ip-range=${ service-cluster-ip-range }\n          - --tls-cert-file=/etc/kubernetes/ssl/k8s-apiserver.pem\n          - --tls-private-key-file=/etc/kubernetes/ssl/k8s-apiserver-key.pem\n          - --v=2\n          livenessProbe:\n            httpGet:\n              host: 127.0.0.1\n              port: 8080\n              path: /healthz\n            initialDelaySeconds: 15\n            timeoutSeconds: 15\n          ports:\n          - containerPort: 443\n            hostPort: 443\n            name: https\n          - containerPort: 8080\n            hostPort: 8080\n            name: local\n          volumeMounts:\n          - mountPath: /etc/kubernetes/ssl\n            name: ssl-certs-kubernetes\n            readOnly: true\n          - mountPath: /etc/ssl/certs\n            name: ssl-certs-host\n            readOnly: true\n        volumes:\n        - hostPath:\n            path: /etc/kubernetes/ssl\n          name: ssl-certs-kubernetes\n        - hostPath:\n            path: /usr/share/ca-certificates\n          name: ssl-certs-host\n\n  - path: /etc/kubernetes/manifests/kube-controller-manager.yml\n    content: |\n      apiVersion: v1\n      kind: Pod\n      metadata:\n        name: kube-controller-manager\n        namespace: kube-system\n      spec:\n        hostNetwork: true\n        containers:\n        - name: kube-controller-manager\n          image: ${ hyperkube }\n          command:\n          - /hyperkube\n          - controller-manager\n          - --cloud-provider=aws\n          - --leader-elect=true\n          - --master=http://127.0.0.1:8080\n          - --root-ca-file=/etc/kubernetes/ssl/ca.pem\n          - --service-account-private-key-file=/etc/kubernetes/ssl/service-account-key.pem\n          resources:\n            requests:\n              cpu: 200m\n          livenessProbe:\n            httpGet:\n              host: 127.0.0.1\n              path: /healthz\n              port: 10252\n            initialDelaySeconds: 15\n            timeoutSeconds: 1\n          volumeMounts:\n          - mountPath: /etc/kubernetes/ssl\n            name: ssl-certs-kubernetes\n            readOnly: true\n          - mountPath: /etc/ssl/certs\n            name: ssl-certs-host\n            readOnly: true\n        volumes:\n        - hostPath:\n            path: /etc/kubernetes/ssl\n          name: ssl-certs-kubernetes\n        - hostPath:\n            path: /usr/share/ca-certificates\n          name: ssl-certs-host\n\n  - path: /etc/kubernetes/manifests/kube-proxy.yml\n    content: |\n      apiVersion: v1\n      kind: Pod\n      metadata:\n        name: kube-proxy\n        namespace: kube-system\n      spec:\n        hostNetwork: true\n        containers:\n        - name: kube-proxy\n          image: ${ hyperkube }\n          command:\n          - /hyperkube\n          - proxy\n          - --master=http://127.0.0.1:8080\n          securityContext:\n            privileged: true\n          volumeMounts:\n          - mountPath: /etc/ssl/certs\n            name: ssl-certs-host\n            readOnly: true\n          - mountPath: /var/run/dbus\n            name: dbus\n            readOnly: false\n        volumes:\n        - hostPath:\n            path: /usr/share/ca-certificates\n          name: ssl-certs-host\n        - hostPath:\n            path: /var/run/dbus\n          name: dbus\n\n  - path: /etc/kubernetes/manifests/kube-scheduler.yml\n    content: |\n      apiVersion: v1\n      kind: Pod\n      metadata:\n        name: kube-scheduler\n        namespace: kube-system\n      spec:\n        hostNetwork: true\n        containers:\n        - name: kube-scheduler\n          image: ${ hyperkube }\n          command:\n          - /hyperkube\n          - scheduler\n          - --leader-elect=true\n          - --master=http://127.0.0.1:8080\n          resources:\n            requests:\n              cpu: 100m\n          livenessProbe:\n            httpGet:\n              host: 127.0.0.1\n              path: /healthz\n              port: 10251\n            initialDelaySeconds: 15\n            timeoutSeconds: 1\n\n  - path: /etc/logrotate.d/docker-containers\n    content: |\n      /var/lib/docker/containers/*/*.log {\n        rotate 7\n        daily\n        compress\n        size=1M\n        missingok\n        delaycompress\n        copytruncate\n      }\n\n  - path: /opt/bin/fetch-from-s3\n    permissions: 0755\n    owner: root:root\n    content: |\n      #!/bin/bash -e\n      until /usr/bin/rkt run \\\n        --net=host \\\n        --trust-keys-from-https \\\n        --volume=dns,kind=host,source=/etc/resolv.conf,readOnly=true --mount volume=dns,target=/etc/resolv.conf \\\n        --volume=ssl,kind=host,source=/etc/kubernetes/ssl,readOnly=false --mount=volume=ssl,target=/etc/kubernetes/ssl \\\n        quay.io/coreos/awscli -- aws s3 cp s3://${ s3-bucket }/$1 /etc/kubernetes/ssl\n      do\n        echo \"retrying\"\n        sleep 5.2\n      done\n      echo \"✓\"\n\n  - path: /opt/bin/wait-for-certs\n    permissions: 0755\n    owner: root:root\n    content: |\n      #!/bin/bash -e\n      until ls /etc/kubernetes/ssl\n      do\n        echo \"retrying\"\n        sleep 5.2\n      done\n      echo \"✓\"\n\n  - path: /opt/bin/create-certificates\n    permissions: 0755\n    owner: root:root\n    content: |\n      #!/bin/bash -vex\n\n      OUTDIR=/etc/kubernetes/ssl\n\n      function error {\n        echo \"✗ Error on line $1\"'!'\n        exit 1\n      }\n      trap 'error $LINENO' ERR\n\n      until printf \".\" \u0026\u0026 curl -d '{\"label\":\"primary\"}' http://pki.${ internal-tld }:8888/api/v1/cfssl/info \u0026\u003e/dev/null\n      do sleep 5.2; done; echo \"✓\"\n\n      DNS1=\"kubernetes\"\n      DNS2=\"kubernetes.default\"\n      DNS3=\"kubernetes.default.svc\"\n      DNS4=\"kubernetes.default.svc.cluster.local\"\n      DEFAULT_HOSTS=\"$DNS1,$DNS2,$DNS3,$DNS4,127.0.0.1\"\n\n      function csr {\n        cat \u003c\u003cEOF\n      {\"CN\":\"$1\",\"hosts\":[\"\"],\"key\":{\"algo\":\"rsa\",\"size\":2048}}\n      EOF\n      }\n\n      function generate {\n\n        CN=$1\n        PROFILE=$2\n        HOSTS=$3\n\n        echo \"$(csr $CN)\" \\\n          | /opt/bin/cfssl gencert \\\n            -remote=pki.${ internal-tld }:8888 \\\n            -profile=$PROFILE \\\n            -hostname=\"$HOSTS\" - \\\n          | /opt/bin/cfssljson -bare $CN\n\n        chmod 0644 $${CN}.pem $${CN}-key.pem\n\n      }\n\n      mkdir -p $OUTDIR \u0026\u0026 cd $OUTDIR\n\n      generate k8s-apiserver client-server \"$${DEFAULT_HOSTS},${ ip-k8s-service },master.${ internal-tld },${ external-elb }\"\n      generate k8s-etcd client-server \"etcd.${ internal-tld },${ fqdn }\"\n\n  - path: /etc/kubernetes/cni/net.d/10-flannel.conf\n    content: |\n        {\n            \"name\": \"podnet\",\n            \"type\": \"flannel\",\n            \"delegate\": {\n                \"isDefaultGateway\": true\n            }\n        }\n","vars":{"apiserver-count":"3","cluster-domain":"cluster.local","cluster-token":"etcd-cluster-asdfasdf","dns-service-ip":"10.3.0.10","external-elb":"module.etcd.aws_elb.external.dns_name","fqdn":"etcd3.asdf.com","hostname":"etcd3","hyperkube":"quay.io/coreos/hyperkube:v1.5.1_coreos.0","hyperkube-image":"quay.io/coreos/hyperkube","hyperkube-tag":"v1.5.1_coreos.0","internal-tld":"asdf.com","ip-k8s-service":"10.3.0.1","pod-ip-range":"10.2.0.0/16","region":"","s3-bucket":"kz8s-pki-asdfasdf--","service-cluster-ip-range":"10.3.0.0/24"}},"after_unknown":{"id":true,"rendered":true,"vars":{}}}},{"address":"module.etcd.null_resource.dummy_dependency","module_address":"module.etcd","mode":"managed","type":"null_resource","name":"dummy_dependency","provider_name":"null","change":{"actions":["create"],"before":null,"after":{"triggers":null},"after_unknown":{"id":true}}},{"address":"module.iam.aws_iam_instance_profile.bastion","module_address":"module.iam","mode":"managed","type":"aws_iam_instance_profile","name":"bastion","provider_name":"aws","change":{"actions":["create"],"before":null,"after":{"name":"kz8s-bastion-asdfasdf","name_prefix":null,"path":"/","role":"kz8s-bastion-asdfasdf"},"after_unknown":{"arn":true,"create_date":true,"id":true,"unique_id":true}}},{"address":"module.iam.aws_iam_instance_profile.master","module_address":"module.iam","mode":"managed","type":"aws_iam_instance_profile","name":"master","provider_name":"aws","change":{"actions":["create"],"before":null,"after":{"name":"kz8s-master-asdfasdf","name_prefix":null,"path":"/","role":"kz8s-master-asdfasdf"},"after_unknown":{"arn":true,"create_date":true,"id":true,"unique_id":true}}},{"address":"module.iam.aws_iam_instance_profile.pki","module_address":"module.iam","mode":"managed","type":"aws_iam_instance_profile","name":"pki","provider_name":"aws","change":{"actions":["create"],"before":null,"after":{"name":"kz8s-pki-asdfasdf","name_prefix":null,"path":"/","role":"kz8s-pki-asdfasdf"},"after_unknown":{"arn":true,"create_date":true,"id":true,"unique_id":true}}},{"address":"module.iam.aws_iam_instance_profile.worker","module_address":"module.iam","mode":"managed","type":"aws_iam_instance_profile","name":"worker","provider_name":"aws","change":{"actions":["create"],"before":null,"after":{"name":"kz8s-worker-asdfasdf","name_prefix":null,"path":"/","role":"kz8s-worker-asdfasdf"},"after_unknown":{"arn":true,"create_date":true,"id":true,"unique_id":true}}},{"address":"module.iam.aws_iam_role.bastion","module_address":"module.iam","mode":"managed","type":"aws_iam_role","name":"bastion","provider_name":"aws","change":{"actions":["create"],"before":null,"after":{"assume_role_policy":"{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Principal\": { \"Service\": \"ec2.amazonaws.com\" },\n      \"Action\": \"sts:AssumeRole\"\n    }\n  ]\n}\n","description":null,"force_detach_policies":false,"max_session_duration":3600,"name":"kz8s-bastion-asdfasdf","name_prefix":null,"path":"/","permissions_boundary":null,"tags":null},"after_unknown":{"arn":true,"create_date":true,"id":true,"unique_id":true}}},{"address":"module.iam.aws_iam_role.master","module_address":"module.iam","mode":"managed","type":"aws_iam_role","name":"master","provider_name":"aws","change":{"actions":["create"],"before":null,"after":{"assume_role_policy":"{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Principal\": { \"Service\": \"ec2.amazonaws.com\" },\n      \"Action\": \"sts:AssumeRole\"\n    }\n  ]\n}\n","description":null,"force_detach_policies":false,"max_session_duration":3600,"name":"kz8s-master-asdfasdf","name_prefix":null,"path":"/","permissions_boundary":null,"tags":null},"after_unknown":{"arn":true,"create_date":true,"id":true,"unique_id":true}}},{"address":"module.iam.aws_iam_role.pki","module_address":"module.iam","mode":"managed","type":"aws_iam_role","name":"pki","provider_name":"aws","change":{"actions":["create"],"before":null,"after":{"assume_role_policy":"{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Principal\": { \"Service\": \"ec2.amazonaws.com\" },\n      \"Action\": \"sts:AssumeRole\"\n    }\n  ]\n}\n","description":null,"force_detach_policies":false,"max_session_duration":3600,"name":"kz8s-pki-asdfasdf","name_prefix":null,"path":"/","permissions_boundary":null,"tags":null},"after_unknown":{"arn":true,"create_date":true,"id":true,"unique_id":true}}},{"address":"module.iam.aws_iam_role.worker","module_address":"module.iam","mode":"managed","type":"aws_iam_role","name":"worker","provider_name":"aws","change":{"actions":["create"],"before":null,"after":{"assume_role_policy":"{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Principal\": {\n        \"Service\": \"ec2.amazonaws.com\"\n      },\n      \"Action\": \"sts:AssumeRole\"\n    }\n  ]\n}\n","description":null,"force_detach_policies":false,"max_session_duration":3600,"name":"kz8s-worker-asdfasdf","name_prefix":null,"path":"/","permissions_boundary":null,"tags":null},"after_unknown":{"arn":true,"create_date":true,"id":true,"unique_id":true}}},{"address":"module.iam.aws_iam_role_policy.bastion","module_address":"module.iam","mode":"managed","type":"aws_iam_role_policy","name":"bastion","provider_name":"aws","change":{"actions":["create"],"before":null,"after":{"name":"kz8s-bastion-asdfasdf","name_prefix":null,"policy":"{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"s3:Get*\"\n      ],\n      \"Resource\": [ \"module.s3.aws_s3_bucket.pki.arn/*\" ]\n    }\n  ]\n}\n","role":"module.iam.aws_iam_role.bastion.id"},"after_unknown":{"id":true}}},{"address":"module.iam.aws_iam_role_policy.master","module_address":"module.iam","mode":"managed","type":"aws_iam_role_policy","name":"master","provider_name":"aws","change":{"actions":["create"],"before":null,"after":{"name":"kz8s-master-asdfasdf","name_prefix":null,"policy":"{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Action\": [\n        \"s3:Get*\"\n      ],\n      \"Effect\": \"Allow\",\n      \"Resource\": [ \"module.s3.aws_s3_bucket.pki.arn/*\" ]\n    },\n    {\n      \"Action\": [\n        \"ec2:AttachVolume\",\n        \"ec2:CreateTags\",\n        \"ec2:CreateVolume\",\n        \"ec2:DeleteVolume\",\n        \"ec2:Describe*\",\n        \"ec2:DescribeInstances\",\n        \"ec2:DetachVolume\",\n        \"ec2:CreateSecurityGroup\",\n        \"ec2:AuthorizeSecurityGroupIngress\",\n        \"ec2:AuthorizeSecurityGroupEgress\",\n        \"ec2:DeleteSecurityGroup\",\n        \"ec2:RevokeSecurityGroupEgress\",\n        \"ec2:RevokeSecurityGroupIngress\",\n        \"elasticloadbalancing:*\"\n        ],\n      \"Effect\": \"Allow\",\n      \"Resource\": [ \"*\" ]\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"ecr:GetAuthorizationToken\",\n        \"ecr:BatchCheckLayerAvailability\",\n        \"ecr:GetDownloadUrlForLayer\",\n        \"ecr:GetRepositoryPolicy\",\n        \"ecr:DescribeRepositories\",\n        \"ecr:ListImages\",\n        \"ecr:BatchGetImage\"\n      ],\n      \"Resource\": \"*\"\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"autoscaling:DescribeAutoScalingGroups\",\n        \"autoscaling:DescribeAutoScalingInstances\",\n        \"autoscaling:SetDesiredCapacity\",\n        \"autoscaling:TerminateInstanceInAutoScalingGroup\"\n      ],\n      \"Resource\": \"*\"\n    }\n  ]\n}\n","role":"module.iam.aws_iam_role.master.id"},"after_unknown":{"id":true}}},{"address":"module.iam.aws_iam_role_policy.pki","module_address":"module.iam","mode":"managed","type":"aws_iam_role_policy","name":"pki","provider_name":"aws","change":{"actions":["create"],"before":null,"after":{"name":"kz8s-pki-asdfasdf","name_prefix":null,"policy":"{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Action\": [\n        \"s3:Put*\"\n      ],\n      \"Effect\": \"Allow\",\n      \"Resource\": [ \"module.s3.aws_s3_bucket.pki.arn/*\" ]\n    }\n  ]\n}\n","role":"module.iam.aws_iam_role.pki.id"},"after_unknown":{"id":true}}},{"address":"module.iam.aws_iam_role_policy.worker","module_address":"module.iam","mode":"managed","type":"aws_iam_role_policy","name":"worker","provider_name":"aws","change":{"actions":["create"],"before":null,"after":{"name":"kz8s-worker-asdfasdf","name_prefix":null,"policy":"{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Action\": [\n        \"s3:GetObject\"\n      ],\n      \"Effect\": \"Allow\",\n      \"Resource\": [ \"module.s3.aws_s3_bucket.pki.arn/ca.pem\" ]\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"ec2:Describe*\",\n        \"ec2:AttachVolume\",\n        \"ec2:DetachVolume\",\n        \"ec2:DescribeInstances\"\n      ],\n      \"Resource\": \"*\"\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"ecr:GetAuthorizationToken\",\n        \"ecr:BatchCheckLayerAvailability\",\n        \"ecr:GetDownloadUrlForLayer\",\n        \"ecr:GetRepositoryPolicy\",\n        \"ecr:DescribeRepositories\",\n        \"ecr:ListImages\",\n        \"ecr:BatchGetImage\"\n      ],\n      \"Resource\": \"*\"\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"autoscaling:DescribeAutoScalingGroups\",\n        \"autoscaling:DescribeAutoScalingInstances\",\n        \"autoscaling:SetDesiredCapacity\",\n        \"autoscaling:TerminateInstanceInAutoScalingGroup\"\n      ],\n      \"Resource\": \"*\"\n    }\n  ]\n}\n","role":"module.iam.aws_iam_role.worker.id"},"after_unknown":{"id":true}}},{"address":"module.iam.null_resource.dummy_dependency","module_address":"module.iam","mode":"managed","type":"null_resource","name":"dummy_dependency","provider_name":"null","change":{"actions":["create"],"before":null,"after":{"triggers":null},"after_unknown":{"id":true}}},{"address":"module.pki.aws_instance.pki","module_address":"module.pki","mode":"managed","type":"aws_instance","name":"pki","provider_name":"aws","change":{"actions":["create"],"before":null,"after":{"ami":"","associate_public_ip_address":false,"credit_specification":[],"disable_api_termination":null,"ebs_optimized":null,"get_password_data":false,"hibernation":null,"iam_instance_profile":"kz8s-pki-asdfasdf","instance_initiated_shutdown_behavior":null,"instance_type":"t2.nano","monitoring":null,"private_ip":"1.1.1.1","source_dest_check":true,"tags":{"Name":"kz8s-pki","builtWith":"terraform","depends-id":"vpc-033a54f26ef5e2b4a","kz8s":"asdfasdf","role":"pki"},"timeouts":null,"user_data":"81b453713b658aaa84fae978d2d43d8f1f3f9834","user_data_base64":null,"volume_tags":null,"vpc_security_group_ids":["module.security.aws_security_group.pki.id"]},"after_unknown":{"arn":true,"availability_zone":true,"cpu_core_count":true,"cpu_threads_per_core":true,"credit_specification":[],"ebs_block_device":true,"enclave_options":true,"ephemeral_block_device":true,"host_id":true,"id":true,"instance_state":true,"ipv6_address_count":true,"ipv6_addresses":true,"key_name":true,"metadata_options":true,"network_interface":true,"outpost_arn":true,"password_data":true,"placement_group":true,"primary_network_interface_id":true,"private_dns":true,"public_dns":true,"public_ip":true,"root_block_device":true,"secondary_private_ips":true,"security_groups":true,"subnet_id":true,"tags":{},"tenancy":true,"vpc_security_group_ids":[false]}}},{"address":"module.pki.aws_route53_record.pki","module_address":"module.pki","mode":"managed","type":"aws_route53_record","name":"pki","provider_name":"aws","change":{"actions":["create"],"before":null,"after":{"alias":[],"failover_routing_policy":[],"geolocation_routing_policy":[],"health_check_id":null,"latency_routing_policy":[],"multivalue_answer_routing_policy":null,"name":"pki","records":["1.1.1.1"],"set_identifier":null,"ttl":300,"type":"A","weighted_routing_policy":[],"zone_id":"module.route53.aws_route53_zone.internal.zone_id"},"after_unknown":{"alias":[],"allow_overwrite":true,"failover_routing_policy":[],"fqdn":true,"geolocation_routing_policy":[],"id":true,"latency_routing_policy":[],"records":[false],"weighted_routing_policy":[]}}},{"address":"module.pki.null_resource.dummy_dependency","module_address":"module.pki","mode":"managed","type":"null_resource","name":"dummy_dependency","provider_name":"null","change":{"actions":["create"],"before":null,"after":{"triggers":null},"after_unknown":{"id":true}}},{"address":"module.route53.aws_route53_record.A-etcd","module_address":"module.route53","mode":"managed","type":"aws_route53_record","name":"A-etcd","provider_name":"aws","change":{"actions":["create"],"before":null,"after":{"alias":[],"failover_routing_policy":[],"geolocation_routing_policy":[],"health_check_id":null,"latency_routing_policy":[],"multivalue_answer_routing_policy":null,"name":"etcd","records":["10.0.10.10","10.0.10.11","10.0.10.12"],"set_identifier":null,"ttl":300,"type":"A","weighted_routing_policy":[],"zone_id":"module.route53.aws_route53_zone.internal.zone_id"},"after_unknown":{"alias":[],"allow_overwrite":true,"failover_routing_policy":[],"fqdn":true,"geolocation_routing_policy":[],"id":true,"latency_routing_policy":[],"records":[false,false,false],"weighted_routing_policy":[]}}},{"address":"module.route53.aws_route53_record.A-etcds[0]","module_address":"module.route53","mode":"managed","type":"aws_route53_record","name":"A-etcds","index":0,"provider_name":"aws","change":{"actions":["create"],"before":null,"after":{"alias":[],"failover_routing_policy":[],"geolocation_routing_policy":[],"health_check_id":null,"latency_routing_policy":[],"multivalue_answer_routing_policy":null,"name":"etcd1","records":["10.0.10.10"],"set_identifier":null,"ttl":300,"type":"A","weighted_routing_policy":[],"zone_id":"module.route53.aws_route53_zone.internal.zone_id"},"after_unknown":{"alias":[],"allow_overwrite":true,"failover_routing_policy":[],"fqdn":true,"geolocation_routing_policy":[],"id":true,"latency_routing_policy":[],"records":[false],"weighted_routing_policy":[]}}},{"address":"module.route53.aws_route53_record.A-etcds[1]","module_address":"module.route53","mode":"managed","type":"aws_route53_record","name":"A-etcds","index":1,"provider_name":"aws","change":{"actions":["create"],"before":null,"after":{"alias":[],"failover_routing_policy":[],"geolocation_routing_policy":[],"health_check_id":null,"latency_routing_policy":[],"multivalue_answer_routing_policy":null,"name":"etcd2","records":["10.0.10.11"],"set_identifier":null,"ttl":300,"type":"A","weighted_routing_policy":[],"zone_id":"module.route53.aws_route53_zone.internal.zone_id"},"after_unknown":{"alias":[],"allow_overwrite":true,"failover_routing_policy":[],"fqdn":true,"geolocation_routing_policy":[],"id":true,"latency_routing_policy":[],"records":[false],"weighted_routing_policy":[]}}},{"address":"module.route53.aws_route53_record.A-etcds[2]","module_address":"module.route53","mode":"managed","type":"aws_route53_record","name":"A-etcds","index":2,"provider_name":"aws","change":{"actions":["create"],"before":null,"after":{"alias":[],"failover_routing_policy":[],"geolocation_routing_policy":[],"health_check_id":null,"latency_routing_policy":[],"multivalue_answer_routing_policy":null,"name":"etcd3","records":["10.0.10.12"],"set_identifier":null,"ttl":300,"type":"A","weighted_routing_policy":[],"zone_id":"module.route53.aws_route53_zone.internal.zone_id"},"after_unknown":{"alias":[],"allow_overwrite":true,"failover_routing_policy":[],"fqdn":true,"geolocation_routing_policy":[],"id":true,"latency_routing_policy":[],"records":[false],"weighted_routing_policy":[]}}},{"address":"module.route53.aws_route53_record.CNAME-master","module_address":"module.route53","mode":"managed","type":"aws_route53_record","name":"CNAME-master","provider_name":"aws","change":{"actions":["create"],"before":null,"after":{"alias":[],"failover_routing_policy":[],"geolocation_routing_policy":[],"health_check_id":null,"latency_routing_policy":[],"multivalue_answer_routing_policy":null,"name":"master","records":["asdf.com"],"set_identifier":null,"ttl":300,"type":"CNAME","weighted_routing_policy":[],"zone_id":"module.route53.aws_route53_zone.internal.zone_id"},"after_unknown":{"alias":[],"allow_overwrite":true,"failover_routing_policy":[],"fqdn":true,"geolocation_routing_policy":[],"id":true,"latency_routing_policy":[],"records":[false],"weighted_routing_policy":[]}}},{"address":"module.route53.aws_route53_record.etcd-client-tcp","module_address":"module.route53","mode":"managed","type":"aws_route53_record","name":"etcd-client-tcp","provider_name":"aws","change":{"actions":["create"],"before":null,"after":{"alias":[],"failover_routing_policy":[],"geolocation_routing_policy":[],"health_check_id":null,"latency_routing_policy":[],"multivalue_answer_routing_policy":null,"name":"_etcd-client._tcp","records":["0 0 2379 module.route53.aws_route53_record.A-etcds[0].fqdn","0 0 2379 module.route53.aws_route53_record.A-etcds[1].fqdn","0 0 2379 module.route53.aws_route53_record.A-etcds[2].fqdn"],"set_identifier":null,"ttl":300,"type":"SRV","weighted_routing_policy":[],"zone_id":"module.route53.aws_route53_zone.internal.zone_id"},"after_unknown":{"alias":[],"allow_overwrite":true,"failover_routing_policy":[],"fqdn":true,"geolocation_routing_policy":[],"id":true,"latency_routing_policy":[],"records":[false,false,false],"weighted_routing_policy":[]}}},{"address":"module.route53.aws_route53_record.etcd-server-tcp","module_address":"module.route53","mode":"managed","type":"aws_route53_record","name":"etcd-server-tcp","provider_name":"aws","change":{"actions":["create"],"before":null,"after":{"alias":[],"failover_routing_policy":[],"geolocation_routing_policy":[],"health_check_id":null,"latency_routing_policy":[],"multivalue_answer_routing_policy":null,"name":"_etcd-server-ssl._tcp","records":["0 0 2380 module.route53.aws_route53_record.A-etcds[0].fqdn","0 0 2380 module.route53.aws_route53_record.A-etcds[1].fqdn","0 0 2380 module.route53.aws_route53_record.A-etcds[2].fqdn"],"set_identifier":null,"ttl":300,"type":"SRV","weighted_routing_policy":[],"zone_id":"module.route53.aws_route53_zone.internal.zone_id"},"after_unknown":{"alias":[],"allow_overwrite":true,"failover_routing_policy":[],"fqdn":true,"geolocation_routing_policy":[],"id":true,"latency_routing_policy":[],"records":[false,false,false],"weighted_routing_policy":[]}}},{"address":"module.route53.aws_route53_zone.internal","module_address":"module.route53","mode":"managed","type":"aws_route53_zone","name":"internal","provider_name":"aws","change":{"actions":["create"],"before":null,"after":{"comment":"Kubernetes [tack] cluster DNS (internal)","delegation_set_id":null,"force_destroy":false,"name":"asdf.com","tags":{"KubernetesCluster":"asdfasdf","Name":"k8s-asdfasdf","builtWith":"terraform","kz8s":"asdfasdf"},"vpc":[]},"after_unknown":{"id":true,"name_servers":true,"tags":{},"vpc":[],"zone_id":true}}},{"address":"module.route53.null_resource.dummy_dependency","module_address":"module.route53","mode":"managed","type":"null_resource","name":"dummy_dependency","provider_name":"null","change":{"actions":["create"],"before":null,"after":{"triggers":null},"after_unknown":{"id":true}}},{"address":"module.s3.aws_s3_bucket.pki","module_address":"module.s3","mode":"managed","type":"aws_s3_bucket","name":"pki","provider_name":"aws","change":{"actions":["create"],"before":null,"after":{"acl":"private","bucket":"kz8s-pki-asdfasdf--","bucket_prefix":null,"cors_rule":[],"force_destroy":true,"grant":[],"lifecycle_rule":[],"logging":[],"object_lock_configuration":[],"policy":null,"replication_configuration":[],"server_side_encryption_configuration":[],"tags":{"KubernetesCluster":"asdfasdf","Name":"asdfasdf","builtWith":"terraform","kz8s":"asdfasdf"},"website":[]},"after_unknown":{"acceleration_status":true,"arn":true,"bucket_domain_name":true,"bucket_regional_domain_name":true,"cors_rule":[],"grant":[],"hosted_zone_id":true,"id":true,"lifecycle_rule":[],"logging":[],"object_lock_configuration":[],"region":true,"replication_configuration":[],"request_payer":true,"server_side_encryption_configuration":[],"tags":{},"versioning":true,"website":[],"website_domain":true,"website_endpoint":true}}},{"address":"module.security.aws_security_group.bastion","module_address":"module.security","mode":"managed","type":"aws_security_group","name":"bastion","provider_name":"aws","change":{"actions":["create"],"before":null,"after":{"description":"kz8s bastion security group","egress":[{"cidr_blocks":["0.0.0.0/0"],"description":"","from_port":0,"ipv6_cidr_blocks":[],"prefix_list_ids":[],"protocol":"-1","security_groups":[],"self":false,"to_port":0}],"ingress":[{"cidr_blocks":["0.0.0.0/0"],"description":"","from_port":22,"ipv6_cidr_blocks":[],"prefix_list_ids":[],"protocol":"tcp","security_groups":[],"self":false,"to_port":22}],"name":"kz8s-bastion-asdfasdf","name_prefix":null,"revoke_rules_on_delete":false,"tags":{"KubernetesCluster":"asdfasdf","Name":"kz8s-bastion-asdfasdf","builtWith":"terraform","kz8s":"asdfasdf"},"timeouts":null,"vpc_id":"vpc-033a54f26ef5e2b4a"},"after_unknown":{"arn":true,"egress":[{"cidr_blocks":[false],"ipv6_cidr_blocks":[],"prefix_list_ids":[],"security_groups":[]}],"id":true,"ingress":[{"cidr_blocks":[false],"ipv6_cidr_blocks":[],"prefix_list_ids":[],"security_groups":[]}],"owner_id":true,"tags":{}}}},{"address":"module.security.aws_security_group.etcd","module_address":"module.security","mode":"managed","type":"aws_security_group","name":"etcd","provider_name":"aws","change":{"actions":["create"],"before":null,"after":{"description":"kz8s etcd security group","egress":[{"cidr_blocks":["0.0.0.0/0"],"description":"","from_port":0,"ipv6_cidr_blocks":[],"prefix_list_ids":[],"protocol":"-1","security_groups":[],"self":false,"to_port":0}],"ingress":[{"cidr_blocks":["10.0.0.0/16"],"description":"","from_port":0,"ipv6_cidr_blocks":[],"prefix_list_ids":[],"protocol":"-1","security_groups":[],"self":true,"to_port":0}],"name":"kz8s-etcd-asdfasdf","name_prefix":null,"revoke_rules_on_delete":false,"tags":{"KubernetesCluster":"asdfasdf","Name":"kz8s-etcd-asdfasdf","builtWith":"terraform","kz8s":"asdfasdf"},"timeouts":null,"vpc_id":"vpc-033a54f26ef5e2b4a"},"after_unknown":{"arn":true,"egress":[{"cidr_blocks":[false],"ipv6_cidr_blocks":[],"prefix_list_ids":[],"security_groups":[]}],"id":true,"ingress":[{"cidr_blocks":[false],"ipv6_cidr_blocks":[],"prefix_list_ids":[],"security_groups":[]}],"owner_id":true,"tags":{}}}},{"address":"module.security.aws_security_group.external-elb","module_address":"module.security","mode":"managed","type":"aws_security_group","name":"external-elb","provider_name":"aws","change":{"actions":["create"],"before":null,"after":{"description":"kz8s-asdfasdf master (apiserver) external elb","egress":[{"cidr_blocks":[],"description":"","from_port":0,"ipv6_cidr_blocks":[],"prefix_list_ids":[],"protocol":"-1","security_groups":["module.security.aws_security_group.etcd.id"],"self":false,"to_port":0}],"ingress":[{"cidr_blocks":["0.0.0.0/0"],"description":"","from_port":-1,"ipv6_cidr_blocks":[],"prefix_list_ids":[],"protocol":"icmp","security_groups":[],"self":false,"to_port":-1},{"cidr_blocks":["0.0.0.0/0"],"description":"","from_port":443,"ipv6_cidr_blocks":[],"prefix_list_ids":[],"protocol":"tcp","security_groups":[],"self":false,"to_port":443}],"name":"kz8s-master-external-elb-asdfasdf","name_prefix":null,"revoke_rules_on_delete":false,"tags":{"KubernetesCluster":"asdfasdf","Name":"kz8s-master-external-elb-asdfasdf","builtWith":"terraform","kz8s":"asdfasdf"},"timeouts":null,"vpc_id":"vpc-033a54f26ef5e2b4a"},"after_unknown":{"arn":true,"egress":[{"cidr_blocks":[],"ipv6_cidr_blocks":[],"prefix_list_ids":[],"security_groups":[false]}],"id":true,"ingress":[{"cidr_blocks":[false],"ipv6_cidr_blocks":[],"prefix_list_ids":[],"security_groups":[]},{"cidr_blocks":[false],"ipv6_cidr_blocks":[],"prefix_list_ids":[],"security_groups":[]}],"owner_id":true,"tags":{}}}},{"address":"module.security.aws_security_group.pki","module_address":"module.security","mode":"managed","type":"aws_security_group","name":"pki","provider_name":"aws","change":{"actions":["create"],"before":null,"after":{"description":"k8s pki security group","egress":[{"cidr_blocks":["0.0.0.0/0"],"description":"","from_port":0,"ipv6_cidr_blocks":[],"prefix_list_ids":[],"protocol":"-1","security_groups":[],"self":false,"to_port":0}],"ingress":[{"cidr_blocks":["10.0.0.0/16"],"description":"","from_port":0,"ipv6_cidr_blocks":[],"prefix_list_ids":[],"protocol":"-1","security_groups":[],"self":true,"to_port":0}],"name":"kz8s-pki-asdfasdf","name_prefix":null,"revoke_rules_on_delete":false,"tags":{"KubernetesCluster":"asdfasdf","Name":"kz8s-pki-asdfasdf","builtWith":"terraform","kz8s":"asdfasdf"},"timeouts":null,"vpc_id":"vpc-033a54f26ef5e2b4a"},"after_unknown":{"arn":true,"egress":[{"cidr_blocks":[false],"ipv6_cidr_blocks":[],"prefix_list_ids":[],"security_groups":[]}],"id":true,"ingress":[{"cidr_blocks":[false],"ipv6_cidr_blocks":[],"prefix_list_ids":[],"security_groups":[]}],"owner_id":true,"tags":{}}}},{"address":"module.security.aws_security_group.worker","module_address":"module.security","mode":"managed","type":"aws_security_group","name":"worker","provider_name":"aws","change":{"actions":["create"],"before":null,"after":{"description":"kz8s worker security group","egress":[{"cidr_blocks":["0.0.0.0/0"],"description":"","from_port":0,"ipv6_cidr_blocks":[],"prefix_list_ids":[],"protocol":"-1","security_groups":[],"self":false,"to_port":0}],"ingress":[{"cidr_blocks":["10.0.0.0/16"],"description":"","from_port":0,"ipv6_cidr_blocks":[],"prefix_list_ids":[],"protocol":"-1","security_groups":[],"self":true,"to_port":0}],"name":"kz8s-worker-asdfasdf","name_prefix":null,"revoke_rules_on_delete":false,"tags":{"KubernetesCluster":"asdfasdf","Name":"kz8s-worker-asdfasdf","builtWith":"terraform","kz8s":"asdfasdf"},"timeouts":null,"vpc_id":"vpc-033a54f26ef5e2b4a"},"after_unknown":{"arn":true,"egress":[{"cidr_blocks":[false],"ipv6_cidr_blocks":[],"prefix_list_ids":[],"security_groups":[]}],"id":true,"ingress":[{"cidr_blocks":[false],"ipv6_cidr_blocks":[],"prefix_list_ids":[],"security_groups":[]}],"owner_id":true,"tags":{}}}},{"address":"module.security.null_resource.dummy_dependency","module_address":"module.security","mode":"managed","type":"null_resource","name":"dummy_dependency","provider_name":"null","change":{"actions":["create"],"before":null,"after":{"triggers":null},"after_unknown":{"id":true}}},{"address":"module.worker.aws_autoscaling_group.worker","module_address":"module.worker","mode":"managed","type":"aws_autoscaling_group","name":"worker","provider_name":"aws","change":{"actions":["create"],"before":null,"after":{"capacity_rebalance":null,"desired_capacity":3,"enabled_metrics":null,"force_delete":true,"health_check_grace_period":60,"health_check_type":"EC2","initial_lifecycle_hook":[],"instance_refresh":[],"launch_configuration":"module.worker.aws_launch_configuration.worker.name","launch_template":[],"load_balancers":null,"max_instance_lifetime":null,"max_size":5,"metrics_granularity":"1Minute","min_elb_capacity":null,"min_size":1,"mixed_instances_policy":[],"name":"worker-general-asdfasdf","name_prefix":null,"placement_group":null,"protect_from_scale_in":false,"suspended_processes":null,"tag":[{"key":"KubernetesCluster","propagate_at_launch":true,"value":"asdfasdf"},{"key":"Name","propagate_at_launch":true,"value":"kz8s-worker"},{"key":"builtWith","propagate_at_launch":true,"value":"terraform"},{"key":"depends-id","propagate_at_launch":false,"value":"module.route53.null_resource.dummy_dependency.id"},{"key":"kz8s","propagate_at_launch":true,"value":"asdfasdf"},{"key":"role","propagate_at_launch":true,"value":"worker"},{"key":"version","propagate_at_launch":true,"value":"v1.5.1_coreos.0"},{"key":"visibility","propagate_at_launch":true,"value":"private"}],"tags":null,"target_group_arns":null,"termination_policies":null,"timeouts":null,"vpc_zone_identifier":[""],"wait_for_capacity_timeout":"10m","wait_for_elb_capacity":null},"after_unknown":{"arn":true,"availability_zones":true,"default_cooldown":true,"id":true,"initial_lifecycle_hook":[],"instance_refresh":[],"launch_template":[],"mixed_instances_policy":[],"service_linked_role_arn":true,"tag":[{},{},{},{},{},{},{},{}],"vpc_zone_identifier":[false]}}},{"address":"module.worker.aws_launch_configuration.worker","module_address":"module.worker","mode":"managed","type":"aws_launch_configuration","name":"worker","provider_name":"aws","change":{"actions":["create"],"before":null,"after":{"associate_public_ip_address":false,"ebs_block_device":[{"delete_on_termination":true,"device_name":"/dev/xvdf","no_device":null,"volume_size":250,"volume_type":"gp2"}],"enable_monitoring":true,"ephemeral_block_device":[],"iam_instance_profile":"kz8s-worker-asdfasdf","image_id":"","instance_type":"m3.large","name_prefix":null,"placement_tenancy":null,"root_block_device":[{"delete_on_termination":true,"volume_size":52,"volume_type":"gp2"}],"security_groups":["module.security.aws_security_group.worker.id"],"spot_price":null,"user_data":"a2c67cfdb8540764d1d74f23c43ced2049e4d364","user_data_base64":null,"vpc_classic_link_id":null,"vpc_classic_link_security_groups":null},"after_unknown":{"arn":true,"ebs_block_device":[{"encrypted":true,"iops":true,"snapshot_id":true}],"ebs_optimized":true,"ephemeral_block_device":[],"id":true,"key_name":true,"metadata_options":true,"name":true,"root_block_device":[{"encrypted":true,"iops":true}],"security_groups":[false]}}},{"address":"module.worker.null_resource.dummy_dependency","module_address":"module.worker","mode":"managed","type":"null_resource","name":"dummy_dependency","provider_name":"null","change":{"actions":["create"],"before":null,"after":{"triggers":null},"after_unknown":{"id":true}}}],"output_changes":{"autoscaling-group-name":{"actions":["create"],"before":null,"after":"worker-general-asdfasdf","after_unknown":false},"aws-iam-role-bastion-id":{"actions":["create"],"before":null,"after":"module.iam.aws_iam_role.bastion.id","after_unknown":false},"aws-iam-role-etcd-id":{"actions":["create"],"before":null,"after":"module.iam.aws_iam_role.master.id","after_unknown":false},"aws-iam-role-pki-id":{"actions":["create"],"before":null,"after":"module.iam.aws_iam_role.pki.id","after_unknown":false},"aws-iam-role-worker-id":{"actions":["create"],"before":null,"after":"module.iam.aws_iam_role.worker.id","after_unknown":false},"azs":{"actions":["create"],"before":null,"after":"","after_unknown":false},"bastion-id":{"actions":["create"],"before":null,"after":"module.security.aws_security_group.bastion.id","after_unknown":false},"bastion-ip":{"actions":["create"],"before":null,"after":"module.bastion.aws_instance.bastion.public_ip","after_unknown":false},"bucket":{"actions":["create"],"before":null,"after":"kz8s-pki-asdfasdf--","after_unknown":false},"bucket-arn":{"actions":["create"],"before":null,"after":"module.s3.aws_s3_bucket.pki.arn","after_unknown":false},"cluster-domain":{"actions":["create"],"before":null,"after":"cluster.local","after_unknown":false},"depends-id":{"actions":["create"],"before":null,"after":"module.etcd.null_resource.dummy_dependency.id","after_unknown":false},"dns-service-ip":{"actions":["create"],"before":null,"after":"10.3.0.10","after_unknown":false},"etcd-id":{"actions":["create"],"before":null,"after":"module.security.aws_security_group.etcd.id","after_unknown":false},"etcd1-ip":{"actions":["create"],"before":null,"after":"10.0.10.10","after_unknown":false},"external-elb":{"actions":["create"],"before":null,"after":"module.etcd.aws_elb.external.dns_name","after_unknown":false},"external-elb-id":{"actions":["create"],"before":null,"after":"module.security.aws_security_group.external-elb.id","after_unknown":false},"gateway-id":{"actions":["create"],"before":null,"after":"","after_unknown":false},"id":{"actions":["create"],"before":null,"after":"vpc-033a54f26ef5e2b4a","after_unknown":false},"instance-profile-name-bastion":{"actions":["create"],"before":null,"after":"kz8s-bastion-asdfasdf","after_unknown":false},"instance-profile-name-master":{"actions":["create"],"before":null,"after":"kz8s-master-asdfasdf","after_unknown":false},"instance-profile-name-pki":{"actions":["create"],"before":null,"after":"kz8s-pki-asdfasdf","after_unknown":false},"instance-profile-name-worker":{"actions":["create"],"before":null,"after":"kz8s-worker-asdfasdf","after_unknown":false},"internal-ips":{"actions":["create"],"before":null,"after":"module.etcd.aws_instance.etcd[0].public_ip,module.etcd.aws_instance.etcd[1].public_ip,module.etcd.aws_instance.etcd[2].public_ip","after_unknown":false},"internal-name-servers":{"actions":["create"],"before":null,"after_unknown":true},"internal-tld":{"actions":["create"],"before":null,"after":"asdf.com","after_unknown":false},"internal-zone-id":{"actions":["create"],"before":null,"after":"module.route53.aws_route53_zone.internal.zone_id","after_unknown":false},"ip":{"actions":["create"],"before":null,"after":"module.bastion.aws_instance.bastion.public_ip","after_unknown":false},"ips":{"actions":["create"],"before":null,"after":{"bastion":"module.bastion.aws_instance.bastion.public_ip","dns-service":"10.3.0.10","etcd":"10.0.10.10,10.0.10.11,10.0.10.12","pki":"1.1.1.1"},"after_unknown":false},"name":{"actions":["create"],"before":null,"after":"asdfasdf","after_unknown":false},"pki-id":{"actions":["create"],"before":null,"after":"module.security.aws_security_group.pki.id","after_unknown":false},"pki-ip":{"actions":["create"],"before":null,"after":"1.1.1.1","after_unknown":false},"region":{"actions":["create"],"before":null,"after":"","after_unknown":false},"s3-bucket":{"actions":["create"],"before":null,"after":"kz8s-pki-asdfasdf--","after_unknown":false},"subnet-ids-private":{"actions":["create"],"before":null,"after":"","after_unknown":false},"subnet-ids-public":{"actions":["create"],"before":null,"after":"","after_unknown":false},"worker-autoscaling-group-name":{"actions":["create"],"before":null,"after":"worker-general-asdfasdf","after_unknown":false},"worker-id":{"actions":["create"],"before":null,"after":"module.security.aws_security_group.worker.id","after_unknown":false}},"prior_state":{"format_version":"0.1","terraform_version":"0.12.29","values":{"outputs":{"azs":{"sensitive":false,"value":""},"cluster-domain":{"sensitive":false,"value":"cluster.local"},"dns-service-ip":{"sensitive":false,"value":"10.3.0.10"},"etcd1-ip":{"sensitive":false,"value":"10.0.10.10"},"internal-tld":{"sensitive":false,"value":"asdf.com"},"name":{"sensitive":false,"value":"asdfasdf"},"region":{"sensitive":false,"value":""},"s3-bucket":{"sensitive":false,"value":"kz8s-pki-asdfasdf--"},"subnet-ids-private":{"sensitive":false,"value":""},"subnet-ids-public":{"sensitive":false,"value":""}},"root_module":{"child_modules":[{"resources":[{"address":"data.template_file.cloud-config","mode":"data","type":"template_file","name":"cloud-config","provider_name":"template","schema_version":0,"values":{"filename":null,"id":"811c6f144821384093e3fba37906dac0267ad2c4870895f16f136c9a89d80bc3","rendered":"#cloud-config\n\n---\ncoreos:\n  update:\n    reboot-strategy: etcd-lock\n\n  units:\n    - name: generate-service-account-key.service\n      command: start\n      content: |\n        [Unit]\n        Description=Generate service-account key file\n        ConditionFileNotEmpty=!/etc/cfssl/service-account-key.pem\n        [Service]\n        Type=oneshot\n        RemainAfterExit=yes\n        ExecStartPre=-/usr/bin/mkdir --parents /etc/cfssl\n        ExecStartPre=/bin/openssl genrsa -out /etc/cfssl/service-account-key.pem 2048 2\u003e/dev/null\n        ExecStart=/usr/bin/rkt run \\\n          --net=host \\\n          --trust-keys-from-https \\\n          --volume=dns,kind=host,source=/etc/resolv.conf,readOnly=true --mount volume=dns,target=/etc/resolv.conf \\\n          --volume=ssl,kind=host,source=/etc/cfssl,readOnly=true --mount=volume=ssl,target=/etc/cfssl \\\n          quay.io/coreos/awscli -- aws s3 cp /etc/cfssl/service-account-key.pem s3://kz8s-pki-asdfasdf--/\n\n    - name: download-cfssl.service\n      command: start\n      content: |\n        [Unit]\n        Description=Download cfssl\n        ConditionFileNotEmpty=!/opt/bin/cfssl\n        ConditionFileNotEmpty=!/opt/bin/cfssljson\n        [Service]\n        Type=oneshot\n        RemainAfterExit=yes\n        ExecStartPre=/usr/bin/mkdir --parents /opt/bin\n        ExecStartPre=/usr/bin/curl -L -o /opt/bin/cfssl https://pkg.cfssl.org/R1.2/cfssl_linux-amd64\n        ExecStartPre=/usr/bin/curl -L -o /opt/bin/cfssljson https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64\n        ExecStart=/usr/bin/chmod +x /opt/bin/cfssl /opt/bin/cfssljson\n\n    - name: generate-rootca.service\n      command: start\n      content: |\n        [Unit]\n        After=download-cfssl.service\n        ConditionFileIsExecutable=/opt/bin/cfssl\n        ConditionFileIsExecutable=/opt/bin/cfssljson\n        ConditionFileNotEmpty=!/etc/cfssl/ca.pem\n        Description=Generate rootca and save to s3\n        [Service]\n        Type=oneshot\n        RemainAfterExit=yes\n        WorkingDirectory=/etc/cfssl\n        ExecStartPre=/usr/bin/mkdir --parents /etc/cfssl\n        ExecStartPre=/bin/sh -c \"\\\n          /opt/bin/cfssl gencert -initca ca-csr.json \\\n          | /opt/bin/cfssljson -bare ca -\"\n        ExecStart=/usr/bin/rkt run \\\n          --net=host \\\n          --trust-keys-from-https \\\n          --volume=dns,kind=host,source=/etc/resolv.conf,readOnly=true --mount volume=dns,target=/etc/resolv.conf \\\n          --volume=ssl,kind=host,source=/etc/cfssl,readOnly=true --mount=volume=ssl,target=/etc/cfssl \\\n          quay.io/coreos/awscli -- aws s3 cp /etc/cfssl/ca.pem s3://kz8s-pki-asdfasdf--/\n\n    - name: cfssl.service\n      command: start\n      content: |\n        [Unit]\n        After=download-ssl.service\n        ConditionFileIsExecutable=/opt/bin/cfssl\n        Description=Start up cfssl service\n        [Service]\n        ExecStart=/opt/bin/cfssl serve \\\n          -address 0.0.0.0 \\\n          -ca /etc/cfssl/ca.pem \\\n          -ca-key /etc/cfssl/ca-key.pem \\\n          -config /etc/cfssl/ca-config.json\n        Restart=always\n        RestartSec=10\n\nwrite-files:\n  - path: /etc/cfssl/ca-csr.json\n    content: |\n      {\n        \"CN\": \"CA\",\n        \"key\": { \"algo\": \"rsa\", \"size\": 2048 },\n        \"names\": [{ \"C\": \"US\", \"L\": \"San Francisco\", \"O\": \"Kubernetes\", \"ST\": \"California\" }]\n      }\n\n  - path: /etc/cfssl/ca-config.json\n    content: |\n      {\n        \"signing\": {\n          \"default\": { \"expiry\": \"43800h\" },\n          \"profiles\": {\n            \"server\": {\n              \"expiry\": \"43800h\",\n              \"usages\": [ \"signing\", \"key encipherment\", \"server auth\" ]\n            },\n            \"client\": {\n              \"expiry\": \"43800h\",\n              \"usages\": [ \"signing\", \"key encipherment\", \"client auth\" ]\n            },\n            \"client-server\": {\n              \"expiry\": \"43800h\",\n              \"usages\": [ \"signing\", \"key encipherment\", \"server auth\", \"client auth\" ]\n            }\n          }\n        }\n      }\n\n  - path: /etc/cfssl/s3-bucket\n    content: kz8s-pki-asdfasdf--\n","template":"#cloud-config\n\n---\ncoreos:\n  update:\n    reboot-strategy: etcd-lock\n\n  units:\n    - name: generate-service-account-key.service\n      command: start\n      content: |\n        [Unit]\n        Description=Generate service-account key file\n        ConditionFileNotEmpty=!/etc/cfssl/service-account-key.pem\n        [Service]\n        Type=oneshot\n        RemainAfterExit=yes\n        ExecStartPre=-/usr/bin/mkdir --parents /etc/cfssl\n        ExecStartPre=/bin/openssl genrsa -out /etc/cfssl/service-account-key.pem 2048 2\u003e/dev/null\n        ExecStart=/usr/bin/rkt run \\\n          --net=host \\\n          --trust-keys-from-https \\\n          --volume=dns,kind=host,source=/etc/resolv.conf,readOnly=true --mount volume=dns,target=/etc/resolv.conf \\\n          --volume=ssl,kind=host,source=/etc/cfssl,readOnly=true --mount=volume=ssl,target=/etc/cfssl \\\n          quay.io/coreos/awscli -- aws s3 cp /etc/cfssl/service-account-key.pem s3://${ s3-bucket }/\n\n    - name: download-cfssl.service\n      command: start\n      content: |\n        [Unit]\n        Description=Download cfssl\n        ConditionFileNotEmpty=!/opt/bin/cfssl\n        ConditionFileNotEmpty=!/opt/bin/cfssljson\n        [Service]\n        Type=oneshot\n        RemainAfterExit=yes\n        ExecStartPre=/usr/bin/mkdir --parents /opt/bin\n        ExecStartPre=/usr/bin/curl -L -o /opt/bin/cfssl https://pkg.cfssl.org/R1.2/cfssl_linux-amd64\n        ExecStartPre=/usr/bin/curl -L -o /opt/bin/cfssljson https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64\n        ExecStart=/usr/bin/chmod +x /opt/bin/cfssl /opt/bin/cfssljson\n\n    - name: generate-rootca.service\n      command: start\n      content: |\n        [Unit]\n        After=download-cfssl.service\n        ConditionFileIsExecutable=/opt/bin/cfssl\n        ConditionFileIsExecutable=/opt/bin/cfssljson\n        ConditionFileNotEmpty=!/etc/cfssl/ca.pem\n        Description=Generate rootca and save to s3\n        [Service]\n        Type=oneshot\n        RemainAfterExit=yes\n        WorkingDirectory=/etc/cfssl\n        ExecStartPre=/usr/bin/mkdir --parents /etc/cfssl\n        ExecStartPre=/bin/sh -c \"\\\n          /opt/bin/cfssl gencert -initca ca-csr.json \\\n          | /opt/bin/cfssljson -bare ca -\"\n        ExecStart=/usr/bin/rkt run \\\n          --net=host \\\n          --trust-keys-from-https \\\n          --volume=dns,kind=host,source=/etc/resolv.conf,readOnly=true --mount volume=dns,target=/etc/resolv.conf \\\n          --volume=ssl,kind=host,source=/etc/cfssl,readOnly=true --mount=volume=ssl,target=/etc/cfssl \\\n          quay.io/coreos/awscli -- aws s3 cp /etc/cfssl/ca.pem s3://${ s3-bucket }/\n\n    - name: cfssl.service\n      command: start\n      content: |\n        [Unit]\n        After=download-ssl.service\n        ConditionFileIsExecutable=/opt/bin/cfssl\n        Description=Start up cfssl service\n        [Service]\n        ExecStart=/opt/bin/cfssl serve \\\n          -address 0.0.0.0 \\\n          -ca /etc/cfssl/ca.pem \\\n          -ca-key /etc/cfssl/ca-key.pem \\\n          -config /etc/cfssl/ca-config.json\n        Restart=always\n        RestartSec=10\n\nwrite-files:\n  - path: /etc/cfssl/ca-csr.json\n    content: |\n      {\n        \"CN\": \"CA\",\n        \"key\": { \"algo\": \"rsa\", \"size\": 2048 },\n        \"names\": [{ \"C\": \"US\", \"L\": \"San Francisco\", \"O\": \"Kubernetes\", \"ST\": \"California\" }]\n      }\n\n  - path: /etc/cfssl/ca-config.json\n    content: |\n      {\n        \"signing\": {\n          \"default\": { \"expiry\": \"43800h\" },\n          \"profiles\": {\n            \"server\": {\n              \"expiry\": \"43800h\",\n              \"usages\": [ \"signing\", \"key encipherment\", \"server auth\" ]\n            },\n            \"client\": {\n              \"expiry\": \"43800h\",\n              \"usages\": [ \"signing\", \"key encipherment\", \"client auth\" ]\n            },\n            \"client-server\": {\n              \"expiry\": \"43800h\",\n              \"usages\": [ \"signing\", \"key encipherment\", \"server auth\", \"client auth\" ]\n            }\n          }\n        }\n      }\n\n  - path: /etc/cfssl/s3-bucket\n    content: ${ s3-bucket }\n","vars":{"internal-tld":"asdf.com","s3-bucket":"kz8s-pki-asdfasdf--"}}}],"address":"module.pki"},{"resources":[{"address":"data.template_file.cloud-config","mode":"data","type":"template_file","name":"cloud-config","provider_name":"template","schema_version":0,"values":{"filename":null,"id":"f712dbe7d85bdd5c0901ca87d1322afc514faa4a87343666e6bcbc9d9c926de3","rendered":"#cloud-config\n\n---\ncoreos:\n\n  locksmith:\n    endpoint: https://etcd.asdf.com:2379\n    etcd_cafile: /etc/kubernetes/ssl/ca.pem\n    etcd_certfile: /etc/kubernetes/ssl/k8s-bastion.pem\n    etcd_keyfile: /etc/kubernetes/ssl/k8s-bastion-key.pem\n\n\n  update:\n    reboot-strategy: etcd-lock\n\n\n  units:\n\n    - name: create-certificates.service\n      command: start\n      content: |\n        [Unit]\n        After=download-cfssl.service\n        Requires=download-cfssl.service\n        Before=flannel.service\n        RequiredBy=flannel.service\n        Description=Get ssl artifacts from s3 bucket using IAM role and create local certificates\n        [Service]\n        Type=oneshot\n        RemainAfterExit=yes\n        ExecStartPre=-/usr/bin/mkdir --parents /etc/kubernetes/ssl\n        ExecStartPre=/opt/bin/fetch-from-s3 ca.pem\n        ExecStart=/opt/bin/create-certificates\n\n    - name: download-cfssl.service\n      command: start\n      content: |\n        [Unit]\n        After=network-online.target\n        Requires=network-online.target\n        Before=etcd-member.service\n        Description=Download cfssl\n        [Service]\n        Type=oneshot\n        RemainAfterExit=yes\n        ExecStartPre=-/usr/bin/mkdir --parents /etc/kubernetes/ssl\n        ExecStartPre=-/usr/bin/mkdir --parents /opt/bin\n        ExecStartPre=/usr/bin/curl -L -o /opt/bin/cfssl https://pkg.cfssl.org/R1.2/cfssl_linux-amd64\n        ExecStartPre=/usr/bin/curl -L -o /opt/bin/cfssljson https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64\n        ExecStart=/usr/bin/chmod +x /opt/bin/cfssl /opt/bin/cfssljson\n\n\nwrite-files:\n  - path: /etc/environment\n    permissions: 0644\n    content: |\n      ETCDCTL_CA_FILE=/etc/kubernetes/ssl/ca.pem\n      ETCDCTL_CERT_FILE=/etc/kubernetes/ssl/k8s-bastion.pem\n      ETCDCTL_ENDPOINTS=https://etcd.asdf.com:2379\n      ETCDCTL_KEY_FILE=/etc/kubernetes/ssl/k8s-bastion-key.pem\n\n  - path: /opt/bin/host-rkt\n    permissions: 0755\n    owner: root:root\n    content: |\n      #!/bin/sh\n      exec nsenter -m -u -i -n -p -t 1 -- /usr/bin/rkt \"$@\"\n\n  - path: /opt/bin/fetch-from-s3\n    permissions: 0755\n    owner: root:root\n    content: |\n      #!/bin/bash -e\n      until /usr/bin/rkt run \\\n        --net=host \\\n        --trust-keys-from-https \\\n        --volume=dns,kind=host,source=/etc/resolv.conf,readOnly=true --mount volume=dns,target=/etc/resolv.conf \\\n        --volume=ssl,kind=host,source=/etc/kubernetes/ssl,readOnly=false --mount=volume=ssl,target=/etc/kubernetes/ssl \\\n        quay.io/coreos/awscli -- aws s3 cp s3://kz8s-pki-asdfasdf--/$1 /etc/kubernetes/ssl\n      do\n        echo \"retrying\"\n        sleep 5.2\n      done\n      echo \"✓\"\n\n  - path: /opt/bin/create-certificates\n    permissions: 0755\n    owner: root:root\n    content: |\n      #!/bin/bash -ex\n\n      OUTDIR=/etc/kubernetes/ssl\n\n      function error {\n        echo \"✗ Error on line $1\"'!'\n        exit 1\n      }\n      trap 'error ${LINENO}' ERR\n\n      until printf \".\" \u0026\u0026 curl -d '{\"label\":\"primary\"}' http://pki.asdf.com:8888/api/v1/cfssl/info \u0026\u003e/dev/null\n      do sleep 5.2; done; echo \"✓\"\n\n      DNS1=\"kubernetes\"\n      DNS2=\"kubernetes.default\"\n      DNS3=\"kubernetes.default.svc\"\n      DNS4=\"kubernetes.default.svc.cluster.local\"\n      DEFAULT_HOSTS=\"$DNS1,$DNS2,$DNS3,$DNS4,127.0.0.1\"\n\n      function csr {\n        cat \u003c\u003cEOF\n      {\"CN\":\"$1\",\"hosts\":[\"\"],\"key\":{\"algo\":\"rsa\",\"size\":2048}}\n      EOF\n      }\n\n      function generate {\n\n        CN=$1\n        PROFILE=$2\n        HOSTS=$3\n\n        echo \"$(csr $CN)\" \\\n          | /opt/bin/cfssl gencert \\\n            -remote=pki.asdf.com:8888 \\\n            -profile=$PROFILE \\\n            -hostname=\"$HOSTS\" - \\\n          | /opt/bin/cfssljson -bare $CN\n\n        chmod 0644 ${CN}.pem ${CN}-key.pem\n\n      }\n\n      mkdir -p $OUTDIR \u0026\u0026 cd $OUTDIR\n\n      generate k8s-bastion client \"k8s-bastion\"\n","template":"#cloud-config\n\n---\ncoreos:\n\n  locksmith:\n    endpoint: https://etcd.${ internal-tld }:2379\n    etcd_cafile: /etc/kubernetes/ssl/ca.pem\n    etcd_certfile: /etc/kubernetes/ssl/k8s-bastion.pem\n    etcd_keyfile: /etc/kubernetes/ssl/k8s-bastion-key.pem\n\n\n  update:\n    reboot-strategy: etcd-lock\n\n\n  units:\n\n    - name: create-certificates.service\n      command: start\n      content: |\n        [Unit]\n        After=download-cfssl.service\n        Requires=download-cfssl.service\n        Before=flannel.service\n        RequiredBy=flannel.service\n        Description=Get ssl artifacts from s3 bucket using IAM role and create local certificates\n        [Service]\n        Type=oneshot\n        RemainAfterExit=yes\n        ExecStartPre=-/usr/bin/mkdir --parents /etc/kubernetes/ssl\n        ExecStartPre=/opt/bin/fetch-from-s3 ca.pem\n        ExecStart=/opt/bin/create-certificates\n\n    - name: download-cfssl.service\n      command: start\n      content: |\n        [Unit]\n        After=network-online.target\n        Requires=network-online.target\n        Before=etcd-member.service\n        Description=Download cfssl\n        [Service]\n        Type=oneshot\n        RemainAfterExit=yes\n        ExecStartPre=-/usr/bin/mkdir --parents /etc/kubernetes/ssl\n        ExecStartPre=-/usr/bin/mkdir --parents /opt/bin\n        ExecStartPre=/usr/bin/curl -L -o /opt/bin/cfssl https://pkg.cfssl.org/R1.2/cfssl_linux-amd64\n        ExecStartPre=/usr/bin/curl -L -o /opt/bin/cfssljson https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64\n        ExecStart=/usr/bin/chmod +x /opt/bin/cfssl /opt/bin/cfssljson\n\n\nwrite-files:\n  - path: /etc/environment\n    permissions: 0644\n    content: |\n      ETCDCTL_CA_FILE=/etc/kubernetes/ssl/ca.pem\n      ETCDCTL_CERT_FILE=/etc/kubernetes/ssl/k8s-bastion.pem\n      ETCDCTL_ENDPOINTS=https://etcd.${ internal-tld }:2379\n      ETCDCTL_KEY_FILE=/etc/kubernetes/ssl/k8s-bastion-key.pem\n\n  - path: /opt/bin/host-rkt\n    permissions: 0755\n    owner: root:root\n    content: |\n      #!/bin/sh\n      exec nsenter -m -u -i -n -p -t 1 -- /usr/bin/rkt \"$@\"\n\n  - path: /opt/bin/fetch-from-s3\n    permissions: 0755\n    owner: root:root\n    content: |\n      #!/bin/bash -e\n      until /usr/bin/rkt run \\\n        --net=host \\\n        --trust-keys-from-https \\\n        --volume=dns,kind=host,source=/etc/resolv.conf,readOnly=true --mount volume=dns,target=/etc/resolv.conf \\\n        --volume=ssl,kind=host,source=/etc/kubernetes/ssl,readOnly=false --mount=volume=ssl,target=/etc/kubernetes/ssl \\\n        quay.io/coreos/awscli -- aws s3 cp s3://${ s3-bucket }/$1 /etc/kubernetes/ssl\n      do\n        echo \"retrying\"\n        sleep 5.2\n      done\n      echo \"✓\"\n\n  - path: /opt/bin/create-certificates\n    permissions: 0755\n    owner: root:root\n    content: |\n      #!/bin/bash -ex\n\n      OUTDIR=/etc/kubernetes/ssl\n\n      function error {\n        echo \"✗ Error on line $1\"'!'\n        exit 1\n      }\n      trap 'error $${LINENO}' ERR\n\n      until printf \".\" \u0026\u0026 curl -d '{\"label\":\"primary\"}' http://pki.${ internal-tld }:8888/api/v1/cfssl/info \u0026\u003e/dev/null\n      do sleep 5.2; done; echo \"✓\"\n\n      DNS1=\"kubernetes\"\n      DNS2=\"kubernetes.default\"\n      DNS3=\"kubernetes.default.svc\"\n      DNS4=\"kubernetes.default.svc.cluster.local\"\n      DEFAULT_HOSTS=\"$DNS1,$DNS2,$DNS3,$DNS4,127.0.0.1\"\n\n      function csr {\n        cat \u003c\u003cEOF\n      {\"CN\":\"$1\",\"hosts\":[\"\"],\"key\":{\"algo\":\"rsa\",\"size\":2048}}\n      EOF\n      }\n\n      function generate {\n\n        CN=$1\n        PROFILE=$2\n        HOSTS=$3\n\n        echo \"$(csr $CN)\" \\\n          | /opt/bin/cfssl gencert \\\n            -remote=pki.${ internal-tld }:8888 \\\n            -profile=$PROFILE \\\n            -hostname=\"$HOSTS\" - \\\n          | /opt/bin/cfssljson -bare $CN\n\n        chmod 0644 $${CN}.pem $${CN}-key.pem\n\n      }\n\n      mkdir -p $OUTDIR \u0026\u0026 cd $OUTDIR\n\n      generate k8s-bastion client \"k8s-bastion\"\n","vars":{"internal-tld":"asdf.com","s3-bucket":"kz8s-pki-asdfasdf--"}}}],"address":"module.bastion"},{"resources":[{"address":"data.template_file.cloud-config","mode":"data","type":"template_file","name":"cloud-config","provider_name":"template","schema_version":0,"values":{"filename":null,"id":"16a518caa952ef67e33ec072f4b9ab5f8c8dc006759f5c04e0698a23f1358df4","rendered":"#cloud-config\n\n---\ncoreos:\n\n  locksmith:\n    endpoint: https://etcd.asdf.com:2379\n    etcd_cafile: /etc/kubernetes/ssl/ca.pem\n    etcd_certfile: /etc/kubernetes/ssl/k8s-etcd.pem\n    etcd_keyfile: /etc/kubernetes/ssl/k8s-etcd-key.pem\n\n  flannel:\n    etcd_cafile: /etc/kubernetes/ssl/ca.pem\n    etcd_certfile: /etc/kubernetes/ssl/k8s-worker.pem\n    etcd_endpoints: https://etcd.asdf.com:2379\n    etcd_keyfile: /etc/kubernetes/ssl/k8s-worker-key.pem\n\n  units:\n    - name: etcd-member.service\n      command: start\n      drop-ins:\n        - name: 01-wait-for-certs.conf\n          content: |\n            [Unit]\n            After=create-certificates.service\n            Requires=create-certificates.service\n            ConditionFileNotEmpty=/etc/kubernetes/ssl/ca.pem\n            ConditionFileNotEmpty=/etc/kubernetes/ssl/k8s-worker.pem\n            ConditionFileNotEmpty=/etc/kubernetes/ssl/k8s-worker-key.pem\n\n        - name: 10-environment.conf\n          content: |\n            [Service]\n            Environment=\"ETCD_SSL_DIR=/etc/kubernetes/ssl\"\n            Environment=\"ETCD_CERT_FILE=/etc/ssl/certs/k8s-worker.pem\"\n            Environment=\"ETCD_CLIENT_CERT_AUTH=TRUE\"\n            Environment=\"ETCD_DISCOVERY_SRV=asdf.com\"\n            Environment=\"ETCD_KEY_FILE=/etc/ssl/certs/k8s-worker-key.pem\"\n            Environment=\"ETCD_PEER_CERT_FILE=/etc/ssl/certs/k8s-worker.pem\"\n            Environment=\"ETCD_PEER_CLIENT_AUTH=true\"\n            Environment=\"ETCD_PEER_KEY_FILE=/etc/ssl/certs/k8s-worker-key.pem\"\n            Environment=\"ETCD_PEER_TRUSTED_CA_FILE=/etc/ssl/certs/ca.pem\"\n            Environment=\"ETCD_PROXY=on\"\n            Environment=\"ETCD_TRUSTED_CA_FILE=/etc/ssl/certs/ca.pem\"\n\n    - name: format-ephemeral.service\n      command: start\n      content: |\n        [Unit]\n        Description=Formats the ephemeral drive\n        After=dev-xvdf.device\n        Requires=dev-xvdf.device\n        [Service]\n        ExecStart=/usr/sbin/wipefs -f /dev/xvdf\n        ExecStart=/usr/sbin/mkfs.ext4 -F /dev/xvdf\n        RemainAfterExit=yes\n        Type=oneshot\n\n    - name: var-lib-docker.mount\n      command: start\n      content: |\n        [Unit]\n        Description=Mount ephemeral to /var/lib/docker\n        Requires=format-ephemeral.service\n        After=format-ephemeral.service\n        Before=docker.service\n        [Mount]\n        What=/dev/xvdf\n        Where=/var/lib/docker\n        Type=ext4\n\n    - name: download-cfssl.service\n      command: start\n      content: |\n        [Unit]\n        After=network-online.target\n        Requires=network-online.target\n        Before=etcd-member.service\n        Description=Download cfssl\n        [Service]\n        Type=oneshot\n        RemainAfterExit=yes\n        ExecStartPre=-/usr/bin/mkdir --parents /etc/kubernetes/ssl\n        ExecStartPre=-/usr/bin/mkdir --parents /opt/bin\n        ExecStartPre=/usr/bin/curl -L -o /opt/bin/cfssl https://pkg.cfssl.org/R1.2/cfssl_linux-amd64\n        ExecStartPre=/usr/bin/curl -L -o /opt/bin/cfssljson https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64\n        ExecStart=/usr/bin/chmod +x /opt/bin/cfssl /opt/bin/cfssljson\n\n    - name: create-certificates.service\n      command: start\n      content: |\n        [Unit]\n        After=download-cfssl.service\n        Requires=download-cfssl.service\n        Before=flannel.service\n        Description=Get ssl artifacts from s3 bucket using IAM role and create local certificates\n        [Service]\n        Type=oneshot\n        RemainAfterExit=yes\n        ExecStartPre=-/usr/bin/mkdir --parents /etc/kubernetes/ssl\n        ExecStartPre=/opt/bin/fetch-from-s3 ca.pem\n        ExecStart=/opt/bin/create-certificates\n\n    - name: flanneld.service\n      command: start\n      drop-ins:\n        - name: 50-network-config.conf\n          content: |\n            [Service]\n            EnvironmentFile=-/etc/environment\n            Environment=\"ETCD_SSL_DIR=/etc/kubernetes/ssl\"\n            Restart=always\n            RestartSec=10\n\n    - name: docker.service\n      command: start\n      drop-ins:\n        - name: 40-flannel.conf\n          content: |\n            [Unit]\n            After=flanneld.service\n            Requires=flanneld.service\n            [Service]\n            Restart=always\n            RestartSec=10\n\n    - name: prefetch-rkt-hyperkube.service\n      command: start\n      content: |\n        [Unit]\n        After=network-online.target\n        Requires=network-online.target\n        Description=Prefetch rkt Hyperkube\n        [Service]\n        Type=oneshot\n        RemainAfterExit=yes\n        ExecStartPre=/usr/bin/rkt trust --trust-keys-from-https --prefix=quay.io/coreos/hyperkube\n        ExecStart=/usr/bin/rkt fetch quay.io/coreos/hyperkube:v1.5.1_coreos.0\n\n    - name: prefetch-docker-hyperkube.service\n      command: start\n      content: |\n        [Unit]\n        After=docker.service\n        Requires=docker.service\n        Description=Prefetch docker Hyperkube\n        [Service]\n        Type=oneshot\n        RemainAfterExit=yes\n        ExecStart=/usr/bin/docker pull quay.io/coreos/hyperkube:v1.5.1_coreos.0\n\n    - name: kubelet.service\n      command: start\n      content: |\n        [Unit]\n        ConditionFileIsExecutable=/usr/lib/coreos/kubelet-wrapper\n        ConditionFileNotEmpty=/etc/kubernetes/ssl/k8s-worker.pem\n        ConditionFileNotEmpty=/etc/kubernetes/ssl/k8s-worker-key.pem\n        After=flanneld.service\n        After=prefetch-rkt-hyperkube.service\n        After=prefetch-docker-hyperkube.service\n        Requires=flanneld.service\n        [Service]\n        EnvironmentFile=/etc/environment\n        Environment=\"KUBELET_ACI=quay.io/coreos/hyperkube\"\n        Environment=\"KUBELET_VERSION=v1.5.1_coreos.0\"\n        Environment=\"RKT_OPTS=\\\n          --volume dns,kind=host,source=/etc/resolv.conf \\\n          --mount volume=dns,target=/etc/resolv.conf \\\n          --volume rkt,kind=host,source=/opt/bin/host-rkt \\\n          --mount volume=rkt,target=/usr/bin/rkt \\\n          --volume var-lib-rkt,kind=host,source=/var/lib/rkt \\\n          --mount volume=var-lib-rkt,target=/var/lib/rkt \\\n          --volume stage,kind=host,source=/tmp \\\n          --mount volume=stage,target=/tmp \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log\"\n        ExecStartPre=/usr/bin/mkdir -p /var/log/containers\n        ExecStartPre=/usr/bin/mkdir -p /var/lib/kubelet\n        ExecStartPre=/usr/bin/mount --bind /var/lib/kubelet /var/lib/kubelet\n        ExecStartPre=/usr/bin/mount --make-shared /var/lib/kubelet\n        ExecStartPre=/usr/bin/systemctl is-active flanneld.service\n        ExecStartPre=/opt/bin/wait-for-apiserver\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged=true \\\n          --api-servers=https://master.asdf.com \\\n          --cert-dir=/etc/kubernetes/ssl \\\n          --cloud-provider=aws \\\n          --cluster-dns=10.3.0.10 \\\n          --cluster-domain=cluster.local \\\n          --kubeconfig=/etc/kubernetes/kubeconfig.yml \\\n          --node-labels node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --register-node=true \\\n          --tls-cert-file=/etc/kubernetes/ssl/k8s-worker.pem \\\n          --tls-private-key-file=/etc/kubernetes/ssl/k8s-worker-key.pem\n        Restart=always\n        RestartSec=14\n        [Install]\n        WantedBy=multi-user.target\n\n  update:\n    reboot-strategy: etcd-lock\n\nwrite-files:\n  - path: /etc/environment\n    permissions: 0644\n    content: |\n      COREOS_PRIVATE_IPV4=$private_ipv4\n      ETCD_CA_FILE=/etc/kubernetes/ssl/ca.pem\n      ETCD_CERT_FILE=/etc/kubernetes/ssl/k8s-worker.pem\n      ETCD_KEY_FILE=/etc/kubernetes/ssl/k8s-worker-key.pem\n      ETCDCTL_CA_FILE=/etc/kubernetes/ssl/ca.pem\n      ETCDCTL_CERT_FILE=/etc/kubernetes/ssl/k8s-worker.pem\n      ETCDCTL_KEY_FILE=/etc/kubernetes/ssl/k8s-worker-key.pem\n\n  - path: /opt/bin/host-rkt\n    permissions: 0755\n    owner: root:root\n    content: |\n      #!/bin/sh\n      exec nsenter -m -u -i -n -p -t 1 -- /usr/bin/rkt \"$@\"\n\n  - path: /etc/kubernetes/kubeconfig.yml\n    content: |\n      apiVersion: v1\n      kind: Config\n      clusters:\n        - name: local\n          cluster:\n            certificate-authority: /etc/kubernetes/ssl/ca.pem\n            server: https://master.asdf.com\n      users:\n        - name: kubelet\n          user:\n            client-certificate: /etc/kubernetes/ssl/k8s-worker.pem\n            client-key: /etc/kubernetes/ssl/k8s-worker-key.pem\n      contexts:\n        - context:\n            cluster: local\n            user: kubelet\n          name: kubelet-context\n      current-context: kubelet-context\n\n  - path: /etc/kubernetes/manifests/kube-proxy.yml\n    content: |\n      apiVersion: v1\n      kind: Pod\n      metadata:\n        name: kube-proxy\n        namespace: kube-system\n      spec:\n        hostNetwork: true\n        containers:\n        - name: kube-proxy\n          image: quay.io/coreos/hyperkube:v1.5.1_coreos.0\n          command:\n          - /hyperkube\n          - proxy\n          - --kubeconfig=/etc/kubernetes/kubeconfig.yml\n          - --master=https://master.asdf.com\n          securityContext:\n            privileged: true\n          volumeMounts:\n            - mountPath: /etc/ssl/certs\n              name: \"ssl-certs\"\n            - mountPath: /etc/kubernetes/kubeconfig.yml\n              name: \"kubeconfig\"\n              readOnly: true\n            - mountPath: /etc/kubernetes/ssl\n              name: \"etc-kube-ssl\"\n              readOnly: true\n            - mountPath: /var/run/dbus\n              name: dbus\n              readOnly: false\n        volumes:\n          - name: \"ssl-certs\"\n            hostPath:\n              path: \"/usr/share/ca-certificates\"\n          - name: \"kubeconfig\"\n            hostPath:\n              path: \"/etc/kubernetes/kubeconfig.yml\"\n          - name: \"etc-kube-ssl\"\n            hostPath:\n              path: \"/etc/kubernetes/ssl\"\n          - name: dbus\n            hostPath:\n              path: \"/var/run/dbus\"\n\n\n  - path: /etc/logrotate.d/docker-containers\n    content: |\n      /var/lib/docker/containers/*/*.log {\n        rotate 7\n        daily\n        compress\n        size=1M\n        missingok\n        delaycompress\n        copytruncate\n      }\n\n  - path: /opt/bin/fetch-from-s3\n    permissions: 0755\n    owner: root:root\n    content: |\n      #!/bin/bash -e\n      until /usr/bin/rkt run \\\n        --net=host \\\n        --trust-keys-from-https \\\n        --volume=dns,kind=host,source=/etc/resolv.conf,readOnly=true --mount volume=dns,target=/etc/resolv.conf \\\n        --volume=ssl,kind=host,source=/etc/kubernetes/ssl,readOnly=false --mount=volume=ssl,target=/etc/kubernetes/ssl \\\n        quay.io/coreos/awscli -- aws s3 cp s3://kz8s-pki-asdfasdf--/$1 /etc/kubernetes/ssl\n      do\n        echo \"retrying\"\n        sleep 5.2\n      done\n      echo \"✓\"\n\n  - path: /opt/bin/wait-for-apiserver\n    permissions: 0755\n    owner: root:root\n    content: |\n      #!/bin/bash -e\n      until curl --insecure https://master.asdf.com/ \u0026\u003e/dev/null\n      do\n        echo \"waiting for apiserver...\"\n        sleep 5.2\n      done\n      echo \"✓\"\n\n\n  - path: /opt/bin/create-certificates\n    permissions: 0755\n    owner: root:root\n    content: |\n      #!/bin/bash -ex\n\n      OUTDIR=/etc/kubernetes/ssl\n\n      function error {\n        echo \"✗ Error on line $1\"'!'\n        exit 1\n      }\n      trap 'error ${LINENO}' ERR\n\n      until printf \".\" \u0026\u0026 curl -d '{\"label\":\"primary\"}' http://pki.asdf.com:8888/api/v1/cfssl/info \u0026\u003e/dev/null\n      do sleep 5.2; done; echo \"✓\"\n\n\n      DNS1=\"kubernetes\"\n      DNS2=\"kubernetes.default\"\n      DNS3=\"kubernetes.default.svc\"\n      DNS4=\"kubernetes.default.svc.cluster.local\"\n      DEFAULT_HOSTS=\"$DNS1,$DNS2,$DNS3,$DNS4,127.0.0.1\"\n\n      function csr {\n        cat \u003c\u003cEOF\n      {\"CN\":\"$1\",\"hosts\":[\"\"],\"key\":{\"algo\":\"rsa\",\"size\":2048}}\n      EOF\n      }\n\n      function generate {\n\n        CN=$1\n        PROFILE=$2\n        HOSTS=$3\n\n        echo \"$(csr $CN)\" \\\n          | /opt/bin/cfssl gencert \\\n            -remote=pki.asdf.com:8888 \\\n            -profile=$PROFILE \\\n            -hostname=\"$HOSTS\" - \\\n          | /opt/bin/cfssljson -bare $CN\n\n        chmod 0644 ${CN}.pem ${CN}-key.pem\n\n      }\n\n      mkdir -p $OUTDIR \u0026\u0026 cd $OUTDIR\n\n      generate k8s-worker client \"${DEFAULT_HOSTS},*.*.compute.internal,*.ec2.internal\"\n\n  - path: /etc/kubernetes/cni/net.d/10-flannel.conf\n    content: |\n        {\n            \"name\": \"podnet\",\n            \"type\": \"flannel\",\n            \"delegate\": {\n                \"isDefaultGateway\": true\n            }\n        }\n","template":"#cloud-config\n\n---\ncoreos:\n\n  locksmith:\n    endpoint: https://etcd.${ internal-tld }:2379\n    etcd_cafile: /etc/kubernetes/ssl/ca.pem\n    etcd_certfile: /etc/kubernetes/ssl/k8s-etcd.pem\n    etcd_keyfile: /etc/kubernetes/ssl/k8s-etcd-key.pem\n\n  flannel:\n    etcd_cafile: /etc/kubernetes/ssl/ca.pem\n    etcd_certfile: /etc/kubernetes/ssl/k8s-worker.pem\n    etcd_endpoints: https://etcd.${ internal-tld }:2379\n    etcd_keyfile: /etc/kubernetes/ssl/k8s-worker-key.pem\n\n  units:\n    - name: etcd-member.service\n      command: start\n      drop-ins:\n        - name: 01-wait-for-certs.conf\n          content: |\n            [Unit]\n            After=create-certificates.service\n            Requires=create-certificates.service\n            ConditionFileNotEmpty=/etc/kubernetes/ssl/ca.pem\n            ConditionFileNotEmpty=/etc/kubernetes/ssl/k8s-worker.pem\n            ConditionFileNotEmpty=/etc/kubernetes/ssl/k8s-worker-key.pem\n\n        - name: 10-environment.conf\n          content: |\n            [Service]\n            Environment=\"ETCD_SSL_DIR=/etc/kubernetes/ssl\"\n            Environment=\"ETCD_CERT_FILE=/etc/ssl/certs/k8s-worker.pem\"\n            Environment=\"ETCD_CLIENT_CERT_AUTH=TRUE\"\n            Environment=\"ETCD_DISCOVERY_SRV=${ internal-tld }\"\n            Environment=\"ETCD_KEY_FILE=/etc/ssl/certs/k8s-worker-key.pem\"\n            Environment=\"ETCD_PEER_CERT_FILE=/etc/ssl/certs/k8s-worker.pem\"\n            Environment=\"ETCD_PEER_CLIENT_AUTH=true\"\n            Environment=\"ETCD_PEER_KEY_FILE=/etc/ssl/certs/k8s-worker-key.pem\"\n            Environment=\"ETCD_PEER_TRUSTED_CA_FILE=/etc/ssl/certs/ca.pem\"\n            Environment=\"ETCD_PROXY=on\"\n            Environment=\"ETCD_TRUSTED_CA_FILE=/etc/ssl/certs/ca.pem\"\n\n    - name: format-ephemeral.service\n      command: start\n      content: |\n        [Unit]\n        Description=Formats the ephemeral drive\n        After=dev-xvdf.device\n        Requires=dev-xvdf.device\n        [Service]\n        ExecStart=/usr/sbin/wipefs -f /dev/xvdf\n        ExecStart=/usr/sbin/mkfs.ext4 -F /dev/xvdf\n        RemainAfterExit=yes\n        Type=oneshot\n\n    - name: var-lib-docker.mount\n      command: start\n      content: |\n        [Unit]\n        Description=Mount ephemeral to /var/lib/docker\n        Requires=format-ephemeral.service\n        After=format-ephemeral.service\n        Before=docker.service\n        [Mount]\n        What=/dev/xvdf\n        Where=/var/lib/docker\n        Type=ext4\n\n    - name: download-cfssl.service\n      command: start\n      content: |\n        [Unit]\n        After=network-online.target\n        Requires=network-online.target\n        Before=etcd-member.service\n        Description=Download cfssl\n        [Service]\n        Type=oneshot\n        RemainAfterExit=yes\n        ExecStartPre=-/usr/bin/mkdir --parents /etc/kubernetes/ssl\n        ExecStartPre=-/usr/bin/mkdir --parents /opt/bin\n        ExecStartPre=/usr/bin/curl -L -o /opt/bin/cfssl https://pkg.cfssl.org/R1.2/cfssl_linux-amd64\n        ExecStartPre=/usr/bin/curl -L -o /opt/bin/cfssljson https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64\n        ExecStart=/usr/bin/chmod +x /opt/bin/cfssl /opt/bin/cfssljson\n\n    - name: create-certificates.service\n      command: start\n      content: |\n        [Unit]\n        After=download-cfssl.service\n        Requires=download-cfssl.service\n        Before=flannel.service\n        Description=Get ssl artifacts from s3 bucket using IAM role and create local certificates\n        [Service]\n        Type=oneshot\n        RemainAfterExit=yes\n        ExecStartPre=-/usr/bin/mkdir --parents /etc/kubernetes/ssl\n        ExecStartPre=/opt/bin/fetch-from-s3 ca.pem\n        ExecStart=/opt/bin/create-certificates\n\n    - name: flanneld.service\n      command: start\n      drop-ins:\n        - name: 50-network-config.conf\n          content: |\n            [Service]\n            EnvironmentFile=-/etc/environment\n            Environment=\"ETCD_SSL_DIR=/etc/kubernetes/ssl\"\n            Restart=always\n            RestartSec=10\n\n    - name: docker.service\n      command: start\n      drop-ins:\n        - name: 40-flannel.conf\n          content: |\n            [Unit]\n            After=flanneld.service\n            Requires=flanneld.service\n            [Service]\n            Restart=always\n            RestartSec=10\n\n    - name: prefetch-rkt-hyperkube.service\n      command: start\n      content: |\n        [Unit]\n        After=network-online.target\n        Requires=network-online.target\n        Description=Prefetch rkt Hyperkube\n        [Service]\n        Type=oneshot\n        RemainAfterExit=yes\n        ExecStartPre=/usr/bin/rkt trust --trust-keys-from-https --prefix=quay.io/coreos/hyperkube\n        ExecStart=/usr/bin/rkt fetch ${ hyperkube-image }:${ hyperkube-tag }\n\n    - name: prefetch-docker-hyperkube.service\n      command: start\n      content: |\n        [Unit]\n        After=docker.service\n        Requires=docker.service\n        Description=Prefetch docker Hyperkube\n        [Service]\n        Type=oneshot\n        RemainAfterExit=yes\n        ExecStart=/usr/bin/docker pull ${ hyperkube-image }:${ hyperkube-tag }\n\n    - name: kubelet.service\n      command: start\n      content: |\n        [Unit]\n        ConditionFileIsExecutable=/usr/lib/coreos/kubelet-wrapper\n        ConditionFileNotEmpty=/etc/kubernetes/ssl/k8s-worker.pem\n        ConditionFileNotEmpty=/etc/kubernetes/ssl/k8s-worker-key.pem\n        After=flanneld.service\n        After=prefetch-rkt-hyperkube.service\n        After=prefetch-docker-hyperkube.service\n        Requires=flanneld.service\n        [Service]\n        EnvironmentFile=/etc/environment\n        Environment=\"KUBELET_ACI=${ hyperkube-image }\"\n        Environment=\"KUBELET_VERSION=${ hyperkube-tag }\"\n        Environment=\"RKT_OPTS=\\\n          --volume dns,kind=host,source=/etc/resolv.conf \\\n          --mount volume=dns,target=/etc/resolv.conf \\\n          --volume rkt,kind=host,source=/opt/bin/host-rkt \\\n          --mount volume=rkt,target=/usr/bin/rkt \\\n          --volume var-lib-rkt,kind=host,source=/var/lib/rkt \\\n          --mount volume=var-lib-rkt,target=/var/lib/rkt \\\n          --volume stage,kind=host,source=/tmp \\\n          --mount volume=stage,target=/tmp \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log\"\n        ExecStartPre=/usr/bin/mkdir -p /var/log/containers\n        ExecStartPre=/usr/bin/mkdir -p /var/lib/kubelet\n        ExecStartPre=/usr/bin/mount --bind /var/lib/kubelet /var/lib/kubelet\n        ExecStartPre=/usr/bin/mount --make-shared /var/lib/kubelet\n        ExecStartPre=/usr/bin/systemctl is-active flanneld.service\n        ExecStartPre=/opt/bin/wait-for-apiserver\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged=true \\\n          --api-servers=https://master.${ internal-tld } \\\n          --cert-dir=/etc/kubernetes/ssl \\\n          --cloud-provider=aws \\\n          --cluster-dns=${ dns-service-ip } \\\n          --cluster-domain=${ cluster-domain } \\\n          --kubeconfig=/etc/kubernetes/kubeconfig.yml \\\n          --node-labels node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --register-node=true \\\n          --tls-cert-file=/etc/kubernetes/ssl/k8s-worker.pem \\\n          --tls-private-key-file=/etc/kubernetes/ssl/k8s-worker-key.pem\n        Restart=always\n        RestartSec=14\n        [Install]\n        WantedBy=multi-user.target\n\n  update:\n    reboot-strategy: etcd-lock\n\nwrite-files:\n  - path: /etc/environment\n    permissions: 0644\n    content: |\n      COREOS_PRIVATE_IPV4=$private_ipv4\n      ETCD_CA_FILE=/etc/kubernetes/ssl/ca.pem\n      ETCD_CERT_FILE=/etc/kubernetes/ssl/k8s-worker.pem\n      ETCD_KEY_FILE=/etc/kubernetes/ssl/k8s-worker-key.pem\n      ETCDCTL_CA_FILE=/etc/kubernetes/ssl/ca.pem\n      ETCDCTL_CERT_FILE=/etc/kubernetes/ssl/k8s-worker.pem\n      ETCDCTL_KEY_FILE=/etc/kubernetes/ssl/k8s-worker-key.pem\n\n  - path: /opt/bin/host-rkt\n    permissions: 0755\n    owner: root:root\n    content: |\n      #!/bin/sh\n      exec nsenter -m -u -i -n -p -t 1 -- /usr/bin/rkt \"$@\"\n\n  - path: /etc/kubernetes/kubeconfig.yml\n    content: |\n      apiVersion: v1\n      kind: Config\n      clusters:\n        - name: local\n          cluster:\n            certificate-authority: /etc/kubernetes/ssl/ca.pem\n            server: https://master.${ internal-tld }\n      users:\n        - name: kubelet\n          user:\n            client-certificate: /etc/kubernetes/ssl/k8s-worker.pem\n            client-key: /etc/kubernetes/ssl/k8s-worker-key.pem\n      contexts:\n        - context:\n            cluster: local\n            user: kubelet\n          name: kubelet-context\n      current-context: kubelet-context\n\n  - path: /etc/kubernetes/manifests/kube-proxy.yml\n    content: |\n      apiVersion: v1\n      kind: Pod\n      metadata:\n        name: kube-proxy\n        namespace: kube-system\n      spec:\n        hostNetwork: true\n        containers:\n        - name: kube-proxy\n          image: ${ hyperkube-image }:${ hyperkube-tag }\n          command:\n          - /hyperkube\n          - proxy\n          - --kubeconfig=/etc/kubernetes/kubeconfig.yml\n          - --master=https://master.${ internal-tld }\n          securityContext:\n            privileged: true\n          volumeMounts:\n            - mountPath: /etc/ssl/certs\n              name: \"ssl-certs\"\n            - mountPath: /etc/kubernetes/kubeconfig.yml\n              name: \"kubeconfig\"\n              readOnly: true\n            - mountPath: /etc/kubernetes/ssl\n              name: \"etc-kube-ssl\"\n              readOnly: true\n            - mountPath: /var/run/dbus\n              name: dbus\n              readOnly: false\n        volumes:\n          - name: \"ssl-certs\"\n            hostPath:\n              path: \"/usr/share/ca-certificates\"\n          - name: \"kubeconfig\"\n            hostPath:\n              path: \"/etc/kubernetes/kubeconfig.yml\"\n          - name: \"etc-kube-ssl\"\n            hostPath:\n              path: \"/etc/kubernetes/ssl\"\n          - name: dbus\n            hostPath:\n              path: \"/var/run/dbus\"\n\n\n  - path: /etc/logrotate.d/docker-containers\n    content: |\n      /var/lib/docker/containers/*/*.log {\n        rotate 7\n        daily\n        compress\n        size=1M\n        missingok\n        delaycompress\n        copytruncate\n      }\n\n  - path: /opt/bin/fetch-from-s3\n    permissions: 0755\n    owner: root:root\n    content: |\n      #!/bin/bash -e\n      until /usr/bin/rkt run \\\n        --net=host \\\n        --trust-keys-from-https \\\n        --volume=dns,kind=host,source=/etc/resolv.conf,readOnly=true --mount volume=dns,target=/etc/resolv.conf \\\n        --volume=ssl,kind=host,source=/etc/kubernetes/ssl,readOnly=false --mount=volume=ssl,target=/etc/kubernetes/ssl \\\n        quay.io/coreos/awscli -- aws s3 cp s3://${ s3-bucket }/$1 /etc/kubernetes/ssl\n      do\n        echo \"retrying\"\n        sleep 5.2\n      done\n      echo \"✓\"\n\n  - path: /opt/bin/wait-for-apiserver\n    permissions: 0755\n    owner: root:root\n    content: |\n      #!/bin/bash -e\n      until curl --insecure https://master.${ internal-tld }/ \u0026\u003e/dev/null\n      do\n        echo \"waiting for apiserver...\"\n        sleep 5.2\n      done\n      echo \"✓\"\n\n\n  - path: /opt/bin/create-certificates\n    permissions: 0755\n    owner: root:root\n    content: |\n      #!/bin/bash -ex\n\n      OUTDIR=/etc/kubernetes/ssl\n\n      function error {\n        echo \"✗ Error on line $1\"'!'\n        exit 1\n      }\n      trap 'error $${LINENO}' ERR\n\n      until printf \".\" \u0026\u0026 curl -d '{\"label\":\"primary\"}' http://pki.${ internal-tld }:8888/api/v1/cfssl/info \u0026\u003e/dev/null\n      do sleep 5.2; done; echo \"✓\"\n\n\n      DNS1=\"kubernetes\"\n      DNS2=\"kubernetes.default\"\n      DNS3=\"kubernetes.default.svc\"\n      DNS4=\"kubernetes.default.svc.cluster.local\"\n      DEFAULT_HOSTS=\"$DNS1,$DNS2,$DNS3,$DNS4,127.0.0.1\"\n\n      function csr {\n        cat \u003c\u003cEOF\n      {\"CN\":\"$1\",\"hosts\":[\"\"],\"key\":{\"algo\":\"rsa\",\"size\":2048}}\n      EOF\n      }\n\n      function generate {\n\n        CN=$1\n        PROFILE=$2\n        HOSTS=$3\n\n        echo \"$(csr $CN)\" \\\n          | /opt/bin/cfssl gencert \\\n            -remote=pki.${ internal-tld }:8888 \\\n            -profile=$PROFILE \\\n            -hostname=\"$HOSTS\" - \\\n          | /opt/bin/cfssljson -bare $CN\n\n        chmod 0644 $${CN}.pem $${CN}-key.pem\n\n      }\n\n      mkdir -p $OUTDIR \u0026\u0026 cd $OUTDIR\n\n      generate k8s-worker client \"$${DEFAULT_HOSTS},*.*.compute.internal,*.ec2.internal\"\n\n  - path: /etc/kubernetes/cni/net.d/10-flannel.conf\n    content: |\n        {\n            \"name\": \"podnet\",\n            \"type\": \"flannel\",\n            \"delegate\": {\n                \"isDefaultGateway\": true\n            }\n        }\n","vars":{"cluster-domain":"cluster.local","dns-service-ip":"10.3.0.10","hyperkube-image":"quay.io/coreos/hyperkube","hyperkube-tag":"v1.5.1_coreos.0","internal-tld":"asdf.com","region":"","s3-bucket":"kz8s-pki-asdfasdf--"}}}],"address":"module.worker"},{"address":"module.etcd"}]}}},"configuration":{"provider_config":{"aws":{"name":"aws","expressions":{"region":{"constant_value":"us-east-1"}}}},"root_module":{"outputs":{"azs":{"expression":{"references":["var.aws"]}},"bastion-ip":{"expression":{"references":["module.bastion.ip"]}},"cluster-domain":{"expression":{"references":["var.cluster-domain"]}},"dns-service-ip":{"expression":{"references":["var.dns-service-ip"]}},"etcd1-ip":{"expression":{"references":["var.etcd-ips"]}},"external-elb":{"expression":{"references":["module.etcd.external-elb"]}},"internal-tld":{"expression":{"references":["var.internal-tld"]}},"ips":{"expression":{"references":["module.bastion.ip","var.dns-service-ip","var.etcd-ips","module.pki.ip"]}},"name":{"expression":{"references":["var.name"]}},"pki-ip":{"expression":{"references":["module.pki.ip"]}},"region":{"expression":{"references":["var.aws"]}},"s3-bucket":{"expression":{"references":["module.s3.bucket"]}},"subnet-ids-private":{"expression":{"references":["module.vpc.subnet-ids-private"]}},"subnet-ids-public":{"expression":{"references":["module.vpc.subnet-ids-public"]}},"worker-autoscaling-group-name":{"expression":{"references":["module.worker.autoscaling-group-name"]}}},"module_calls":{"bastion":{"source":"./modules/bastion","expressions":{"ami-id":{"references":["var.coreos-aws"]},"depends-id":{"references":["module.vpc.depends-id"]},"instance-profile-name":{"references":["module.iam.instance-profile-name-bastion"]},"instance-type":{"references":["var.instance-type"]},"internal-tld":{"references":["var.internal-tld"]},"key-name":{"references":["var.aws"]},"name":{"references":["var.name"]},"s3-bucket":{"references":["module.s3.bucket"]},"s3-bucket-arn":{"references":["module.s3.bucket-arn"]},"security-group-id":{"references":["module.security.bastion-id"]},"subnet-id":{"references":["module.vpc.subnet-ids-public"]},"vpc-id":{"references":["module.vpc.id"]}},"module":{"outputs":{"depends-id":{"expression":{"references":["null_resource.dummy_dependency"]}},"ip":{"expression":{"references":["aws_instance.bastion"]}}},"resources":[{"address":"aws_instance.bastion","mode":"managed","type":"aws_instance","name":"bastion","provider_config_key":"bastion:aws","expressions":{"ami":{"references":["var.ami-id"]},"associate_public_ip_address":{"constant_value":true},"iam_instance_profile":{"references":["var.instance-profile-name"]},"instance_type":{"references":["var.instance-type"]},"key_name":{"references":["var.key-name"]},"source_dest_check":{"constant_value":true},"subnet_id":{"references":["var.subnet-id"]},"tags":{"references":["var.name","var.depends-id"]},"user_data":{"references":["data.template_file.cloud-config"]},"vpc_security_group_ids":{"references":["var.security-group-id"]}},"schema_version":1,"raw_data":{"FileName":"modules/bastion/ec2.tf","StartLine":1,"EndLine":24}},{"address":"null_resource.dummy_dependency","mode":"managed","type":"null_resource","name":"dummy_dependency","provider_config_key":"bastion:null","schema_version":0,"depends_on":["aws_instance.bastion"],"raw_data":{"FileName":"modules/bastion/ec2.tf","StartLine":26,"EndLine":28}},{"address":"data.template_file.cloud-config","mode":"data","type":"template_file","name":"cloud-config","provider_config_key":"bastion:template","expressions":{"template":{"references":["path.module"]},"vars":{"references":["var.internal-tld","var.s3-bucket"]}},"schema_version":0,"raw_data":{"FileName":"modules/bastion/cloud-config.tf","StartLine":1,"EndLine":8}}],"variables":{"ami-id":{},"depends-id":{},"instance-profile-name":{},"instance-type":{},"internal-tld":{},"key-name":{},"name":{},"s3-bucket":{},"s3-bucket-arn":{},"security-group-id":{},"subnet-id":{},"vpc-id":{}}},"raw_data":{"FileName":"modules.tf","StartLine":87,"EndLine":105}},"etcd":{"source":"./modules/etcd","expressions":{"ami-id":{"references":["var.coreos-aws"]},"aws":{"references":["var.aws"]},"cluster-domain":{"references":["var.cluster-domain"]},"depends-id":{"references":["module.route53.depends-id"]},"dns-service-ip":{"references":["var.dns-service-ip"]},"etcd-ips":{"references":["var.etcd-ips"]},"etcd-security-group-id":{"references":["module.security.etcd-id"]},"external-elb-security-group-id":{"references":["module.security.external-elb-id"]},"instance-profile-name":{"references":["module.iam.instance-profile-name-master"]},"instance-type":{"references":["var.instance-type"]},"internal-tld":{"references":["var.internal-tld"]},"ip-k8s-service":{"references":["var.k8s-service-ip"]},"k8s":{"references":["var.k8s"]},"name":{"references":["var.name"]},"pod-ip-range":{"references":["var.cidr"]},"s3-bucket":{"references":["module.s3.bucket"]},"service-cluster-ip-range":{"references":["var.cidr"]},"subnet-id-private":{"references":["module.vpc.subnet-ids-private"]},"subnet-id-public":{"references":["module.vpc.subnet-ids-public"]},"vpc-id":{"references":["module.vpc.id"]}},"module":{"outputs":{"depends-id":{"expression":{"references":["null_resource.dummy_dependency"]}},"external-elb":{"expression":{"references":["aws_elb.external"]}},"internal-ips":{"expression":{"references":["aws_instance.etcd"]}}},"resources":[{"address":"aws_elb.external","mode":"managed","type":"aws_elb","name":"external","provider_config_key":"etcd:aws","expressions":{"cross_zone_load_balancing":{"constant_value":false},"health_check":[{"healthy_threshold":{"constant_value":2},"interval":{"constant_value":10},"target":{"constant_value":"SSL:443"},"timeout":{"constant_value":3},"unhealthy_threshold":{"constant_value":6}}],"idle_timeout":{"constant_value":3600},"listener":[{"instance_port":{"constant_value":443},"instance_protocol":{"constant_value":"tcp"},"lb_port":{"constant_value":443},"lb_protocol":{"constant_value":"tcp"}}],"name":{"references":["var.name"]},"security_groups":{"references":["var.external-elb-security-group-id"]},"subnets":{"references":["var.subnet-id-public"]},"tags":{"references":["var.name","var.k8s","var.name"]}},"schema_version":0,"raw_data":{"FileName":"modules/etcd/elb.tf","StartLine":1,"EndLine":35}},{"address":"aws_elb_attachment.master","mode":"managed","type":"aws_elb_attachment","name":"master","provider_config_key":"etcd:aws","expressions":{"elb":{"references":["aws_elb.external"]},"instance":{"references":["aws_instance.etcd","count.index"]}},"schema_version":0,"count_expression":{"references":["var.etcd-ips"]},"raw_data":{"FileName":"modules/etcd/elb.tf","StartLine":37,"EndLine":42}},{"address":"aws_instance.etcd","mode":"managed","type":"aws_instance","name":"etcd","provider_config_key":"etcd:aws","expressions":{"ami":{"references":["var.ami-id"]},"associate_public_ip_address":{"constant_value":false},"iam_instance_profile":{"references":["var.instance-profile-name"]},"instance_type":{"references":["var.instance-type"]},"key_name":{"references":["var.aws"]},"private_ip":{"references":["var.etcd-ips","count.index"]},"root_block_device":[{"volume_size":{"constant_value":124},"volume_type":{"constant_value":"gp2"}}],"source_dest_check":{"constant_value":true},"subnet_id":{"references":["var.subnet-id-private"]},"tags":{"references":["var.depends-id","var.name","var.name","count.index","var.k8s"]},"user_data":{"references":["data.template_file.cloud-config","count.index"]},"vpc_security_group_ids":{"references":["var.etcd-security-group-id"]}},"schema_version":1,"count_expression":{"references":["var.etcd-ips"]},"raw_data":{"FileName":"modules/etcd/ec2.tf","StartLine":1,"EndLine":32}},{"address":"null_resource.dummy_dependency","mode":"managed","type":"null_resource","name":"dummy_dependency","provider_config_key":"etcd:null","schema_version":0,"depends_on":["aws_instance.etcd"],"raw_data":{"FileName":"modules/etcd/ec2.tf","StartLine":34,"EndLine":36}},{"address":"data.template_file.cloud-config","mode":"data","type":"template_file","name":"cloud-config","provider_config_key":"etcd:template","expressions":{"template":{"references":["path.module"]},"vars":{"references":["var.etcd-ips","var.cluster-domain","var.name","var.dns-service-ip","aws_elb.external","count.index","var.internal-tld","count.index","var.k8s","var.k8s","var.k8s","var.k8s","var.internal-tld","var.ip-k8s-service","var.s3-bucket","var.pod-ip-range","var.aws","var.service-cluster-ip-range"]}},"schema_version":0,"count_expression":{"references":["var.etcd-ips"]},"raw_data":{"FileName":"modules/etcd/cloud-config.tf","StartLine":1,"EndLine":23}}],"variables":{"ami-id":{},"aws":{},"cluster-domain":{},"depends-id":{},"dns-service-ip":{},"etcd-ips":{},"etcd-security-group-id":{},"external-elb-security-group-id":{},"instance-profile-name":{},"instance-type":{},"internal-tld":{},"ip-k8s-service":{},"k8s":{},"name":{},"pod-ip-range":{},"s3-bucket":{},"service-cluster-ip-range":{},"subnet-id-private":{},"subnet-id-public":{},"vpc-id":{}}},"raw_data":{"FileName":"modules.tf","StartLine":107,"EndLine":133}},"iam":{"source":"./modules/iam","expressions":{"depends-id":{"references":["module.pki.depends-id"]},"name":{"references":["var.name"]},"s3-bucket-arn":{"references":["module.s3.bucket-arn"]}},"module":{"outputs":{"aws-iam-role-bastion-id":{"expression":{"references":["aws_iam_role.bastion"]}},"aws-iam-role-etcd-id":{"expression":{"references":["aws_iam_role.master"]}},"aws-iam-role-pki-id":{"expression":{"references":["aws_iam_role.pki"]}},"aws-iam-role-worker-id":{"expression":{"references":["aws_iam_role.worker"]}},"depends-id":{"expression":{"references":["null_resource.dummy_dependency"]}},"instance-profile-name-bastion":{"expression":{"references":["aws_iam_instance_profile.bastion"]}},"instance-profile-name-master":{"expression":{"references":["aws_iam_instance_profile.master"]}},"instance-profile-name-pki":{"expression":{"references":["aws_iam_instance_profile.pki"]}},"instance-profile-name-worker":{"expression":{"references":["aws_iam_instance_profile.worker"]}}},"resources":[{"address":"aws_iam_instance_profile.bastion","mode":"managed","type":"aws_iam_instance_profile","name":"bastion","provider_config_key":"iam:aws","expressions":{"name":{"references":["var.name"]},"role":{"references":["aws_iam_role.bastion"]}},"schema_version":0,"raw_data":{"FileName":"modules/iam/bastion.tf","StartLine":18,"EndLine":21}},{"address":"aws_iam_instance_profile.master","mode":"managed","type":"aws_iam_instance_profile","name":"master","provider_config_key":"iam:aws","expressions":{"name":{"references":["var.name"]},"role":{"references":["aws_iam_role.master"]}},"schema_version":0,"raw_data":{"FileName":"modules/iam/etcd.tf","StartLine":18,"EndLine":22}},{"address":"aws_iam_instance_profile.pki","mode":"managed","type":"aws_iam_instance_profile","name":"pki","provider_config_key":"iam:aws","expressions":{"name":{"references":["var.name"]},"role":{"references":["aws_iam_role.pki"]}},"schema_version":0,"raw_data":{"FileName":"modules/iam/pki.tf","StartLine":21,"EndLine":24}},{"address":"aws_iam_instance_profile.worker","mode":"managed","type":"aws_iam_instance_profile","name":"worker","provider_config_key":"iam:aws","expressions":{"name":{"references":["var.name"]},"role":{"references":["aws_iam_role.worker"]}},"schema_version":0,"raw_data":{"FileName":"modules/iam/worker.tf","StartLine":20,"EndLine":24}},{"address":"aws_iam_role.bastion","mode":"managed","type":"aws_iam_role","name":"bastion","provider_config_key":"iam:aws","expressions":{"assume_role_policy":{"constant_value":"{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Principal\": { \"Service\": \"ec2.amazonaws.com\" },\n      \"Action\": \"sts:AssumeRole\"\n    }\n  ]\n}\n"},"name":{"references":["var.name"]}},"schema_version":0,"raw_data":{"FileName":"modules/iam/bastion.tf","StartLine":1,"EndLine":16}},{"address":"aws_iam_role.master","mode":"managed","type":"aws_iam_role","name":"master","provider_config_key":"iam:aws","expressions":{"assume_role_policy":{"constant_value":"{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Principal\": { \"Service\": \"ec2.amazonaws.com\" },\n      \"Action\": \"sts:AssumeRole\"\n    }\n  ]\n}\n"},"name":{"references":["var.name"]}},"schema_version":0,"raw_data":{"FileName":"modules/iam/etcd.tf","StartLine":1,"EndLine":16}},{"address":"aws_iam_role.pki","mode":"managed","type":"aws_iam_role","name":"pki","provider_config_key":"iam:aws","expressions":{"assume_role_policy":{"constant_value":"{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Principal\": { \"Service\": \"ec2.amazonaws.com\" },\n      \"Action\": \"sts:AssumeRole\"\n    }\n  ]\n}\n"},"name":{"references":["var.name"]}},"schema_version":0,"raw_data":{"FileName":"modules/iam/pki.tf","StartLine":1,"EndLine":18}},{"address":"aws_iam_role.worker","mode":"managed","type":"aws_iam_role","name":"worker","provider_config_key":"iam:aws","expressions":{"assume_role_policy":{"constant_value":"{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Principal\": {\n        \"Service\": \"ec2.amazonaws.com\"\n      },\n      \"Action\": \"sts:AssumeRole\"\n    }\n  ]\n}\n"},"name":{"references":["var.name"]}},"schema_version":0,"raw_data":{"FileName":"modules/iam/worker.tf","StartLine":1,"EndLine":18}},{"address":"aws_iam_role_policy.bastion","mode":"managed","type":"aws_iam_role_policy","name":"bastion","provider_config_key":"iam:aws","expressions":{"name":{"references":["var.name"]},"policy":{"references":["var.s3-bucket-arn"]},"role":{"references":["aws_iam_role.bastion"]}},"schema_version":0,"raw_data":{"FileName":"modules/iam/bastion.tf","StartLine":23,"EndLine":40}},{"address":"aws_iam_role_policy.master","mode":"managed","type":"aws_iam_role_policy","name":"master","provider_config_key":"iam:aws","expressions":{"name":{"references":["var.name"]},"policy":{"references":["var.s3-bucket-arn"]},"role":{"references":["aws_iam_role.master"]}},"schema_version":0,"raw_data":{"FileName":"modules/iam/etcd.tf","StartLine":24,"EndLine":86}},{"address":"aws_iam_role_policy.pki","mode":"managed","type":"aws_iam_role_policy","name":"pki","provider_config_key":"iam:aws","expressions":{"name":{"references":["var.name"]},"policy":{"references":["var.s3-bucket-arn"]},"role":{"references":["aws_iam_role.pki"]}},"schema_version":0,"raw_data":{"FileName":"modules/iam/pki.tf","StartLine":27,"EndLine":48}},{"address":"aws_iam_role_policy.worker","mode":"managed","type":"aws_iam_role_policy","name":"worker","provider_config_key":"iam:aws","expressions":{"name":{"references":["var.name"]},"policy":{"references":["var.s3-bucket-arn"]},"role":{"references":["aws_iam_role.worker"]}},"schema_version":0,"raw_data":{"FileName":"modules/iam/worker.tf","StartLine":26,"EndLine":76}},{"address":"null_resource.dummy_dependency","mode":"managed","type":"null_resource","name":"dummy_dependency","provider_config_key":"iam:null","schema_version":0,"depends_on":["aws_iam_role.worker","aws_iam_role_policy.worker","aws_iam_instance_profile.worker"],"raw_data":{"FileName":"modules/iam/worker.tf","StartLine":78,"EndLine":84}}],"variables":{"depends-id":{},"name":{},"s3-bucket-arn":{}}},"raw_data":{"FileName":"modules.tf","StartLine":76,"EndLine":85}},"pki":{"source":"./modules/pki","expressions":{"ami-id":{"references":["var.coreos-aws"]},"aws":{"references":["var.aws"]},"cidr-vpc":{"references":["var.cidr"]},"depends-id":{"references":["module.vpc.depends-id"]},"instance-profile-name":{"references":["module.iam.instance-profile-name-pki"]},"instance-type":{"references":["var.instance-type"]},"internal-tld":{"references":["var.internal-tld"]},"internal-zone-id":{"references":["module.route53.internal-zone-id"]},"ip":{"references":["var.pki-ip"]},"k8s":{"references":["var.k8s"]},"name":{"references":["var.name"]},"s3-bucket":{"references":["module.s3.bucket"]},"s3-bucket-arn":{"references":["module.s3.bucket-arn"]},"security-group-id":{"references":["module.security.pki-id"]},"subnet-id":{"references":["module.vpc.subnet-ids-private"]},"vpc-id":{"references":["module.vpc.id"]}},"module":{"outputs":{"depends-id":{"expression":{"references":["null_resource.dummy_dependency"]}},"ip":{"expression":{"references":["aws_instance.pki"]}}},"resources":[{"address":"aws_instance.pki","mode":"managed","type":"aws_instance","name":"pki","provider_config_key":"pki:aws","expressions":{"ami":{"references":["var.ami-id"]},"associate_public_ip_address":{"constant_value":false},"iam_instance_profile":{"references":["var.instance-profile-name"]},"instance_type":{"references":["var.instance-type"]},"key_name":{"references":["var.aws"]},"private_ip":{"references":["var.ip"]},"source_dest_check":{"constant_value":true},"subnet_id":{"references":["var.subnet-id"]},"tags":{"references":["var.name","var.depends-id"]},"user_data":{"references":["data.template_file.cloud-config"]},"vpc_security_group_ids":{"references":["var.security-group-id"]}},"schema_version":1,"raw_data":{"FileName":"modules/pki/ec2.tf","StartLine":1,"EndLine":27}},{"address":"aws_route53_record.pki","mode":"managed","type":"aws_route53_record","name":"pki","provider_config_key":"pki:aws","expressions":{"name":{"constant_value":"pki"},"records":{"references":["aws_instance.pki"]},"ttl":{"constant_value":"300"},"type":{"constant_value":"A"},"zone_id":{"references":["var.internal-zone-id"]}},"schema_version":2,"raw_data":{"FileName":"modules/pki/route53.tf","StartLine":1,"EndLine":13}},{"address":"null_resource.dummy_dependency","mode":"managed","type":"null_resource","name":"dummy_dependency","provider_config_key":"pki:null","schema_version":0,"depends_on":["aws_instance.pki","aws_route53_record.pki"],"raw_data":{"FileName":"modules/pki/null-resource.tf","StartLine":1,"EndLine":8}},{"address":"data.template_file.cloud-config","mode":"data","type":"template_file","name":"cloud-config","provider_config_key":"pki:template","expressions":{"template":{"references":["path.module"]},"vars":{"references":["var.internal-tld","var.s3-bucket"]}},"schema_version":0,"raw_data":{"FileName":"modules/pki/cloud-config.tf","StartLine":1,"EndLine":10}}],"variables":{"ami-id":{},"aws":{},"cidr-vpc":{},"depends-id":{},"instance-profile-name":{},"instance-type":{},"internal-tld":{},"internal-zone-id":{},"ip":{},"k8s":{},"name":{},"s3-bucket":{},"s3-bucket-arn":{},"security-group-id":{},"subnet-id":{},"vpc-id":{}}},"raw_data":{"FileName":"modules.tf","StartLine":39,"EndLine":61}},"route53":{"source":"./modules/route53","expressions":{"depends-id":{"references":["module.vpc.depends-id"]},"etcd-ips":{"references":["var.etcd-ips"]},"internal-tld":{"references":["var.internal-tld"]},"name":{"references":["var.name"]},"vpc-id":{"references":["module.vpc.id"]}},"module":{"outputs":{"depends-id":{"expression":{"references":["null_resource.dummy_dependency"]}},"internal-name-servers":{"expression":{"references":["aws_route53_zone.internal"]}},"internal-zone-id":{"expression":{"references":["aws_route53_zone.internal"]}}},"resources":[{"address":"aws_route53_record.A-etcd","mode":"managed","type":"aws_route53_record","name":"A-etcd","provider_config_key":"route53:aws","expressions":{"name":{"constant_value":"etcd"},"records":{"references":["var.etcd-ips"]},"ttl":{"constant_value":"300"},"type":{"constant_value":"A"},"zone_id":{"references":["aws_route53_zone.internal"]}},"schema_version":2,"raw_data":{"FileName":"modules/route53/route53.tf","StartLine":12,"EndLine":18}},{"address":"aws_route53_record.A-etcds","mode":"managed","type":"aws_route53_record","name":"A-etcds","provider_config_key":"route53:aws","expressions":{"name":{"references":["count.index"]},"records":{"references":["var.etcd-ips","count.index"]},"ttl":{"constant_value":"300"},"type":{"constant_value":"A"},"zone_id":{"references":["aws_route53_zone.internal"]}},"schema_version":2,"count_expression":{"references":["var.etcd-ips"]},"raw_data":{"FileName":"modules/route53/route53.tf","StartLine":20,"EndLine":30}},{"address":"aws_route53_record.CNAME-master","mode":"managed","type":"aws_route53_record","name":"CNAME-master","provider_config_key":"route53:aws","expressions":{"name":{"constant_value":"master"},"records":{"constant_value":["asdf.com"]},"ttl":{"constant_value":"300"},"type":{"constant_value":"CNAME"},"zone_id":{"references":["aws_route53_zone.internal"]}},"schema_version":2,"raw_data":{"FileName":"modules/route53/route53.tf","StartLine":32,"EndLine":38}},{"address":"aws_route53_record.etcd-client-tcp","mode":"managed","type":"aws_route53_record","name":"etcd-client-tcp","provider_config_key":"route53:aws","expressions":{"name":{"constant_value":"_etcd-client._tcp"},"records":{"references":["aws_route53_record.A-etcds"]},"ttl":{"constant_value":"300"},"type":{"constant_value":"SRV"},"zone_id":{"references":["aws_route53_zone.internal"]}},"schema_version":2,"raw_data":{"FileName":"modules/route53/route53.tf","StartLine":40,"EndLine":46}},{"address":"aws_route53_record.etcd-server-tcp","mode":"managed","type":"aws_route53_record","name":"etcd-server-tcp","provider_config_key":"route53:aws","expressions":{"name":{"constant_value":"_etcd-server-ssl._tcp"},"records":{"references":["aws_route53_record.A-etcds"]},"ttl":{"constant_value":"300"},"type":{"constant_value":"SRV"},"zone_id":{"references":["aws_route53_zone.internal"]}},"schema_version":2,"raw_data":{"FileName":"modules/route53/route53.tf","StartLine":48,"EndLine":54}},{"address":"aws_route53_zone.internal","mode":"managed","type":"aws_route53_zone","name":"internal","provider_config_key":"route53:aws","expressions":{"comment":{"constant_value":"Kubernetes [tack] cluster DNS (internal)"},"name":{"references":["var.internal-tld"]},"tags":{"references":["var.name","var.name","var.name"]}},"schema_version":0,"raw_data":{"FileName":"modules/route53/route53.tf","StartLine":1,"EndLine":10}},{"address":"null_resource.dummy_dependency","mode":"managed","type":"null_resource","name":"dummy_dependency","provider_config_key":"route53:null","schema_version":0,"depends_on":["aws_route53_record.etcd-server-tcp","aws_route53_record.A-etcd"],"raw_data":{"FileName":"modules/route53/route53.tf","StartLine":56,"EndLine":61}}],"variables":{"depends-id":{},"etcd-ips":{},"internal-tld":{},"name":{},"vpc-id":{}}},"raw_data":{"FileName":"modules.tf","StartLine":26,"EndLine":37}},"s3":{"source":"./modules/s3","expressions":{"aws":{"references":["var.aws"]},"bucket":{"references":["var.name","var.aws","var.aws"]},"name":{"references":["var.name"]}},"module":{"outputs":{"bucket":{"expression":{"references":["var.bucket"]}},"bucket-arn":{"expression":{"references":["aws_s3_bucket.pki"]}}},"resources":[{"address":"aws_s3_bucket.pki","mode":"managed","type":"aws_s3_bucket","name":"pki","provider_config_key":"s3:aws","expressions":{"acl":{"constant_value":"private"},"bucket":{"references":["var.bucket"]},"force_destroy":{"constant_value":true},"tags":{"references":["var.name","var.name","var.name"]}},"schema_version":0,"raw_data":{"FileName":"modules/s3/s3.tf","StartLine":1,"EndLine":14}}],"variables":{"aws":{},"bucket":{},"name":{}}},"raw_data":{"FileName":"modules.tf","StartLine":1,"EndLine":8}},"security":{"source":"./modules/security","expressions":{"cidr-allow-ssh":{"references":["var.cidr"]},"cidr-vpc":{"references":["var.cidr"]},"depends-id":{"references":["module.vpc.depends-id"]},"name":{"references":["var.name"]},"vpc-id":{"references":["module.vpc.id"]}},"module":{"outputs":{"bastion-id":{"expression":{"references":["aws_security_group.bastion"]}},"depends-id":{"expression":{"references":["null_resource.dummy_dependency"]}},"etcd-id":{"expression":{"references":["aws_security_group.etcd"]}},"external-elb-id":{"expression":{"references":["aws_security_group.external-elb"]}},"pki-id":{"expression":{"references":["aws_security_group.pki"]}},"worker-id":{"expression":{"references":["aws_security_group.worker"]}}},"resources":[{"address":"aws_security_group.bastion","mode":"managed","type":"aws_security_group","name":"bastion","provider_config_key":"security:aws","expressions":{"description":{"constant_value":"kz8s bastion security group"},"name":{"references":["var.name"]},"tags":{"references":["var.name","var.name","var.name"]},"vpc_id":{"references":["var.vpc-id"]}},"schema_version":1,"raw_data":{"FileName":"modules/security/security.tf","StartLine":1,"EndLine":28}},{"address":"aws_security_group.etcd","mode":"managed","type":"aws_security_group","name":"etcd","provider_config_key":"security:aws","expressions":{"description":{"constant_value":"kz8s etcd security group"},"name":{"references":["var.name"]},"tags":{"references":["var.name","var.name","var.name"]},"vpc_id":{"references":["var.vpc-id"]}},"schema_version":1,"raw_data":{"FileName":"modules/security/security.tf","StartLine":63,"EndLine":92}},{"address":"aws_security_group.external-elb","mode":"managed","type":"aws_security_group","name":"external-elb","provider_config_key":"security:aws","expressions":{"description":{"references":["var.name"]},"name":{"references":["var.name"]},"tags":{"references":["var.name","var.name","var.name"]},"vpc_id":{"references":["var.vpc-id"]}},"schema_version":1,"raw_data":{"FileName":"modules/security/security.tf","StartLine":95,"EndLine":130}},{"address":"aws_security_group.pki","mode":"managed","type":"aws_security_group","name":"pki","provider_config_key":"security:aws","expressions":{"description":{"constant_value":"k8s pki security group"},"name":{"references":["var.name"]},"tags":{"references":["var.name","var.name","var.name"]},"vpc_id":{"references":["var.vpc-id"]}},"schema_version":1,"raw_data":{"FileName":"modules/security/security.tf","StartLine":31,"EndLine":60}},{"address":"aws_security_group.worker","mode":"managed","type":"aws_security_group","name":"worker","provider_config_key":"security:aws","expressions":{"description":{"constant_value":"kz8s worker security group"},"name":{"references":["var.name"]},"tags":{"references":["var.name","var.name","var.name"]},"vpc_id":{"references":["var.vpc-id"]}},"schema_version":1,"raw_data":{"FileName":"modules/security/security.tf","StartLine":132,"EndLine":161}},{"address":"null_resource.dummy_dependency","mode":"managed","type":"null_resource","name":"dummy_dependency","provider_config_key":"security:null","schema_version":0,"depends_on":["aws_security_group.bastion","aws_security_group.etcd","aws_security_group.external-elb","aws_security_group.pki","aws_security_group.worker"],"raw_data":{"FileName":"modules/security/null-resource.tf","StartLine":1,"EndLine":11}}],"variables":{"cidr-allow-ssh":{},"cidr-vpc":{},"depends-id":{},"name":{},"vpc-id":{}}},"raw_data":{"FileName":"modules.tf","StartLine":63,"EndLine":74}},"vpc":{"source":"./modules/vpc-existing","expressions":{"azs":{"constant_value":"us-east-1a"},"cidr":{"constant_value":"10.1.1.0/24"},"depends-id":{"constant_value":""},"gateway-id":{"references":["var.vpc-existing"]},"hyperkube-tag":{"references":["var.k8s"]},"id":{"constant_value":"vpc-033a54f26ef5e2b4a"},"name":{"constant_value":"sfdc-somestage-consoleme"},"region":{"constant_value":"us-east-1"},"subnet-ids-private":{"references":["var.vpc-existing"]},"subnet-ids-public":{"references":["var.vpc-existing"]}},"module":{"outputs":{"depends-id":{"expression":{"references":["var.id"]}},"gateway-id":{"expression":{"references":["var.gateway-id"]}},"id":{"expression":{"references":["var.id"]}},"subnet-ids-private":{"expression":{"references":["var.subnet-ids-private"]}},"subnet-ids-public":{"expression":{"references":["var.subnet-ids-public"]}}},"variables":{"azs":{},"cidr":{},"depends-id":{},"gateway-id":{},"hyperkube-tag":{},"id":{},"name":{},"region":{},"subnet-ids-private":{},"subnet-ids-public":{}}},"raw_data":{"FileName":"modules_override.tf","StartLine":4,"EndLine":14}},"worker":{"source":"./modules/worker","expressions":{"ami-id":{"references":["var.coreos-aws"]},"aws":{"references":["var.aws"]},"capacity":{"constant_value":{"desired":3,"max":5,"min":1}},"cluster-domain":{"references":["var.cluster-domain"]},"depends-id":{"references":["module.route53.depends-id"]},"dns-service-ip":{"references":["var.dns-service-ip"]},"instance-profile-name":{"references":["module.iam.instance-profile-name-worker"]},"instance-type":{"references":["var.instance-type"]},"internal-tld":{"references":["var.internal-tld"]},"k8s":{"references":["var.k8s"]},"name":{"references":["var.name"]},"s3-bucket":{"references":["module.s3.bucket"]},"security-group-id":{"references":["module.security.worker-id"]},"subnet-id":{"references":["module.vpc.subnet-ids-private"]},"volume_size":{"constant_value":{"ebs":250,"root":52}},"vpc-id":{"references":["module.vpc.id"]},"worker-name":{"constant_value":"general"}},"module":{"outputs":{"autoscaling-group-name":{"expression":{"references":["aws_autoscaling_group.worker"]}},"depends-id":{"expression":{"references":["null_resource.dummy_dependency"]}}},"resources":[{"address":"aws_autoscaling_group.worker","mode":"managed","type":"aws_autoscaling_group","name":"worker","provider_config_key":"worker:aws","expressions":{"desired_capacity":{"references":["var.capacity"]},"force_delete":{"constant_value":true},"health_check_grace_period":{"constant_value":60},"health_check_type":{"constant_value":"EC2"},"launch_configuration":{"references":["aws_launch_configuration.worker"]},"max_size":{"references":["var.capacity"]},"min_size":{"references":["var.capacity"]},"name":{"references":["var.worker-name","var.name"]},"tag":[{"key":{"constant_value":"builtWith"},"propagate_at_launch":{"constant_value":true},"value":{"constant_value":"terraform"}},{"key":{"constant_value":"depends-id"},"propagate_at_launch":{"constant_value":false},"value":{"references":["var.depends-id"]}},{"key":{"constant_value":"KubernetesCluster"},"propagate_at_launch":{"constant_value":true},"value":{"references":["var.name"]}},{"key":{"constant_value":"kz8s"},"propagate_at_launch":{"constant_value":true},"value":{"references":["var.name"]}},{"key":{"constant_value":"Name"},"propagate_at_launch":{"constant_value":true},"value":{"constant_value":"kz8s-worker"}},{"key":{"constant_value":"role"},"propagate_at_launch":{"constant_value":true},"value":{"constant_value":"worker"}},{"key":{"constant_value":"version"},"propagate_at_launch":{"constant_value":true},"value":{"references":["var.k8s"]}},{"key":{"constant_value":"visibility"},"propagate_at_launch":{"constant_value":true},"value":{"constant_value":"private"}}],"vpc_zone_identifier":{"references":["var.subnet-id"]}},"schema_version":0,"raw_data":{"FileName":"modules/worker/ec2.tf","StartLine":30,"EndLine":90}},{"address":"aws_launch_configuration.worker","mode":"managed","type":"aws_launch_configuration","name":"worker","provider_config_key":"worker:aws","expressions":{"ebs_block_device":[{"device_name":{"constant_value":"/dev/xvdf"},"volume_size":{"references":["var.volume_size"]},"volume_type":{"constant_value":"gp2"}}],"iam_instance_profile":{"references":["var.instance-profile-name"]},"image_id":{"references":["var.ami-id"]},"instance_type":{"references":["var.instance-type"]},"key_name":{"references":["var.aws"]},"root_block_device":[{"volume_size":{"references":["var.volume_size"]},"volume_type":{"constant_value":"gp2"}}],"security_groups":{"references":["var.security-group-id"]},"user_data":{"references":["data.template_file.cloud-config"]}},"schema_version":0,"raw_data":{"FileName":"modules/worker/ec2.tf","StartLine":1,"EndLine":28}},{"address":"null_resource.dummy_dependency","mode":"managed","type":"null_resource","name":"dummy_dependency","provider_config_key":"worker:null","schema_version":0,"depends_on":["aws_autoscaling_group.worker","aws_launch_configuration.worker"],"raw_data":{"FileName":"modules/worker/ec2.tf","StartLine":92,"EndLine":97}},{"address":"data.template_file.cloud-config","mode":"data","type":"template_file","name":"cloud-config","provider_config_key":"worker:template","expressions":{"template":{"references":["path.module"]},"vars":{"references":["var.cluster-domain","var.dns-service-ip","var.k8s","var.k8s","var.internal-tld","var.s3-bucket","var.aws"]}},"schema_version":0,"raw_data":{"FileName":"modules/worker/cloud-config.tf","StartLine":1,"EndLine":13}}],"variables":{"ami-id":{},"aws":{},"capacity":{"default":{"desired":5,"max":5,"min":3}},"cluster-domain":{},"depends-id":{},"dns-service-ip":{},"instance-profile-name":{},"instance-type":{},"internal-tld":{},"k8s":{},"name":{},"s3-bucket":{},"security-group-id":{},"subnet-id":{},"volume_size":{"default":{"ebs":250,"root":52}},"vpc-id":{},"worker-name":{}}},"raw_data":{"FileName":"modules.tf","StartLine":135,"EndLine":165}}},"variables":{"aws":{"default":{"account-id":"","azs":"","key-name":"","region":""}},"cidr":{"default":{"allow-ssh":"0.0.0.0/0","pods":"10.2.0.0/16","service-cluster":"10.3.0.0/24","vpc":"10.0.0.0/16"}},"cluster-domain":{"default":"cluster.local"},"coreos-aws":{"default":{"ami":"","channel":"","type":""}},"dns-service-ip":{"default":"10.3.0.10"},"etcd-ips":{"default":"10.0.10.10,10.0.10.11,10.0.10.12"},"instance-type":{"default":{"bastion":"t2.nano","etcd":"m3.large","pki":"t2.nano","worker":"m3.large"}},"internal-tld":{},"k8s":{"default":{"hyperkube-image":"quay.io/coreos/hyperkube","hyperkube-tag":"v1.5.1_coreos.0"}},"k8s-service-ip":{"default":"10.3.0.1"},"name":{},"pki-ip":{},"s3-bucket":{},"vpc-existing":{"default":{"gateway-id":"","id":"","subnet-ids-private":"","subnet-ids-public":""}}}}}}
