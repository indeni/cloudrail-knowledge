AWSTemplateFormatVersion: 2010-09-09

Resources:
  CreateKeyPairLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: !Sub |
          #!/usr/bin/env python
          import boto3
          import cfnresponse          
         
          def lambda_handler(event, context):
              response_data = {}
              try:
                  ec2 = boto3.client('ec2')
                  if event['RequestType'] == 'Delete':
                    response = ec2.delete_key_pair(KeyName="testcrbastion-xyuhdf")
                  else:
                    response = ec2.create_key_pair(KeyName="testcrbastion-xyuhdf")
                  cfnresponse.send(event, context, "SUCCESS", response_data)
              except Exception as e:
                  print(e)
                  cfnresponse.send(event, context, "FAILED", response_data)
      Handler: index.lambda_handler
      Runtime: python3.6
      Timeout: 30
      Role : !GetAtt CreateKeyPairLambdaRole.Arn
  CreateKeyPairLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: "BucketDeleteLambdaPolicy"
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*          
          - Effect: Allow
            Action:
            - ec2:*
            Resource: '*'
  CreateKeyPair:
    DependsOn: CreateKeyPairLambda
    Type: Custom::CreateKeyPair
    Properties:
      ServiceToken: !GetAtt CreateKeyPairLambda.Arn
  VPCStack:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL: !Sub https://aws-quickstart-${AWS::Region}.s3.${AWS::Region}.${AWS::URLSuffix}/quickstart-linux-bastion/submodules/quickstart-aws-vpc/templates/aws-vpc.template.yaml
      Parameters:
        AvailabilityZones: !Join
          - ','
          - - !Select [ 0, !GetAZs ]
            - !Select [ 1, !GetAZs ]
        NumberOfAZs: '2'
        PrivateSubnet1ACIDR: "10.10.1.0/24"
        PrivateSubnet2ACIDR: "10.10.2.0/24"
        PublicSubnet1CIDR: "10.10.10.0/24"
        PublicSubnet2CIDR: "10.10.20.0/24"
        VPCCIDR: "10.10.0.0/16"
  BastionStack:
    Type: 'AWS::CloudFormation::Stack'
    DependsOn: [CreateKeyPair]
    Properties:
      TemplateURL: !Sub https://aws-quickstart-${AWS::Region}.s3.${AWS::Region}.${AWS::URLSuffix}/quickstart-linux-bastion/templates/linux-bastion.template
      Parameters:
        BastionHostName: "dev-test-bastion"
        PublicSubnet1ID: !GetAtt VPCStack.Outputs.PublicSubnet1ID
        PublicSubnet2ID: !GetAtt VPCStack.Outputs.PublicSubnet2ID
        VPCID: !GetAtt VPCStack.Outputs.VPCID
        RemoteAccessCIDR: "0.0.0.0/0"
        KeyPairName: "testcrbastion-xyuhdf"
  