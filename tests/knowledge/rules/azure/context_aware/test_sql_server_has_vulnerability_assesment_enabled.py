from unittest import TestCase
from parameterized import parameterized

from cloudrail.dev_tools.rule_test_utils import create_empty_entity
from cloudrail.knowledge.context.aliases_dict import AliasesDict
from cloudrail.knowledge.context.azure.azure_environment_context import AzureEnvironmentContext
from cloudrail.knowledge.context.azure.resources.databases.azure_mssql_server_security_alert_policy import AzureMsSqlServerSecurityAlertPolicy, AzureMsSqlServerSecurityAlertPolicyState
from cloudrail.knowledge.context.azure.resources.databases.azure_mssql_server_vulnerability_assessment import AzureMsSqlServerVulnerabilityAssessment, \
    AzureMsSqlServerVulnerabilityAssessmentRecurringScans
from cloudrail.knowledge.context.azure.resources.databases.azure_sql_server import AzureSqlServer
from cloudrail.knowledge.rules.azure.context_aware.sql_server_has_vulnerability_assesment_enabled import SqlServerHasVulnerabilityAssessmentEnabledRule
from cloudrail.knowledge.rules.base_rule import RuleResultType


class TestSqlServerHasVulnerabilityAssessmentEnabledRule(TestCase):
    def setUp(self):
        self.rule = SqlServerHasVulnerabilityAssessmentEnabledRule()

    @parameterized.expand(
        [
            ["no_vulnerability", False, [], None, None, True],
            ["has_vulnerability_no_emails", True, [], True, True, True],
            ["has_vulnerability_with__all_config", True, ['some_email@gmail.com'], True, True, False]
        ]
    )
    def test_sql_server_vulnerability_assessment_fully_enabled(self, unused_name: str, sql_has_vulnerability: bool,
                                                               emails: list, email_to_admins: bool, enabled_scans: bool, should_alert: bool):
        # Arrange
        sql_server: AzureSqlServer = create_empty_entity(AzureSqlServer)
        sql_server_security_alert_policy: AzureMsSqlServerSecurityAlertPolicy = create_empty_entity(AzureMsSqlServerSecurityAlertPolicy)
        sql_server_vulnerability_assessment: AzureMsSqlServerVulnerabilityAssessment = create_empty_entity(AzureMsSqlServerVulnerabilityAssessment)
        recurring_scans: AzureMsSqlServerVulnerabilityAssessmentRecurringScans = create_empty_entity(AzureMsSqlServerVulnerabilityAssessmentRecurringScans)
        recurring_scans.emails = emails
        recurring_scans.email_subscription_admins = email_to_admins
        recurring_scans.enabled = enabled_scans
        sql_server_vulnerability_assessment.recurring_scans_settings = recurring_scans
        if sql_has_vulnerability:
            sql_server_security_alert_policy.vulnerability_assessment = sql_server_vulnerability_assessment
            sql_server_security_alert_policy.state = AzureMsSqlServerSecurityAlertPolicyState.ENABLED
        sql_server.security_alert_policy_list.append(sql_server_security_alert_policy)
        context = AzureEnvironmentContext(sql_servers=AliasesDict(sql_server),
                                          sql_server_security_alert_policies=AliasesDict(sql_server_security_alert_policy),
                                          sql_server_vulnerability_assessments=AliasesDict(sql_server_vulnerability_assessment))
        # Act
        result = self.rule.run(context, {})
        # Assert
        if should_alert:
            self.assertEqual(RuleResultType.FAILED, result.status)
            self.assertEqual(1, len(result.issues))
        else:
            self.assertEqual(RuleResultType.SUCCESS, result.status)
            self.assertEqual(0, len(result.issues))
